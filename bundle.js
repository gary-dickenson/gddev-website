/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={243:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.parse=function(e,t){const n=new l,r=e.length;if(r<2)return n;const a=t?.decode||c;let o=0;do{const t=e.indexOf("=",o);if(-1===t)break;const i=e.indexOf(";",o),l=-1===i?r:i;if(t>l){o=e.lastIndexOf(";",t-1)+1;continue}const c=s(e,o,t),d=u(e,t,c),f=e.slice(c,d);if(void 0===n[f]){let r=s(e,t+1,l),o=u(e,l,r);const i=a(e.slice(r,o));n[f]=i}o=l+1}while(o<r);return n},t.serialize=function(e,t,l){const s=l?.encode||encodeURIComponent;if(!n.test(e))throw new TypeError(`argument name is invalid: ${e}`);const u=s(t);if(!r.test(u))throw new TypeError(`argument val is invalid: ${t}`);let c=e+"="+u;if(!l)return c;if(void 0!==l.maxAge){if(!Number.isInteger(l.maxAge))throw new TypeError(`option maxAge is invalid: ${l.maxAge}`);c+="; Max-Age="+l.maxAge}if(l.domain){if(!a.test(l.domain))throw new TypeError(`option domain is invalid: ${l.domain}`);c+="; Domain="+l.domain}if(l.path){if(!o.test(l.path))throw new TypeError(`option path is invalid: ${l.path}`);c+="; Path="+l.path}if(l.expires){if(!function(e){return"[object Date]"===i.call(e)}(l.expires)||!Number.isFinite(l.expires.valueOf()))throw new TypeError(`option expires is invalid: ${l.expires}`);c+="; Expires="+l.expires.toUTCString()}if(l.httpOnly&&(c+="; HttpOnly"),l.secure&&(c+="; Secure"),l.partitioned&&(c+="; Partitioned"),l.priority)switch("string"==typeof l.priority?l.priority.toLowerCase():void 0){case"low":c+="; Priority=Low";break;case"medium":c+="; Priority=Medium";break;case"high":c+="; Priority=High";break;default:throw new TypeError(`option priority is invalid: ${l.priority}`)}if(l.sameSite)switch("string"==typeof l.sameSite?l.sameSite.toLowerCase():l.sameSite){case!0:case"strict":c+="; SameSite=Strict";break;case"lax":c+="; SameSite=Lax";break;case"none":c+="; SameSite=None";break;default:throw new TypeError(`option sameSite is invalid: ${l.sameSite}`)}return c};const n=/^[\u0021-\u003A\u003C\u003E-\u007E]+$/,r=/^[\u0021-\u003A\u003C-\u007E]*$/,a=/^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i,o=/^[\u0020-\u003A\u003D-\u007E]*$/,i=Object.prototype.toString,l=(()=>{const e=function(){};return e.prototype=Object.create(null),e})();function s(e,t,n){do{const n=e.charCodeAt(t);if(32!==n&&9!==n)return t}while(++t<n);return n}function u(e,t,n){for(;t>n;){const n=e.charCodeAt(--t);if(32!==n&&9!==n)return t+1}return n}function c(e){if(-1===e.indexOf("%"))return e;try{return decodeURIComponent(e)}catch(t){return e}}},89:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},963:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},96:(e,t,n)=>{var r=n(817),a=n(471),o=n(834);function i(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var l=Symbol.for("react.element"),s=Symbol.for("react.transitional.element"),u=Symbol.for("react.portal"),c=Symbol.for("react.fragment"),d=Symbol.for("react.strict_mode"),f=Symbol.for("react.profiler"),h=Symbol.for("react.provider"),p=Symbol.for("react.consumer"),m=Symbol.for("react.context"),y=Symbol.for("react.forward_ref"),v=Symbol.for("react.suspense"),g=Symbol.for("react.suspense_list"),b=Symbol.for("react.memo"),w=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var S=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var E=Symbol.for("react.memo_cache_sentinel"),k=Symbol.iterator;function x(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=k&&e[k]||e["@@iterator"])?e:null}var R=Symbol.for("react.client.reference");function C(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===R?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case c:return"Fragment";case u:return"Portal";case f:return"Profiler";case d:return"StrictMode";case v:return"Suspense";case g:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case m:return(e.displayName||"Context")+".Provider";case p:return(e._context.displayName||"Context")+".Consumer";case y:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case b:return null!==(t=e.displayName||null)?t:C(e.type)||"Memo";case w:t=e._payload,e=e._init;try{return C(e(t))}catch(e){}}return null}var P,L,A=a.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,T=Object.assign;function _(e){if(void 0===P)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);P=t&&t[1]||"",L=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+P+e+L}var O=!1;function D(e,t){if(!e||O)return"";O=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var a=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");a&&a.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var o=r.DetermineComponentFrameRoot(),i=o[0],l=o[1];if(i&&l){var s=i.split("\n"),u=l.split("\n");for(a=r=0;r<s.length&&!s[r].includes("DetermineComponentFrameRoot");)r++;for(;a<u.length&&!u[a].includes("DetermineComponentFrameRoot");)a++;if(r===s.length||a===u.length)for(r=s.length-1,a=u.length-1;1<=r&&0<=a&&s[r]!==u[a];)a--;for(;1<=r&&0<=a;r--,a--)if(s[r]!==u[a]){if(1!==r||1!==a)do{if(r--,0>--a||s[r]!==u[a]){var c="\n"+s[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=a);break}}}finally{O=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?_(n):""}function N(e){switch(e.tag){case 26:case 27:case 5:return _(e.type);case 16:return _("Lazy");case 13:return _("Suspense");case 19:return _("SuspenseList");case 0:case 15:return D(e.type,!1);case 11:return D(e.type.render,!1);case 1:return D(e.type,!0);default:return""}}function M(e){try{var t="";do{t+=N(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function z(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function $(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function F(e){if(z(e)!==e)throw Error(i(188))}function j(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=j(e)))return t;e=e.sibling}return null}var I=Array.isArray,U=o.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,H={pending:!1,data:null,method:null,action:null},B=[],q=-1;function Y(e){return{current:e}}function V(e){0>q||(e.current=B[q],B[q]=null,q--)}function W(e,t){q++,B[q]=e.current,e.current=t}var J=Y(null),Q=Y(null),K=Y(null),G=Y(null);function X(e,t){switch(W(K,t),W(Q,e),W(J,null),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)&&(t=t.namespaceURI)?Qc(t):0;break;default:if(t=(e=8===e?t.parentNode:t).tagName,e=e.namespaceURI)t=Kc(e=Qc(e),t);else switch(t){case"svg":t=1;break;case"math":t=2;break;default:t=0}}V(J),W(J,t)}function Z(){V(J),V(Q),V(K)}function ee(e){null!==e.memoizedState&&W(G,e);var t=J.current,n=Kc(t,e.type);t!==n&&(W(Q,e),W(J,n))}function te(e){Q.current===e&&(V(J),V(Q)),G.current===e&&(V(G),Md._currentValue=H)}var ne=Object.prototype.hasOwnProperty,re=r.unstable_scheduleCallback,ae=r.unstable_cancelCallback,oe=r.unstable_shouldYield,ie=r.unstable_requestPaint,le=r.unstable_now,se=r.unstable_getCurrentPriorityLevel,ue=r.unstable_ImmediatePriority,ce=r.unstable_UserBlockingPriority,de=r.unstable_NormalPriority,fe=r.unstable_LowPriority,he=r.unstable_IdlePriority,pe=r.log,me=r.unstable_setDisableYieldValue,ye=null,ve=null;function ge(e){if("function"==typeof pe&&me(e),ve&&"function"==typeof ve.setStrictMode)try{ve.setStrictMode(ye,e)}catch(e){}}var be=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(we(e)/Se|0)|0},we=Math.log,Se=Math.LN2,Ee=128,ke=4194304;function xe(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194176&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function Re(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,i=e.warmLanes;e=0!==e.finishedLanes;var l=134217727&n;return 0!==l?0!=(n=l&~a)?r=xe(n):0!=(o&=l)?r=xe(o):e||0!=(i=l&~i)&&(r=xe(i)):0!=(l=n&~a)?r=xe(l):0!==o?r=xe(o):e||0!=(i=n&~i)&&(r=xe(i)),0===r?0:0===t||t===r||t&a||!((a=r&-r)>=(i=t&-t)||32===a&&4194176&i)?r:t}function Ce(e,t){return!(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function Pe(e,t){switch(e){case 1:case 2:case 4:case 8:return t+250;case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function Le(){var e=Ee;return!(4194176&(Ee<<=1))&&(Ee=128),e}function Ae(){var e=ke;return!(62914560&(ke<<=1))&&(ke=4194304),e}function Te(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function _e(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function Oe(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-be(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194218&n}function De(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-be(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}function Ne(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function Me(){var e=U.p;return 0!==e?e:void 0===(e=window.event)?32:Jd(e.type)}var ze=Math.random().toString(36).slice(2),$e="__reactFiber$"+ze,Fe="__reactProps$"+ze,je="__reactContainer$"+ze,Ie="__reactEvents$"+ze,Ue="__reactListeners$"+ze,He="__reactHandles$"+ze,Be="__reactResources$"+ze,qe="__reactMarker$"+ze;function Ye(e){delete e[$e],delete e[Fe],delete e[Ie],delete e[Ue],delete e[He]}function Ve(e){var t=e[$e];if(t)return t;for(var n=e.parentNode;n;){if(t=n[je]||n[$e]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ld(e);null!==e;){if(n=e[$e])return n;e=ld(e)}return t}n=(e=n).parentNode}return null}function We(e){if(e=e[$e]||e[je]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function Je(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(i(33))}function Qe(e){var t=e[Be];return t||(t=e[Be]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function Ke(e){e[qe]=!0}var Ge=new Set,Xe={};function Ze(e,t){et(e,t),et(e+"Capture",t)}function et(e,t){for(Xe[e]=t,e=0;e<t.length;e++)Ge.add(t[e])}var tt=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),nt=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),rt={},at={};function ot(e,t,n){if(a=t,ne.call(at,a)||!ne.call(rt,a)&&(nt.test(a)?at[a]=!0:(rt[a]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var a}function it(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function lt(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function st(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function ut(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ct(e){e._valueTracker||(e._valueTracker=function(e){var t=ut(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function dt(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ut(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function ft(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var ht=/[\n"\\]/g;function pt(e){return e.replace(ht,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function mt(e,t,n,r,a,o,i,l){e.name="",null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.type=i:e.removeAttribute("type"),null!=t?"number"===i?(0===t&&""===e.value||e.value!=t)&&(e.value=""+st(t)):e.value!==""+st(t)&&(e.value=""+st(t)):"submit"!==i&&"reset"!==i||e.removeAttribute("value"),null!=t?vt(e,i,st(t)):null!=n?vt(e,i,st(n)):null!=r&&e.removeAttribute("value"),null==a&&null!=o&&(e.defaultChecked=!!o),null!=a&&(e.checked=a&&"function"!=typeof a&&"symbol"!=typeof a),null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l?e.name=""+st(l):e.removeAttribute("name")}function yt(e,t,n,r,a,o,i,l){if(null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o&&(e.type=o),null!=t||null!=n){if(("submit"===o||"reset"===o)&&null==t)return;n=null!=n?""+st(n):"",t=null!=t?""+st(t):n,l||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:a)&&"symbol"!=typeof r&&!!r,e.checked=l?e.checked:!!r,e.defaultChecked=!!r,null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i&&(e.name=i)}function vt(e,t,n){"number"===t&&ft(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function gt(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+st(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function bt(e,t,n){null==t||((t=""+st(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+st(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function wt(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(i(92));if(I(r)){if(1<r.length)throw Error(i(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=st(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function St(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var Et=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function kt(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||Et.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function xt(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(i(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var a in t)r=t[a],t.hasOwnProperty(a)&&n[a]!==r&&kt(e,a,r)}else for(var o in t)t.hasOwnProperty(o)&&kt(e,o,t[o])}function Rt(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Ct=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),Pt=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Lt(e){return Pt.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var At=null;function Tt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var _t=null,Ot=null;function Dt(e){var t=We(e);if(t&&(e=t.stateNode)){var n=e[Fe]||null;e:switch(e=t.stateNode,t.type){case"input":if(mt(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+pt(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=r[Fe]||null;if(!a)throw Error(i(90));mt(r,a.value,a.defaultValue,a.defaultValue,a.checked,a.defaultChecked,a.type,a.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&dt(r)}break e;case"textarea":bt(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&gt(e,!!n.multiple,t,!1)}}}var Nt=!1;function Mt(e,t,n){if(Nt)return e(t,n);Nt=!0;try{return e(t)}finally{if(Nt=!1,(null!==_t||null!==Ot)&&($u(),_t&&(t=_t,e=Ot,Ot=_t=null,Dt(t),e)))for(t=0;t<e.length;t++)Dt(e[t])}}function zt(e,t){var n=e.stateNode;if(null===n)return null;var r=n[Fe]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var $t=!1;if(tt)try{var Ft={};Object.defineProperty(Ft,"passive",{get:function(){$t=!0}}),window.addEventListener("test",Ft,Ft),window.removeEventListener("test",Ft,Ft)}catch(e){$t=!1}var jt=null,It=null,Ut=null;function Ht(){if(Ut)return Ut;var e,t,n=It,r=n.length,a="value"in jt?jt.value:jt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return Ut=a.slice(e,1<t?1-t:void 0)}function Bt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function qt(){return!0}function Yt(){return!1}function Vt(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?qt:Yt,this.isPropagationStopped=Yt,this}return T(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=qt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=qt)},persist:function(){},isPersistent:qt}),t}var Wt,Jt,Qt,Kt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Gt=Vt(Kt),Xt=T({},Kt,{view:0,detail:0}),Zt=Vt(Xt),en=T({},Xt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:fn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Qt&&(Qt&&"mousemove"===e.type?(Wt=e.screenX-Qt.screenX,Jt=e.screenY-Qt.screenY):Jt=Wt=0,Qt=e),Wt)},movementY:function(e){return"movementY"in e?e.movementY:Jt}}),tn=Vt(en),nn=Vt(T({},en,{dataTransfer:0})),rn=Vt(T({},Xt,{relatedTarget:0})),an=Vt(T({},Kt,{animationName:0,elapsedTime:0,pseudoElement:0})),on=Vt(T({},Kt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),ln=Vt(T({},Kt,{data:0})),sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},un={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function dn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=cn[e])&&!!t[e]}function fn(){return dn}var hn=Vt(T({},Xt,{key:function(e){if(e.key){var t=sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Bt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?un[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:fn,charCode:function(e){return"keypress"===e.type?Bt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Bt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),pn=Vt(T({},en,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),mn=Vt(T({},Xt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:fn})),yn=Vt(T({},Kt,{propertyName:0,elapsedTime:0,pseudoElement:0})),vn=Vt(T({},en,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),gn=Vt(T({},Kt,{newState:0,oldState:0})),bn=[9,13,27,32],wn=tt&&"CompositionEvent"in window,Sn=null;tt&&"documentMode"in document&&(Sn=document.documentMode);var En=tt&&"TextEvent"in window&&!Sn,kn=tt&&(!wn||Sn&&8<Sn&&11>=Sn),xn=String.fromCharCode(32),Rn=!1;function Cn(e,t){switch(e){case"keyup":return-1!==bn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Pn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ln=!1,An={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Tn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!An[e.type]:"textarea"===t}function _n(e,t,n,r){_t?Ot?Ot.push(r):Ot=[r]:_t=r,0<(t=Mc(t,"onChange")).length&&(n=new Gt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var On=null,Dn=null;function Nn(e){Pc(e,0)}function Mn(e){if(dt(Je(e)))return e}function zn(e,t){if("change"===e)return t}var $n=!1;if(tt){var Fn;if(tt){var jn="oninput"in document;if(!jn){var In=document.createElement("div");In.setAttribute("oninput","return;"),jn="function"==typeof In.oninput}Fn=jn}else Fn=!1;$n=Fn&&(!document.documentMode||9<document.documentMode)}function Un(){On&&(On.detachEvent("onpropertychange",Hn),Dn=On=null)}function Hn(e){if("value"===e.propertyName&&Mn(Dn)){var t=[];_n(t,Dn,e,Tt(e)),Mt(Nn,t)}}function Bn(e,t,n){"focusin"===e?(Un(),Dn=n,(On=t).attachEvent("onpropertychange",Hn)):"focusout"===e&&Un()}function qn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Mn(Dn)}function Yn(e,t){if("click"===e)return Mn(t)}function Vn(e,t){if("input"===e||"change"===e)return Mn(t)}var Wn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Jn(e,t){if(Wn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!ne.call(t,a)||!Wn(e[a],t[a]))return!1}return!0}function Qn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Kn(e,t){var n,r=Qn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Qn(r)}}function Gn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Gn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function Xn(e){for(var t=ft((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=ft((e=t.contentWindow).document)}return t}function Zn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function er(e,t){var n=Xn(t);t=e.focusedElem;var r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&Gn(t.ownerDocument.documentElement,t)){if(null!==r&&Zn(t))if(e=r.start,void 0===(n=r.end)&&(n=e),"selectionStart"in t)t.selectionStart=e,t.selectionEnd=Math.min(n,t.value.length);else if((n=(e=t.ownerDocument||document)&&e.defaultView||window).getSelection){n=n.getSelection();var a=t.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!n.extend&&o>r&&(a=r,r=o,o=a),a=Kn(t,o);var i=Kn(t,r);a&&i&&(1!==n.rangeCount||n.anchorNode!==a.node||n.anchorOffset!==a.offset||n.focusNode!==i.node||n.focusOffset!==i.offset)&&((e=e.createRange()).setStart(a.node,a.offset),n.removeAllRanges(),o>r?(n.addRange(e),n.extend(i.node,i.offset)):(e.setEnd(i.node,i.offset),n.addRange(e)))}for(e=[],n=t;n=n.parentNode;)1===n.nodeType&&e.push({element:n,left:n.scrollLeft,top:n.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<e.length;t++)(n=e[t]).element.scrollLeft=n.left,n.element.scrollTop=n.top}}var tr=tt&&"documentMode"in document&&11>=document.documentMode,nr=null,rr=null,ar=null,or=!1;function ir(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;or||null==nr||nr!==ft(r)||(r="selectionStart"in(r=nr)&&Zn(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},ar&&Jn(ar,r)||(ar=r,0<(r=Mc(rr,"onSelect")).length&&(t=new Gt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=nr)))}function lr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var sr={animationend:lr("Animation","AnimationEnd"),animationiteration:lr("Animation","AnimationIteration"),animationstart:lr("Animation","AnimationStart"),transitionrun:lr("Transition","TransitionRun"),transitionstart:lr("Transition","TransitionStart"),transitioncancel:lr("Transition","TransitionCancel"),transitionend:lr("Transition","TransitionEnd")},ur={},cr={};function dr(e){if(ur[e])return ur[e];if(!sr[e])return e;var t,n=sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in cr)return ur[e]=n[t];return e}tt&&(cr=document.createElement("div").style,"AnimationEvent"in window||(delete sr.animationend.animation,delete sr.animationiteration.animation,delete sr.animationstart.animation),"TransitionEvent"in window||delete sr.transitionend.transition);var fr=dr("animationend"),hr=dr("animationiteration"),pr=dr("animationstart"),mr=dr("transitionrun"),yr=dr("transitionstart"),vr=dr("transitioncancel"),gr=dr("transitionend"),br=new Map,wr="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll scrollEnd toggle touchMove waiting wheel".split(" ");function Sr(e,t){br.set(e,t),Ze(t,[e])}var Er=[],kr=0,xr=0;function Rr(){for(var e=kr,t=xr=kr=0;t<e;){var n=Er[t];Er[t++]=null;var r=Er[t];Er[t++]=null;var a=Er[t];Er[t++]=null;var o=Er[t];if(Er[t++]=null,null!==r&&null!==a){var i=r.pending;null===i?a.next=a:(a.next=i.next,i.next=a),r.pending=a}0!==o&&Ar(n,a,o)}}function Cr(e,t,n,r){Er[kr++]=e,Er[kr++]=t,Er[kr++]=n,Er[kr++]=r,xr|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function Pr(e,t,n,r){return Cr(e,t,n,r),Tr(e)}function Lr(e,t){return Cr(e,null,null,t),Tr(e)}function Ar(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var a=!1,o=e.return;null!==o;)o.childLanes|=n,null!==(r=o.alternate)&&(r.childLanes|=n),22===o.tag&&(null===(e=o.stateNode)||1&e._visibility||(a=!0)),e=o,o=o.return;a&&null!==t&&3===e.tag&&(o=e.stateNode,a=31-be(n),null===(e=(o=o.hiddenUpdates)[a])?o[a]=[t]:e.push(t),t.lane=536870912|n)}function Tr(e){if(50<Pu)throw Pu=0,Lu=null,Error(i(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var _r={},Or=new WeakMap;function Dr(e,t){if("object"==typeof e&&null!==e){var n=Or.get(e);return void 0!==n?n:(t={value:e,source:t,stack:M(t)},Or.set(e,t),t)}return{value:e,source:t,stack:M(t)}}var Nr=[],Mr=0,zr=null,$r=0,Fr=[],jr=0,Ir=null,Ur=1,Hr="";function Br(e,t){Nr[Mr++]=$r,Nr[Mr++]=zr,zr=e,$r=t}function qr(e,t,n){Fr[jr++]=Ur,Fr[jr++]=Hr,Fr[jr++]=Ir,Ir=e;var r=Ur;e=Hr;var a=32-be(r)-1;r&=~(1<<a),n+=1;var o=32-be(t)+a;if(30<o){var i=a-a%5;o=(r&(1<<i)-1).toString(32),r>>=i,a-=i,Ur=1<<32-be(t)+a|n<<a|r,Hr=o+e}else Ur=1<<o|n<<a|r,Hr=e}function Yr(e){null!==e.return&&(Br(e,1),qr(e,1,0))}function Vr(e){for(;e===zr;)zr=Nr[--Mr],Nr[Mr]=null,$r=Nr[--Mr],Nr[Mr]=null;for(;e===Ir;)Ir=Fr[--jr],Fr[jr]=null,Hr=Fr[--jr],Fr[jr]=null,Ur=Fr[--jr],Fr[jr]=null}var Wr=null,Jr=null,Qr=!1,Kr=null,Gr=!1,Xr=Error(i(519));function Zr(e){throw aa(Dr(Error(i(418,"")),e)),Xr}function ea(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[$e]=e,t[Fe]=r,n){case"dialog":Lc("cancel",t),Lc("close",t);break;case"iframe":case"object":case"embed":Lc("load",t);break;case"video":case"audio":for(n=0;n<Rc.length;n++)Lc(Rc[n],t);break;case"source":Lc("error",t);break;case"img":case"image":case"link":Lc("error",t),Lc("load",t);break;case"details":Lc("toggle",t);break;case"input":Lc("invalid",t),yt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),ct(t);break;case"select":Lc("invalid",t);break;case"textarea":Lc("invalid",t),wt(t,r.value,r.defaultValue,r.children),ct(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Uc(t.textContent,n)?(null!=r.popover&&(Lc("beforetoggle",t),Lc("toggle",t)),null!=r.onScroll&&Lc("scroll",t),null!=r.onScrollEnd&&Lc("scrollend",t),null!=r.onClick&&(t.onclick=Hc),t=!0):t=!1,t||Zr(e)}function ta(e){for(Wr=e.return;Wr;)switch(Wr.tag){case 3:case 27:return void(Gr=!0);case 5:case 13:return void(Gr=!1);default:Wr=Wr.return}}function na(e){if(e!==Wr)return!1;if(!Qr)return ta(e),Qr=!0,!1;var t,n=!1;if((t=3!==e.tag&&27!==e.tag)&&((t=5===e.tag)&&(t=!("form"!==(t=e.type)&&"button"!==t)||Gc(e.type,e.memoizedProps)),t=!t),t&&(n=!0),n&&Jr&&Zr(e),ta(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){Jr=id(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}Jr=null}}else Jr=Wr?id(e.stateNode.nextSibling):null;return!0}function ra(){Jr=Wr=null,Qr=!1}function aa(e){null===Kr?Kr=[e]:Kr.push(e)}var oa=Error(i(460)),ia=Error(i(474)),la={then:function(){}};function sa(e){return"fulfilled"===(e=e.status)||"rejected"===e}function ua(){}function ca(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(ua,ua),t=n),t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===oa)throw Error(i(483));throw e;default:if("string"==typeof t.status)t.then(ua,ua);else{if(null!==(e=eu)&&100<e.shellSuspendCounter)throw Error(i(482));(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===oa)throw Error(i(483));throw e}throw da=t,oa}}var da=null;function fa(){if(null===da)throw Error(i(459));var e=da;return da=null,e}var ha=null,pa=0;function ma(e){var t=pa;return pa+=1,null===ha&&(ha=[]),ca(ha,e,t)}function ya(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function va(e,t){if(t.$$typeof===l)throw Error(i(525));throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function ga(e){return(0,e._init)(e._payload)}function ba(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function a(e,t){return(e=zs(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=33554434,n):r:(t.flags|=33554434,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=33554434),t}function d(e,t,n,r){return null===t||6!==t.tag?((t=Us(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n,r){var o=n.type;return o===c?p(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===w&&ga(o)===t.type)?(ya(t=a(t,n.props),n),t.return=e,t):(ya(t=Fs(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function h(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Hs(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function p(e,t,n,r,o){return null===t||7!==t.tag?((t=js(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function y(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=Us(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case s:return ya(n=Fs(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case u:return(t=Hs(t,e.mode,n)).return=e,t;case w:return y(e,t=(0,t._init)(t._payload),n)}if(I(t)||x(t))return(t=js(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return y(e,ma(t),n);if(t.$$typeof===m)return y(e,Rl(e,t),n);va(e,t)}return null}function v(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==a?null:d(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case s:return n.key===a?f(e,t,n,r):null;case u:return n.key===a?h(e,t,n,r):null;case w:return v(e,t,n=(a=n._init)(n._payload),r)}if(I(n)||x(n))return null!==a?null:p(e,t,n,r,null);if("function"==typeof n.then)return v(e,t,ma(n),r);if(n.$$typeof===m)return v(e,t,Rl(e,n),r);va(e,n)}return null}function g(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return d(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case s:return f(t,e=e.get(null===r.key?n:r.key)||null,r,a);case u:return h(t,e=e.get(null===r.key?n:r.key)||null,r,a);case w:return g(e,t,n,r=(0,r._init)(r._payload),a)}if(I(r)||x(r))return p(t,e=e.get(n)||null,r,a,null);if("function"==typeof r.then)return g(e,t,n,ma(r),a);if(r.$$typeof===m)return g(e,t,n,Rl(t,r),a);va(t,r)}return null}function b(d,f,h,p){if("object"==typeof h&&null!==h&&h.type===c&&null===h.key&&(h=h.props.children),"object"==typeof h&&null!==h){switch(h.$$typeof){case s:e:{for(var S=h.key;null!==f;){if(f.key===S){if((S=h.type)===c){if(7===f.tag){n(d,f.sibling),(p=a(f,h.props.children)).return=d,d=p;break e}}else if(f.elementType===S||"object"==typeof S&&null!==S&&S.$$typeof===w&&ga(S)===f.type){n(d,f.sibling),ya(p=a(f,h.props),h),p.return=d,d=p;break e}n(d,f);break}t(d,f),f=f.sibling}h.type===c?((p=js(h.props.children,d.mode,p,h.key)).return=d,d=p):(ya(p=Fs(h.type,h.key,h.props,null,d.mode,p),h),p.return=d,d=p)}return l(d);case u:e:{for(S=h.key;null!==f;){if(f.key===S){if(4===f.tag&&f.stateNode.containerInfo===h.containerInfo&&f.stateNode.implementation===h.implementation){n(d,f.sibling),(p=a(f,h.children||[])).return=d,d=p;break e}n(d,f);break}t(d,f),f=f.sibling}(p=Hs(h,d.mode,p)).return=d,d=p}return l(d);case w:return b(d,f,h=(S=h._init)(h._payload),p)}if(I(h))return function(a,i,l,s){for(var u=null,c=null,d=i,f=i=0,h=null;null!==d&&f<l.length;f++){d.index>f?(h=d,d=null):h=d.sibling;var p=v(a,d,l[f],s);if(null===p){null===d&&(d=h);break}e&&d&&null===p.alternate&&t(a,d),i=o(p,i,f),null===c?u=p:c.sibling=p,c=p,d=h}if(f===l.length)return n(a,d),Qr&&Br(a,f),u;if(null===d){for(;f<l.length;f++)null!==(d=y(a,l[f],s))&&(i=o(d,i,f),null===c?u=d:c.sibling=d,c=d);return Qr&&Br(a,f),u}for(d=r(d);f<l.length;f++)null!==(h=g(d,a,f,l[f],s))&&(e&&null!==h.alternate&&d.delete(null===h.key?f:h.key),i=o(h,i,f),null===c?u=h:c.sibling=h,c=h);return e&&d.forEach((function(e){return t(a,e)})),Qr&&Br(a,f),u}(d,f,h,p);if(x(h)){if("function"!=typeof(S=x(h)))throw Error(i(150));return function(a,l,s,u){if(null==s)throw Error(i(151));for(var c=null,d=null,f=l,h=l=0,p=null,m=s.next();null!==f&&!m.done;h++,m=s.next()){f.index>h?(p=f,f=null):p=f.sibling;var b=v(a,f,m.value,u);if(null===b){null===f&&(f=p);break}e&&f&&null===b.alternate&&t(a,f),l=o(b,l,h),null===d?c=b:d.sibling=b,d=b,f=p}if(m.done)return n(a,f),Qr&&Br(a,h),c;if(null===f){for(;!m.done;h++,m=s.next())null!==(m=y(a,m.value,u))&&(l=o(m,l,h),null===d?c=m:d.sibling=m,d=m);return Qr&&Br(a,h),c}for(f=r(f);!m.done;h++,m=s.next())null!==(m=g(f,a,h,m.value,u))&&(e&&null!==m.alternate&&f.delete(null===m.key?h:m.key),l=o(m,l,h),null===d?c=m:d.sibling=m,d=m);return e&&f.forEach((function(e){return t(a,e)})),Qr&&Br(a,h),c}(d,f,h=S.call(h),p)}if("function"==typeof h.then)return b(d,f,ma(h),p);if(h.$$typeof===m)return b(d,f,Rl(d,h),p);va(d,h)}return"string"==typeof h&&""!==h||"number"==typeof h||"bigint"==typeof h?(h=""+h,null!==f&&6===f.tag?(n(d,f.sibling),(p=a(f,h)).return=d,d=p):(n(d,f),(p=Us(h,d.mode,p)).return=d,d=p),l(d)):n(d,f)}return function(e,t,n,r){try{pa=0;var a=b(e,t,n,r);return ha=null,a}catch(t){if(t===oa)throw t;var o=Ns(29,t,null,e.mode);return o.lanes=r,o.return=e,o}}}var wa=ba(!0),Sa=ba(!1),Ea=Y(null),ka=Y(0);function xa(e,t){W(ka,e=su),W(Ea,t),su=e|t.baseLanes}function Ra(){W(ka,su),W(Ea,Ea.current)}function Ca(){su=ka.current,V(Ea),V(ka)}var Pa=Y(null),La=null;function Aa(e){var t=e.alternate;W(Da,1&Da.current),W(Pa,e),null===La&&(null===t||null!==Ea.current||null!==t.memoizedState)&&(La=e)}function Ta(e){if(22===e.tag){if(W(Da,Da.current),W(Pa,e),null===La){var t=e.alternate;null!==t&&null!==t.memoizedState&&(La=e)}}else _a()}function _a(){W(Da,Da.current),W(Pa,Pa.current)}function Oa(e){V(Pa),La===e&&(La=null),V(Da)}var Da=Y(0);function Na(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ma="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},za=r.unstable_scheduleCallback,$a=r.unstable_NormalPriority,Fa={$$typeof:m,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function ja(){return{controller:new Ma,data:new Map,refCount:0}}function Ia(e){e.refCount--,0===e.refCount&&za($a,(function(){e.controller.abort()}))}var Ua=null,Ha=0,Ba=0,qa=null;function Ya(){if(0==--Ha&&null!==Ua){null!==qa&&(qa.status="fulfilled");var e=Ua;Ua=null,Ba=0,qa=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var Va=A.S;A.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===Ua){var n=Ua=[];Ha=0,Ba=wc(),qa={status:"pending",value:void 0,then:function(e){n.push(e)}}}Ha++,t.then(Ya,Ya)}(0,t),null!==Va&&Va(e,t)};var Wa=Y(null);function Ja(){var e=Wa.current;return null!==e?e:eu.pooledCache}function Qa(e,t){W(Wa,null===t?Wa.current:t.pool)}function Ka(){var e=Ja();return null===e?null:{parent:Fa._currentValue,pool:e}}var Ga=0,Xa=null,Za=null,eo=null,to=!1,no=!1,ro=!1,ao=0,oo=0,io=null,lo=0;function so(){throw Error(i(321))}function uo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Wn(e[n],t[n]))return!1;return!0}function co(e,t,n,r,a,o){return Ga=o,Xa=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,A.H=null===e||null===e.memoizedState?Ri:Ci,ro=!1,o=n(r,a),ro=!1,no&&(o=ho(t,n,r,a)),fo(e),o}function fo(e){A.H=xi;var t=null!==Za&&null!==Za.next;if(Ga=0,eo=Za=Xa=null,to=!1,oo=0,io=null,t)throw Error(i(300));null===e||Bi||null!==(e=e.dependencies)&&El(e)&&(Bi=!0)}function ho(e,t,n,r){Xa=e;var a=0;do{if(no&&(io=null),oo=0,no=!1,25<=a)throw Error(i(301));if(a+=1,eo=Za=null,null!=e.updateQueue){var o=e.updateQueue;o.lastEffect=null,o.events=null,o.stores=null,null!=o.memoCache&&(o.memoCache.index=0)}A.H=Pi,o=t(n,r)}while(no);return o}function po(){var e=A.H,t=e.useState()[0];return t="function"==typeof t.then?wo(t):t,e=e.useState()[0],(null!==Za?Za.memoizedState:null)!==e&&(Xa.flags|=1024),t}function mo(){var e=0!==ao;return ao=0,e}function yo(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function vo(e){if(to){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}to=!1}Ga=0,eo=Za=Xa=null,no=!1,oo=ao=0,io=null}function go(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===eo?Xa.memoizedState=eo=e:eo=eo.next=e,eo}function bo(){if(null===Za){var e=Xa.alternate;e=null!==e?e.memoizedState:null}else e=Za.next;var t=null===eo?Xa.memoizedState:eo.next;if(null!==t)eo=t,Za=e;else{if(null===e){if(null===Xa.alternate)throw Error(i(467));throw Error(i(310))}e={memoizedState:(Za=e).memoizedState,baseState:Za.baseState,baseQueue:Za.baseQueue,queue:Za.queue,next:null},null===eo?Xa.memoizedState=eo=e:eo=eo.next=e}return eo}function wo(e){var t=oo;return oo+=1,null===io&&(io=[]),e=ca(io,e,t),t=Xa,null===(null===eo?t.memoizedState:eo.next)&&(t=t.alternate,A.H=null===t||null===t.memoizedState?Ri:Ci),e}function So(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return wo(e);if(e.$$typeof===m)return xl(e)}throw Error(i(438,String(e)))}function Eo(e){var t=null,n=Xa.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=Xa.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},Xa.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=E;return t.index++,n}function ko(e,t){return"function"==typeof t?t(e):t}function xo(e){return Ro(bo(),Za,e)}function Ro(e,t,n){var r=e.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=n;var a=e.baseQueue,o=r.pending;if(null!==o){if(null!==a){var l=a.next;a.next=o.next,o.next=l}t.baseQueue=a=o,r.pending=null}if(o=e.baseState,null===a)e.memoizedState=o;else{var s=l=null,u=null,c=t=a.next,d=!1;do{var f=-536870913&c.lane;if(f!==c.lane?(nu&f)===f:(Ga&f)===f){var h=c.revertLane;if(0===h)null!==u&&(u=u.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),f===Ba&&(d=!0);else{if((Ga&h)===h){c=c.next,h===Ba&&(d=!0);continue}f={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(s=u=f,l=o):u=u.next=f,Xa.lanes|=h,cu|=h}f=c.action,ro&&n(o,f),o=c.hasEagerState?c.eagerState:n(o,f)}else h={lane:f,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(s=u=h,l=o):u=u.next=h,Xa.lanes|=f,cu|=f;c=c.next}while(null!==c&&c!==t);if(null===u?l=o:u.next=s,!Wn(o,e.memoizedState)&&(Bi=!0,d&&null!==(n=qa)))throw n;e.memoizedState=o,e.baseState=l,e.baseQueue=u,r.lastRenderedState=o}return null===a&&(r.lanes=0),[e.memoizedState,r.dispatch]}function Co(e){var t=bo(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,o=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{o=e(o,l.action),l=l.next}while(l!==a);Wn(o,t.memoizedState)||(Bi=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function Po(e,t,n){var r=Xa,a=bo(),o=Qr;if(o){if(void 0===n)throw Error(i(407));n=n()}else n=t();var l=!Wn((Za||a).memoizedState,n);if(l&&(a.memoizedState=n,Bi=!0),a=a.queue,Xo(To.bind(null,r,a,e),[e]),a.getSnapshot!==t||l||null!==eo&&1&eo.memoizedState.tag){if(r.flags|=2048,Wo(9,Ao.bind(null,r,a,n,t),{destroy:void 0},null),null===eu)throw Error(i(349));o||60&Ga||Lo(r,t,n)}return n}function Lo(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=Xa.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},Xa.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ao(e,t,n,r){t.value=n,t.getSnapshot=r,_o(t)&&Oo(e)}function To(e,t,n){return n((function(){_o(t)&&Oo(e)}))}function _o(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Wn(e,n)}catch(e){return!0}}function Oo(e){var t=Lr(e,2);null!==t&&_u(t,0,2)}function Do(e){var t=go();if("function"==typeof e){var n=e;if(e=n(),ro){ge(!0);try{n()}finally{ge(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:ko,lastRenderedState:e},t}function No(e,t,n,r){return e.baseState=n,Ro(e,Za,"function"==typeof r?r:ko)}function Mo(e,t,n,r,a){if(Si(e))throw Error(i(485));if(null!==(e=t.action)){var o={payload:a,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){o.listeners.push(e)}};null!==A.T?n(!0):o.isTransition=!1,r(o),null===(n=t.pending)?(o.next=t.pending=o,zo(t,o)):(o.next=n.next,t.pending=n.next=o)}}function zo(e,t){var n=t.action,r=t.payload,a=e.state;if(t.isTransition){var o=A.T,i={};A.T=i;try{var l=n(a,r),s=A.S;null!==s&&s(i,l),$o(e,t,l)}catch(n){jo(e,t,n)}finally{A.T=o}}else try{$o(e,t,o=n(a,r))}catch(n){jo(e,t,n)}}function $o(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then((function(n){Fo(e,t,n)}),(function(n){return jo(e,t,n)})):Fo(e,t,n)}function Fo(e,t,n){t.status="fulfilled",t.value=n,Io(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,zo(e,n)))}function jo(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,Io(t),t=t.next}while(t!==r)}e.action=null}function Io(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function Uo(e,t){return t}function Ho(e,t){if(Qr){var n=eu.formState;if(null!==n){e:{var r=Xa;if(Qr){if(Jr){t:{for(var a=Jr,o=Gr;8!==a.nodeType;){if(!o){a=null;break t}if(null===(a=id(a.nextSibling))){a=null;break t}}a="F!"===(o=a.data)||"F"===o?a:null}if(a){Jr=id(a.nextSibling),r="F!"===a.data;break e}}Zr(r)}r=!1}r&&(t=n[0])}}return(n=go()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Uo,lastRenderedState:t},n.queue=r,n=gi.bind(null,Xa,r),r.dispatch=n,r=Do(!1),o=wi.bind(null,Xa,!1,r.queue),a={state:t,dispatch:null,action:e,pending:null},(r=go()).queue=a,n=Mo.bind(null,Xa,a,o,n),a.dispatch=n,r.memoizedState=e,[t,n,!1]}function Bo(e){return qo(bo(),Za,e)}function qo(e,t,n){t=Ro(e,t,Uo)[0],e=xo(ko)[0],t="object"==typeof t&&null!==t&&"function"==typeof t.then?wo(t):t;var r=bo(),a=r.queue,o=a.dispatch;return n!==r.memoizedState&&(Xa.flags|=2048,Wo(9,Yo.bind(null,a,n),{destroy:void 0},null)),[t,o,e]}function Yo(e,t){e.action=t}function Vo(e){var t=bo(),n=Za;if(null!==n)return qo(t,n,e);bo(),t=t.memoizedState;var r=(n=bo()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function Wo(e,t,n,r){return e={tag:e,create:t,inst:n,deps:r,next:null},null===(t=Xa.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},Xa.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Jo(){return bo().memoizedState}function Qo(e,t,n,r){var a=go();Xa.flags|=e,a.memoizedState=Wo(1|t,n,{destroy:void 0},void 0===r?null:r)}function Ko(e,t,n,r){var a=bo();r=void 0===r?null:r;var o=a.memoizedState.inst;null!==Za&&null!==r&&uo(r,Za.memoizedState.deps)?a.memoizedState=Wo(t,n,o,r):(Xa.flags|=e,a.memoizedState=Wo(1|t,n,o,r))}function Go(e,t){Qo(8390656,8,e,t)}function Xo(e,t){Ko(2048,8,e,t)}function Zo(e,t){return Ko(4,2,e,t)}function ei(e,t){return Ko(4,4,e,t)}function ti(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function ni(e,t,n){n=null!=n?n.concat([e]):null,Ko(4,4,ti.bind(null,t,e),n)}function ri(){}function ai(e,t){var n=bo();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&uo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function oi(e,t){var n=bo();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&uo(t,r[1]))return r[0];if(r=e(),ro){ge(!0);try{e()}finally{ge(!1)}}return n.memoizedState=[r,t],r}function ii(e,t,n){return void 0===n||1073741824&Ga?e.memoizedState=t:(e.memoizedState=n,e=Tu(),Xa.lanes|=e,cu|=e,n)}function li(e,t,n,r){return Wn(n,t)?n:null!==Ea.current?(e=ii(e,n,r),Wn(e,t)||(Bi=!0),e):42&Ga?(e=Tu(),Xa.lanes|=e,cu|=e,t):(Bi=!0,e.memoizedState=n)}function si(e,t,n,r,a){var o=U.p;U.p=0!==o&&8>o?o:8;var i,l,s,u=A.T,c={};A.T=c,wi(e,!1,t,n);try{var d=a(),f=A.S;null!==f&&f(c,d),null!==d&&"object"==typeof d&&"function"==typeof d.then?bi(e,t,(i=r,l=[],s={status:"pending",value:null,reason:null,then:function(e){l.push(e)}},d.then((function(){s.status="fulfilled",s.value=i;for(var e=0;e<l.length;e++)(0,l[e])(i)}),(function(e){for(s.status="rejected",s.reason=e,e=0;e<l.length;e++)(0,l[e])(void 0)})),s),Au()):bi(e,t,r,Au())}catch(n){bi(e,t,{then:function(){},status:"rejected",reason:n},Au())}finally{U.p=o,A.T=u}}function ui(){}function ci(e,t,n,r){if(5!==e.tag)throw Error(i(476));var a=di(e).queue;si(e,a,t,H,null===n?ui:function(){return fi(e),n(r)})}function di(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:H,baseState:H,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:ko,lastRenderedState:H},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:ko,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function fi(e){bi(e,di(e).next.queue,{},Au())}function hi(){return xl(Md)}function pi(){return bo().memoizedState}function mi(){return bo().memoizedState}function yi(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=Au(),r=_l(t,e=Tl(n),n);return null!==r&&(_u(r,0,n),Ol(r,t,n)),t={cache:ja()},void(e.payload=t)}t=t.return}}function vi(e,t,n){var r=Au();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},Si(e)?Ei(t,n):null!==(n=Pr(e,t,n,r))&&(_u(n,0,r),ki(n,t,r))}function gi(e,t,n){bi(e,t,n,Au())}function bi(e,t,n,r){var a={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(Si(e))Ei(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=o(i,n);if(a.hasEagerState=!0,a.eagerState=l,Wn(l,i))return Cr(e,t,a,0),null===eu&&Rr(),!1}catch(e){}if(null!==(n=Pr(e,t,a,r)))return _u(n,0,r),ki(n,t,r),!0}return!1}function wi(e,t,n,r){if(r={lane:2,revertLane:wc(),action:r,hasEagerState:!1,eagerState:null,next:null},Si(e)){if(t)throw Error(i(479))}else null!==(t=Pr(e,n,r,2))&&_u(t,0,2)}function Si(e){var t=e.alternate;return e===Xa||null!==t&&t===Xa}function Ei(e,t){no=to=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function ki(e,t,n){if(4194176&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,De(e,n)}}var xi={readContext:xl,use:So,useCallback:so,useContext:so,useEffect:so,useImperativeHandle:so,useLayoutEffect:so,useInsertionEffect:so,useMemo:so,useReducer:so,useRef:so,useState:so,useDebugValue:so,useDeferredValue:so,useTransition:so,useSyncExternalStore:so,useId:so};xi.useCacheRefresh=so,xi.useMemoCache=so,xi.useHostTransitionStatus=so,xi.useFormState=so,xi.useActionState=so,xi.useOptimistic=so;var Ri={readContext:xl,use:So,useCallback:function(e,t){return go().memoizedState=[e,void 0===t?null:t],e},useContext:xl,useEffect:Go,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,Qo(4194308,4,ti.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Qo(4194308,4,e,t)},useInsertionEffect:function(e,t){Qo(4,2,e,t)},useMemo:function(e,t){var n=go();t=void 0===t?null:t;var r=e();if(ro){ge(!0);try{e()}finally{ge(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=go();if(void 0!==n){var a=n(t);if(ro){ge(!0);try{n(t)}finally{ge(!1)}}}else a=t;return r.memoizedState=r.baseState=a,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:a},r.queue=e,e=e.dispatch=vi.bind(null,Xa,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},go().memoizedState=e},useState:function(e){var t=(e=Do(e)).queue,n=gi.bind(null,Xa,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:ri,useDeferredValue:function(e,t){return ii(go(),e,t)},useTransition:function(){var e=Do(!1);return e=si.bind(null,Xa,e.queue,!0,!1),go().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=Xa,a=go();if(Qr){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===eu)throw Error(i(349));60&nu||Lo(r,t,n)}a.memoizedState=n;var o={value:n,getSnapshot:t};return a.queue=o,Go(To.bind(null,r,o,e),[e]),r.flags|=2048,Wo(9,Ao.bind(null,r,o,n,t),{destroy:void 0},null),n},useId:function(){var e=go(),t=eu.identifierPrefix;if(Qr){var n=Hr;t=":"+t+"R"+(n=(Ur&~(1<<32-be(Ur)-1)).toString(32)+n),0<(n=ao++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=lo++).toString(32)+":";return e.memoizedState=t},useCacheRefresh:function(){return go().memoizedState=yi.bind(null,Xa)}};Ri.useMemoCache=Eo,Ri.useHostTransitionStatus=hi,Ri.useFormState=Ho,Ri.useActionState=Ho,Ri.useOptimistic=function(e){var t=go();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=wi.bind(null,Xa,!0,n),n.dispatch=t,[e,t]};var Ci={readContext:xl,use:So,useCallback:ai,useContext:xl,useEffect:Xo,useImperativeHandle:ni,useInsertionEffect:Zo,useLayoutEffect:ei,useMemo:oi,useReducer:xo,useRef:Jo,useState:function(){return xo(ko)},useDebugValue:ri,useDeferredValue:function(e,t){return li(bo(),Za.memoizedState,e,t)},useTransition:function(){var e=xo(ko)[0],t=bo().memoizedState;return["boolean"==typeof e?e:wo(e),t]},useSyncExternalStore:Po,useId:pi};Ci.useCacheRefresh=mi,Ci.useMemoCache=Eo,Ci.useHostTransitionStatus=hi,Ci.useFormState=Bo,Ci.useActionState=Bo,Ci.useOptimistic=function(e,t){return No(bo(),0,e,t)};var Pi={readContext:xl,use:So,useCallback:ai,useContext:xl,useEffect:Xo,useImperativeHandle:ni,useInsertionEffect:Zo,useLayoutEffect:ei,useMemo:oi,useReducer:Co,useRef:Jo,useState:function(){return Co(ko)},useDebugValue:ri,useDeferredValue:function(e,t){var n=bo();return null===Za?ii(n,e,t):li(n,Za.memoizedState,e,t)},useTransition:function(){var e=Co(ko)[0],t=bo().memoizedState;return["boolean"==typeof e?e:wo(e),t]},useSyncExternalStore:Po,useId:pi};function Li(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:T({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}Pi.useCacheRefresh=mi,Pi.useMemoCache=Eo,Pi.useHostTransitionStatus=hi,Pi.useFormState=Vo,Pi.useActionState=Vo,Pi.useOptimistic=function(e,t){var n=bo();return null!==Za?No(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])};var Ai={isMounted:function(e){return!!(e=e._reactInternals)&&z(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Au(),a=Tl(r);a.payload=t,null!=n&&(a.callback=n),null!==(t=_l(e,a,r))&&(_u(t,0,r),Ol(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Au(),a=Tl(r);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=_l(e,a,r))&&(_u(t,0,r),Ol(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Au(),r=Tl(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=_l(e,r,n))&&(_u(t,0,n),Ol(t,e,n))}};function Ti(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&Jn(n,r)&&Jn(a,o))}function _i(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Ai.enqueueReplaceState(t,t.state,null)}function Oi(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var a in n===t&&(n=T({},n)),e)void 0===n[a]&&(n[a]=e[a]);return n}var Di="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function Ni(e){Di(e)}function Mi(e){console.error(e)}function zi(e){Di(e)}function $i(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function Fi(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function ji(e,t,n){return(n=Tl(n)).tag=3,n.payload={element:null},n.callback=function(){$i(e,t)},n}function Ii(e){return(e=Tl(e)).tag=3,e}function Ui(e,t,n,r){var a=n.type.getDerivedStateFromError;if("function"==typeof a){var o=r.value;e.payload=function(){return a(o)},e.callback=function(){Fi(t,n,r)}}var i=n.stateNode;null!==i&&"function"==typeof i.componentDidCatch&&(e.callback=function(){Fi(t,n,r),"function"!=typeof a&&(null===Su?Su=new Set([this]):Su.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var Hi=Error(i(461)),Bi=!1;function qi(e,t,n,r){t.child=null===e?Sa(t,null,n,r):wa(t,e.child,n,r)}function Yi(e,t,n,r,a){n=n.render;var o=t.ref;if("ref"in r){var i={};for(var l in r)"ref"!==l&&(i[l]=r[l])}else i=r;return kl(t),r=co(e,t,n,i,o,a),l=mo(),null===e||Bi?(Qr&&l&&Yr(t),t.flags|=1,qi(e,t,r,a),t.child):(yo(e,t,a),dl(e,t,a))}function Vi(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||Ms(o)||void 0!==o.defaultProps||null!==n.compare?((e=Fs(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Wi(e,t,o,r,a))}if(o=e.child,!fl(e,a)){var i=o.memoizedProps;if((n=null!==(n=n.compare)?n:Jn)(i,r)&&e.ref===t.ref)return dl(e,t,a)}return t.flags|=1,(e=zs(o,r)).ref=t.ref,e.return=t,t.child=e}function Wi(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(Jn(o,r)&&e.ref===t.ref){if(Bi=!1,t.pendingProps=r=o,!fl(e,a))return t.lanes=e.lanes,dl(e,t,a);131072&e.flags&&(Bi=!0)}}return Gi(e,t,n,r,a)}function Ji(e,t,n){var r=t.pendingProps,a=r.children,o=!!(2&t.stateNode._pendingVisibility),i=null!==e?e.memoizedState:null;if(Ki(e,t),"hidden"===r.mode||o){if(128&t.flags){if(r=null!==i?i.baseLanes|n:n,null!==e){for(a=t.child=e.child,o=0;null!==a;)o=o|a.lanes|a.childLanes,a=a.sibling;t.childLanes=o&~r}else t.childLanes=0,t.child=null;return Qi(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,Qi(e,t,null!==i?i.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&Qa(0,null!==i?i.cachePool:null),null!==i?xa(t,i):Ra(),Ta(t)}else null!==i?(Qa(0,i.cachePool),xa(t,i),_a(),t.memoizedState=null):(null!==e&&Qa(0,null),Ra(),_a());return qi(e,t,a,n),t.child}function Qi(e,t,n,r){var a=Ja();return a=null===a?null:{parent:Fa._currentValue,pool:a},t.memoizedState={baseLanes:n,cachePool:a},null!==e&&Qa(0,null),Ra(),Ta(t),null!==e&&Sl(e,t,r,!0),null}function Ki(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=2097664);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(i(284));null!==e&&e.ref===n||(t.flags|=2097664)}}function Gi(e,t,n,r,a){return kl(t),n=co(e,t,n,r,void 0,a),r=mo(),null===e||Bi?(Qr&&r&&Yr(t),t.flags|=1,qi(e,t,n,a),t.child):(yo(e,t,a),dl(e,t,a))}function Xi(e,t,n,r,a,o){return kl(t),t.updateQueue=null,n=ho(t,r,n,a),fo(e),r=mo(),null===e||Bi?(Qr&&r&&Yr(t),t.flags|=1,qi(e,t,n,o),t.child):(yo(e,t,o),dl(e,t,o))}function Zi(e,t,n,r,a){if(kl(t),null===t.stateNode){var o=_r,i=n.contextType;"object"==typeof i&&null!==i&&(o=xl(i)),o=new n(r,o),t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,o.updater=Ai,t.stateNode=o,o._reactInternals=t,(o=t.stateNode).props=r,o.state=t.memoizedState,o.refs={},Ll(t),i=n.contextType,o.context="object"==typeof i&&null!==i?xl(i):_r,o.state=t.memoizedState,"function"==typeof(i=n.getDerivedStateFromProps)&&(Li(t,n,i,r),o.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(i=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),i!==o.state&&Ai.enqueueReplaceState(o,o.state,null),zl(t,r,o,a),Ml(),o.state=t.memoizedState),"function"==typeof o.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){o=t.stateNode;var l=t.memoizedProps,s=Oi(n,l);o.props=s;var u=o.context,c=n.contextType;i=_r,"object"==typeof c&&null!==c&&(i=xl(c));var d=n.getDerivedStateFromProps;c="function"==typeof d||"function"==typeof o.getSnapshotBeforeUpdate,l=t.pendingProps!==l,c||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l||u!==i)&&_i(t,o,r,i),Pl=!1;var f=t.memoizedState;o.state=f,zl(t,r,o,a),Ml(),u=t.memoizedState,l||f!==u||Pl?("function"==typeof d&&(Li(t,n,d,r),u=t.memoizedState),(s=Pl||Ti(t,n,s,r,f,u,i))?(c||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4194308)):("function"==typeof o.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),o.props=r,o.state=u,o.context=i,r=s):("function"==typeof o.componentDidMount&&(t.flags|=4194308),r=!1)}else{o=t.stateNode,Al(e,t),c=Oi(n,i=t.memoizedProps),o.props=c,d=t.pendingProps,f=o.context,u=n.contextType,s=_r,"object"==typeof u&&null!==u&&(s=xl(u)),(u="function"==typeof(l=n.getDerivedStateFromProps)||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(i!==d||f!==s)&&_i(t,o,r,s),Pl=!1,f=t.memoizedState,o.state=f,zl(t,r,o,a),Ml();var h=t.memoizedState;i!==d||f!==h||Pl||null!==e&&null!==e.dependencies&&El(e.dependencies)?("function"==typeof l&&(Li(t,n,l,r),h=t.memoizedState),(c=Pl||Ti(t,n,c,r,f,h,s)||null!==e&&null!==e.dependencies&&El(e.dependencies))?(u||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,h,s),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,h,s)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof o.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),o.props=r,o.state=h,o.context=s,r=c):("function"!=typeof o.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return o=r,Ki(e,t),r=!!(128&t.flags),o||r?(o=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:o.render(),t.flags|=1,null!==e&&r?(t.child=wa(t,e.child,null,a),t.child=wa(t,null,n,a)):qi(e,t,n,a),t.memoizedState=o.state,e=t.child):e=dl(e,t,a),e}function el(e,t,n,r){return ra(),t.flags|=256,qi(e,t,n,r),t.child}var tl={dehydrated:null,treeContext:null,retryLane:0};function nl(e){return{baseLanes:e,cachePool:Ka()}}function rl(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=hu),e}function al(e,t,n){var r,a=t.pendingProps,o=!1,l=!!(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&!!(2&Da.current)),r&&(o=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(Qr){if(o?Aa(t):_a(),Qr){var s,u=Jr;if(s=u){e:{for(s=u,u=Gr;8!==s.nodeType;){if(!u){u=null;break e}if(null===(s=id(s.nextSibling))){u=null;break e}}u=s}null!==u?(t.memoizedState={dehydrated:u,treeContext:null!==Ir?{id:Ur,overflow:Hr}:null,retryLane:536870912},(s=Ns(18,null,null,0)).stateNode=u,s.return=t,t.child=s,Wr=t,Jr=null,s=!0):s=!1}s||Zr(t)}if(null!==(u=t.memoizedState)&&null!==(u=u.dehydrated))return"$!"===u.data?t.lanes=16:t.lanes=536870912,null;Oa(t)}return u=a.children,a=a.fallback,o?(_a(),u=il({mode:"hidden",children:u},o=t.mode),a=js(a,o,n,null),u.return=t,a.return=t,u.sibling=a,t.child=u,(o=t.child).memoizedState=nl(n),o.childLanes=rl(e,r,n),t.memoizedState=tl,a):(Aa(t),ol(t,u))}if(null!==(s=e.memoizedState)&&null!==(u=s.dehydrated)){if(l)256&t.flags?(Aa(t),t.flags&=-257,t=ll(e,t,n)):null!==t.memoizedState?(_a(),t.child=e.child,t.flags|=128,t=null):(_a(),o=a.fallback,u=t.mode,a=il({mode:"visible",children:a.children},u),(o=js(o,u,n,null)).flags|=2,a.return=t,o.return=t,a.sibling=o,t.child=a,wa(t,e.child,null,n),(a=t.child).memoizedState=nl(n),a.childLanes=rl(e,r,n),t.memoizedState=tl,t=o);else if(Aa(t),"$!"===u.data){if(r=u.nextSibling&&u.nextSibling.dataset)var c=r.dgst;r=c,(a=Error(i(419))).stack="",a.digest=r,aa({value:a,source:null,stack:null}),t=ll(e,t,n)}else if(Bi||Sl(e,t,n,!1),r=!!(n&e.childLanes),Bi||r){if(null!==(r=eu)){if(42&(a=n&-n))a=1;else switch(a){case 2:a=1;break;case 8:a=4;break;case 32:a=16;break;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:a=64;break;case 268435456:a=134217728;break;default:a=0}if(0!==(a=a&(r.suspendedLanes|n)?0:a)&&a!==s.retryLane)throw s.retryLane=a,Lr(e,a),_u(r,0,a),Hi}"$?"===u.data||Bu(),t=ll(e,t,n)}else"$?"===u.data?(t.flags|=128,t.child=e.child,t=ic.bind(null,e),u._reactRetry=t,t=null):(e=s.treeContext,Jr=id(u.nextSibling),Wr=t,Qr=!0,Kr=null,Gr=!1,null!==e&&(Fr[jr++]=Ur,Fr[jr++]=Hr,Fr[jr++]=Ir,Ur=e.id,Hr=e.overflow,Ir=t),(t=ol(t,a.children)).flags|=4096);return t}return o?(_a(),o=a.fallback,u=t.mode,c=(s=e.child).sibling,(a=zs(s,{mode:"hidden",children:a.children})).subtreeFlags=31457280&s.subtreeFlags,null!==c?o=zs(c,o):(o=js(o,u,n,null)).flags|=2,o.return=t,a.return=t,a.sibling=o,t.child=a,a=o,o=t.child,null===(u=e.child.memoizedState)?u=nl(n):(null!==(s=u.cachePool)?(c=Fa._currentValue,s=s.parent!==c?{parent:c,pool:c}:s):s=Ka(),u={baseLanes:u.baseLanes|n,cachePool:s}),o.memoizedState=u,o.childLanes=rl(e,r,n),t.memoizedState=tl,a):(Aa(t),e=(n=e.child).sibling,(n=zs(n,{mode:"visible",children:a.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function ol(e,t){return(t=il({mode:"visible",children:t},e.mode)).return=e,e.child=t}function il(e,t){return Is(e,t,0,null)}function ll(e,t,n){return wa(t,e.child,null,n),(e=ol(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function sl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),bl(e.return,t,n)}function ul(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function cl(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(qi(e,t,r.children,n),2&(r=Da.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&sl(e,n,t);else if(19===e.tag)sl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(W(Da,r),a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Na(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),ul(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Na(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}ul(t,!0,n,null,o);break;case"together":ul(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function dl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),cu|=t.lanes,!(n&t.childLanes)){if(null===e)return null;if(Sl(e,t,n,!1),!(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=zs(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=zs(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function fl(e,t){return!!(e.lanes&t)||!(null===(e=e.dependencies)||!El(e))}function hl(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)Bi=!0;else{if(!(fl(e,n)||128&t.flags))return Bi=!1,function(e,t,n){switch(t.tag){case 3:X(t,t.stateNode.containerInfo),vl(0,Fa,e.memoizedState.cache),ra();break;case 27:case 5:ee(t);break;case 4:X(t,t.stateNode.containerInfo);break;case 10:vl(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(Aa(t),t.flags|=128,null):n&t.child.childLanes?al(e,t,n):(Aa(t),null!==(e=dl(e,t,n))?e.sibling:null);Aa(t);break;case 19:var a=!!(128&e.flags);if((r=!!(n&t.childLanes))||(Sl(e,t,n,!1),r=!!(n&t.childLanes)),a){if(r)return cl(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),W(Da,Da.current),r)break;return null;case 22:case 23:return t.lanes=0,Ji(e,t,n);case 24:vl(0,Fa,e.memoizedState.cache)}return dl(e,t,n)}(e,t,n);Bi=!!(131072&e.flags)}else Bi=!1,Qr&&1048576&t.flags&&qr(t,$r,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,a=r._init;if(r=a(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((a=r.$$typeof)===y){t.tag=11,t=Yi(null,t,r,e,n);break e}if(a===b){t.tag=14,t=Vi(null,t,r,e,n);break e}}throw t=C(r)||r,Error(i(306,t,""))}Ms(r)?(e=Oi(r,e),t.tag=1,t=Zi(null,t,r,e,n)):(t.tag=0,t=Gi(null,t,r,e,n))}return t;case 0:return Gi(e,t,t.type,t.pendingProps,n);case 1:return Zi(e,t,r=t.type,a=Oi(r,t.pendingProps),n);case 3:e:{if(X(t,t.stateNode.containerInfo),null===e)throw Error(i(387));var o=t.pendingProps;r=(a=t.memoizedState).element,Al(e,t),zl(t,o,null,n);var l=t.memoizedState;if(o=l.cache,vl(0,Fa,o),o!==a.cache&&wl(t,[Fa],n,!0),Ml(),o=l.element,a.isDehydrated){if(a={element:o,isDehydrated:!1,cache:l.cache},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=el(e,t,o,n);break e}if(o!==r){aa(r=Dr(Error(i(424)),t)),t=el(e,t,o,n);break e}for(Jr=id(t.stateNode.containerInfo.firstChild),Wr=t,Qr=!0,Kr=null,Gr=!0,n=Sa(t,null,o,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ra(),o===r){t=dl(e,t,n);break e}qi(e,t,o,n)}t=t.child}return t;case 26:return Ki(e,t),null===e?(n=md(t.type,null,t.pendingProps,null))?t.memoizedState=n:Qr||(n=t.type,e=t.pendingProps,(r=Jc(K.current).createElement(n))[$e]=t,r[Fe]=e,Yc(r,n,e),Ke(r),t.stateNode=r):t.memoizedState=md(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return ee(t),null===e&&Qr&&(r=t.stateNode=sd(t.type,t.pendingProps,K.current),Wr=t,Gr=!0,Jr=id(r.firstChild)),r=t.pendingProps.children,null!==e||Qr?qi(e,t,r,n):t.child=wa(t,null,r,n),Ki(e,t),t.child;case 5:return null===e&&Qr&&((a=r=Jr)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var a=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[qe])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(o=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(o!==a.rel||e.getAttribute("href")!==(null==a.href?null:a.href)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin)||e.getAttribute("title")!==(null==a.title?null:a.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((o=e.getAttribute("src"))!==(null==a.src?null:a.src)||e.getAttribute("type")!==(null==a.type?null:a.type)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin))&&o&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var o=null==a.name?null:""+a.name;if("hidden"===a.type&&e.getAttribute("name")===o)return e}if(null===(e=id(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,Gr))?(t.stateNode=r,Wr=t,Jr=id(r.firstChild),Gr=!1,a=!0):a=!1),a||Zr(t)),ee(t),a=t.type,o=t.pendingProps,l=null!==e?e.memoizedProps:null,r=o.children,Gc(a,o)?r=null:null!==l&&Gc(a,l)&&(t.flags|=32),null!==t.memoizedState&&(a=co(e,t,po,null,null,n),Md._currentValue=a),Ki(e,t),qi(e,t,r,n),t.child;case 6:return null===e&&Qr&&((e=n=Jr)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=id(e.nextSibling)))return null}return e}(n,t.pendingProps,Gr))?(t.stateNode=n,Wr=t,Jr=null,e=!0):e=!1),e||Zr(t)),null;case 13:return al(e,t,n);case 4:return X(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=wa(t,null,r,n):qi(e,t,r,n),t.child;case 11:return Yi(e,t,t.type,t.pendingProps,n);case 7:return qi(e,t,t.pendingProps,n),t.child;case 8:case 12:return qi(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,vl(0,t.type,r.value),qi(e,t,r.children,n),t.child;case 9:return a=t.type._context,r=t.pendingProps.children,kl(t),r=r(a=xl(a)),t.flags|=1,qi(e,t,r,n),t.child;case 14:return Vi(e,t,t.type,t.pendingProps,n);case 15:return Wi(e,t,t.type,t.pendingProps,n);case 19:return cl(e,t,n);case 22:return Ji(e,t,n);case 24:return kl(t),r=xl(Fa),null===e?(null===(a=Ja())&&(a=eu,o=ja(),a.pooledCache=o,o.refCount++,null!==o&&(a.pooledCacheLanes|=n),a=o),t.memoizedState={parent:r,cache:a},Ll(t),vl(0,Fa,a)):(!!(e.lanes&n)&&(Al(e,t),zl(t,null,null,n),Ml()),a=e.memoizedState,o=t.memoizedState,a.parent!==r?(a={parent:r,cache:r},t.memoizedState=a,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=a),vl(0,Fa,r)):(r=o.cache,vl(0,Fa,r),r!==a.cache&&wl(t,[Fa],n,!0))),qi(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(i(156,t.tag))}var pl=Y(null),ml=null,yl=null;function vl(e,t,n){W(pl,t._currentValue),t._currentValue=n}function gl(e){e._currentValue=pl.current,V(pl)}function bl(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function wl(e,t,n,r){var a=e.child;for(null!==a&&(a.return=e);null!==a;){var o=a.dependencies;if(null!==o){var l=a.child;o=o.firstContext;e:for(;null!==o;){var s=o;o=a;for(var u=0;u<t.length;u++)if(s.context===t[u]){o.lanes|=n,null!==(s=o.alternate)&&(s.lanes|=n),bl(o.return,n,e),r||(l=null);break e}o=s.next}}else if(18===a.tag){if(null===(l=a.return))throw Error(i(341));l.lanes|=n,null!==(o=l.alternate)&&(o.lanes|=n),bl(l,n,e),l=null}else l=a.child;if(null!==l)l.return=a;else for(l=a;null!==l;){if(l===e){l=null;break}if(null!==(a=l.sibling)){a.return=l.return,l=a;break}l=l.return}a=l}}function Sl(e,t,n,r){e=null;for(var a=t,o=!1;null!==a;){if(!o)if(524288&a.flags)o=!0;else if(262144&a.flags)break;if(10===a.tag){var l=a.alternate;if(null===l)throw Error(i(387));if(null!==(l=l.memoizedProps)){var s=a.type;Wn(a.pendingProps.value,l.value)||(null!==e?e.push(s):e=[s])}}else if(a===G.current){if(null===(l=a.alternate))throw Error(i(387));l.memoizedState.memoizedState!==a.memoizedState.memoizedState&&(null!==e?e.push(Md):e=[Md])}a=a.return}null!==e&&wl(t,e,n,r),t.flags|=262144}function El(e){for(e=e.firstContext;null!==e;){if(!Wn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function kl(e){ml=e,yl=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function xl(e){return Cl(ml,e)}function Rl(e,t){return null===ml&&kl(e),Cl(e,t)}function Cl(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===yl){if(null===e)throw Error(i(308));yl=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else yl=yl.next=t;return n}var Pl=!1;function Ll(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function Al(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function Tl(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function _l(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Zs){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,t=Tr(e),Ar(e,null,n),t}return Cr(e,r,t,n),Tr(e)}function Ol(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194176&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,De(e,n)}}function Dl(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var Nl=!1;function Ml(){if(Nl&&null!==qa)throw qa}function zl(e,t,n,r){Nl=!1;var a=e.updateQueue;Pl=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var s=l,u=s.next;s.next=null,null===i?o=u:i.next=u,i=s;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=s)}if(null!==o){var d=a.baseState;for(i=0,c=u=s=null,l=o;;){var f=-536870913&l.lane,h=f!==l.lane;if(h?(nu&f)===f:(r&f)===f){0!==f&&f===Ba&&(Nl=!0),null!==c&&(c=c.next={lane:0,tag:l.tag,payload:l.payload,callback:null,next:null});e:{var p=e,m=l;f=t;var y=n;switch(m.tag){case 1:if("function"==typeof(p=m.payload)){d=p.call(y,d,f);break e}d=p;break e;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(f="function"==typeof(p=m.payload)?p.call(y,d,f):p))break e;d=T({},d,f);break e;case 2:Pl=!0}}null!==(f=l.callback)&&(e.flags|=64,h&&(e.flags|=8192),null===(h=a.callbacks)?a.callbacks=[f]:h.push(f))}else h={lane:f,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(u=c=h,s=d):c=c.next=h,i|=f;if(null===(l=l.next)){if(null===(l=a.shared.pending))break;l=(h=l).next,h.next=null,a.lastBaseUpdate=h,a.shared.pending=null}}null===c&&(s=d),a.baseState=s,a.firstBaseUpdate=u,a.lastBaseUpdate=c,null===o&&(a.shared.lanes=0),cu|=i,e.lanes=i,e.memoizedState=d}}function $l(e,t){if("function"!=typeof e)throw Error(i(191,e));e.call(t)}function Fl(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)$l(n[e],t)}function jl(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var a=r.next;n=a;do{if((n.tag&e)===e){r=void 0;var o=n.create,i=n.inst;r=o(),i.destroy=r}n=n.next}while(n!==a)}}catch(e){nc(t,t.return,e)}}function Il(e,t,n){try{var r=t.updateQueue,a=null!==r?r.lastEffect:null;if(null!==a){var o=a.next;r=o;do{if((r.tag&e)===e){var i=r.inst,l=i.destroy;if(void 0!==l){i.destroy=void 0,a=t;var s=n;try{l()}catch(e){nc(a,s,e)}}}r=r.next}while(r!==o)}}catch(e){nc(t,t.return,e)}}function Ul(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{Fl(t,n)}catch(t){nc(e,e.return,t)}}}function Hl(e,t,n){n.props=Oi(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){nc(e,t,n)}}function Bl(e,t){try{var n=e.ref;if(null!==n){var r=e.stateNode;switch(e.tag){case 26:case 27:case 5:var a=r;break;default:a=r}"function"==typeof n?e.refCleanup=n(a):n.current=a}}catch(n){nc(e,t,n)}}function ql(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){nc(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){nc(e,t,n)}else n.current=null}function Yl(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){nc(e,e.return,t)}}function Vl(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var a=null,o=null,l=null,s=null,u=null,c=null,d=null;for(p in n){var f=n[p];if(n.hasOwnProperty(p)&&null!=f)switch(p){case"checked":case"value":break;case"defaultValue":u=f;default:r.hasOwnProperty(p)||Bc(e,t,p,null,r,f)}}for(var h in r){var p=r[h];if(f=n[h],r.hasOwnProperty(h)&&(null!=p||null!=f))switch(h){case"type":o=p;break;case"name":a=p;break;case"checked":c=p;break;case"defaultChecked":d=p;break;case"value":l=p;break;case"defaultValue":s=p;break;case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(i(137,t));break;default:p!==f&&Bc(e,t,h,p,r,f)}}return void mt(e,l,s,u,c,d,o,a);case"select":for(o in p=l=s=h=null,n)if(u=n[o],n.hasOwnProperty(o)&&null!=u)switch(o){case"value":break;case"multiple":p=u;default:r.hasOwnProperty(o)||Bc(e,t,o,null,r,u)}for(a in r)if(o=r[a],u=n[a],r.hasOwnProperty(a)&&(null!=o||null!=u))switch(a){case"value":h=o;break;case"defaultValue":s=o;break;case"multiple":l=o;default:o!==u&&Bc(e,t,a,o,r,u)}return t=s,n=l,r=p,void(null!=h?gt(e,!!n,h,!1):!!r!=!!n&&(null!=t?gt(e,!!n,t,!0):gt(e,!!n,n?[]:"",!1)));case"textarea":for(s in p=h=null,n)if(a=n[s],n.hasOwnProperty(s)&&null!=a&&!r.hasOwnProperty(s))switch(s){case"value":case"children":break;default:Bc(e,t,s,null,r,a)}for(l in r)if(a=r[l],o=n[l],r.hasOwnProperty(l)&&(null!=a||null!=o))switch(l){case"value":h=a;break;case"defaultValue":p=a;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=a)throw Error(i(91));break;default:a!==o&&Bc(e,t,l,a,r,o)}return void bt(e,h,p);case"option":for(var m in n)h=n[m],n.hasOwnProperty(m)&&null!=h&&!r.hasOwnProperty(m)&&("selected"===m?e.selected=!1:Bc(e,t,m,null,r,h));for(u in r)h=r[u],p=n[u],!r.hasOwnProperty(u)||h===p||null==h&&null==p||("selected"===u?e.selected=h&&"function"!=typeof h&&"symbol"!=typeof h:Bc(e,t,u,h,r,p));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var y in n)h=n[y],n.hasOwnProperty(y)&&null!=h&&!r.hasOwnProperty(y)&&Bc(e,t,y,null,r,h);for(c in r)if(h=r[c],p=n[c],r.hasOwnProperty(c)&&h!==p&&(null!=h||null!=p))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=h)throw Error(i(137,t));break;default:Bc(e,t,c,h,r,p)}return;default:if(Rt(t)){for(var v in n)h=n[v],n.hasOwnProperty(v)&&void 0!==h&&!r.hasOwnProperty(v)&&qc(e,t,v,void 0,r,h);for(d in r)h=r[d],p=n[d],!r.hasOwnProperty(d)||h===p||void 0===h&&void 0===p||qc(e,t,d,h,r,p);return}}for(var g in n)h=n[g],n.hasOwnProperty(g)&&null!=h&&!r.hasOwnProperty(g)&&Bc(e,t,g,null,r,h);for(f in r)h=r[f],p=n[f],!r.hasOwnProperty(f)||h===p||null==h&&null==p||Bc(e,t,f,h,r,p)}(r,e.type,n,t),r[Fe]=t}catch(t){nc(e,e.return,t)}}function Wl(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag||4===e.tag}function Jl(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||Wl(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&27!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function Ql(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Hc));else if(4!==r&&27!==r&&null!==(e=e.child))for(Ql(e,t,n),e=e.sibling;null!==e;)Ql(e,t,n),e=e.sibling}function Kl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&27!==r&&null!==(e=e.child))for(Kl(e,t,n),e=e.sibling;null!==e;)Kl(e,t,n),e=e.sibling}var Gl=!1,Xl=!1,Zl=!1,es="function"==typeof WeakSet?WeakSet:Set,ts=null,ns=!1;function rs(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:ys(e,n),4&r&&jl(5,n);break;case 1:if(ys(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){nc(n,n.return,e)}else{var a=Oi(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(a,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){nc(n,n.return,e)}}64&r&&Ul(n),512&r&&Bl(n,n.return);break;case 3:if(ys(e,n),64&r&&null!==(r=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:e=n.child.stateNode}try{Fl(r,e)}catch(e){nc(n,n.return,e)}}break;case 26:ys(e,n),512&r&&Bl(n,n.return);break;case 27:case 5:ys(e,n),null===t&&4&r&&Yl(n),512&r&&Bl(n,n.return);break;case 12:default:ys(e,n);break;case 13:ys(e,n),4&r&&us(e,n);break;case 22:if(!(a=null!==n.memoizedState||Gl)){t=null!==t&&null!==t.memoizedState||Xl;var o=Gl,i=Xl;Gl=a,(Xl=t)&&!i?gs(e,n,!!(8772&n.subtreeFlags)):ys(e,n),Gl=o,Xl=i}512&r&&("manual"===n.memoizedProps.mode?Bl(n,n.return):ql(n,n.return))}}function as(e){var t=e.alternate;null!==t&&(e.alternate=null,as(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&Ye(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var os=null,is=!1;function ls(e,t,n){for(n=n.child;null!==n;)ss(e,t,n),n=n.sibling}function ss(e,t,n){if(ve&&"function"==typeof ve.onCommitFiberUnmount)try{ve.onCommitFiberUnmount(ye,n)}catch(e){}switch(n.tag){case 26:Xl||ql(n,t),ls(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:Xl||ql(n,t);var r=os,a=is;for(os=n.stateNode,ls(e,t,n),t=(n=n.stateNode).attributes;t.length;)n.removeAttributeNode(t[0]);Ye(n),os=r,is=a;break;case 5:Xl||ql(n,t);case 6:a=os;var o=is;if(os=null,ls(e,t,n),is=o,null!==(os=a))if(is)try{e=os,r=n.stateNode,8===e.nodeType?e.parentNode.removeChild(r):e.removeChild(r)}catch(e){nc(n,t,e)}else try{os.removeChild(n.stateNode)}catch(e){nc(n,t,e)}break;case 18:null!==os&&(is?(t=os,n=n.stateNode,8===t.nodeType?ad(t.parentNode,n):1===t.nodeType&&ad(t,n),hf(t)):ad(os,n.stateNode));break;case 4:r=os,a=is,os=n.stateNode.containerInfo,is=!0,ls(e,t,n),os=r,is=a;break;case 0:case 11:case 14:case 15:Xl||Il(2,n,t),Xl||Il(4,n,t),ls(e,t,n);break;case 1:Xl||(ql(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&Hl(n,t,r)),ls(e,t,n);break;case 21:ls(e,t,n);break;case 22:Xl||ql(n,t),Xl=(r=Xl)||null!==n.memoizedState,ls(e,t,n),Xl=r;break;default:ls(e,t,n)}}function us(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{hf(e)}catch(e){nc(t,t.return,e)}}function cs(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new es),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new es),t;default:throw Error(i(435,e.tag))}}(e);t.forEach((function(t){var r=lc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}function ds(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r],o=e,l=t,s=l;e:for(;null!==s;){switch(s.tag){case 27:case 5:os=s.stateNode,is=!1;break e;case 3:case 4:os=s.stateNode.containerInfo,is=!0;break e}s=s.return}if(null===os)throw Error(i(160));ss(o,l,a),os=null,is=!1,null!==(o=a.alternate)&&(o.return=null),a.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)hs(t,e),t=t.sibling}var fs=null;function hs(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:ds(t,e),ps(e),4&r&&(Il(3,e,e.return),jl(3,e),Il(5,e,e.return));break;case 1:ds(t,e),ps(e),512&r&&(Xl||null===n||ql(n,n.return)),64&r&&Gl&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var a=fs;if(ds(t,e),ps(e),512&r&&(Xl||null===n||ql(n,n.return)),4&r){var o=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,a=a.ownerDocument||a;t:switch(r){case"title":(!(o=a.getElementsByTagName("title")[0])||o[qe]||o[$e]||"http://www.w3.org/2000/svg"===o.namespaceURI||o.hasAttribute("itemprop"))&&(o=a.createElement(r),a.head.insertBefore(o,a.querySelector("head > title"))),Yc(o,r,n),o[$e]=e,Ke(o),r=o;break e;case"link":var l=Cd("link","href",a).get(r+(n.href||""));if(l)for(var s=0;s<l.length;s++)if((o=l[s]).getAttribute("href")===(null==n.href?null:n.href)&&o.getAttribute("rel")===(null==n.rel?null:n.rel)&&o.getAttribute("title")===(null==n.title?null:n.title)&&o.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){l.splice(s,1);break t}Yc(o=a.createElement(r),r,n),a.head.appendChild(o);break;case"meta":if(l=Cd("meta","content",a).get(r+(n.content||"")))for(s=0;s<l.length;s++)if((o=l[s]).getAttribute("content")===(null==n.content?null:""+n.content)&&o.getAttribute("name")===(null==n.name?null:n.name)&&o.getAttribute("property")===(null==n.property?null:n.property)&&o.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&o.getAttribute("charset")===(null==n.charSet?null:n.charSet)){l.splice(s,1);break t}Yc(o=a.createElement(r),r,n),a.head.appendChild(o);break;default:throw Error(i(468,r))}o[$e]=e,Ke(o),r=o}e.stateNode=r}else Pd(a,e.type,e.stateNode);else e.stateNode=Sd(a,r,e.memoizedProps);else o!==r?(null===o?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):o.count--,null===r?Pd(a,e.type,e.stateNode):Sd(a,r,e.memoizedProps)):null===r&&null!==e.stateNode&&Vl(e,e.memoizedProps,n.memoizedProps)}break;case 27:if(4&r&&null===e.alternate){a=e.stateNode,o=e.memoizedProps;try{for(var u=a.firstChild;u;){var c=u.nextSibling,d=u.nodeName;u[qe]||"HEAD"===d||"BODY"===d||"SCRIPT"===d||"STYLE"===d||"LINK"===d&&"stylesheet"===u.rel.toLowerCase()||a.removeChild(u),u=c}for(var f=e.type,h=a.attributes;h.length;)a.removeAttributeNode(h[0]);Yc(a,f,o),a[$e]=e,a[Fe]=o}catch(t){nc(e,e.return,t)}}case 5:if(ds(t,e),ps(e),512&r&&(Xl||null===n||ql(n,n.return)),32&e.flags){a=e.stateNode;try{St(a,"")}catch(t){nc(e,e.return,t)}}4&r&&null!=e.stateNode&&Vl(e,a=e.memoizedProps,null!==n?n.memoizedProps:a),1024&r&&(Zl=!0);break;case 6:if(ds(t,e),ps(e),4&r){if(null===e.stateNode)throw Error(i(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){nc(e,e.return,t)}}break;case 3:if(Rd=null,a=fs,fs=dd(t.containerInfo),ds(t,e),fs=a,ps(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{hf(t.containerInfo)}catch(t){nc(e,e.return,t)}Zl&&(Zl=!1,ms(e));break;case 4:r=fs,fs=dd(e.stateNode.containerInfo),ds(t,e),ps(e),fs=r;break;case 12:ds(t,e),ps(e);break;case 13:ds(t,e),ps(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(gu=le()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,cs(e,r));break;case 22:if(512&r&&(Xl||null===n||ql(n,n.return)),u=null!==e.memoizedState,c=null!==n&&null!==n.memoizedState,Gl=(d=Gl)||u,Xl=(f=Xl)||c,ds(t,e),Xl=f,Gl=d,ps(e),(t=e.stateNode)._current=e,t._visibility&=-3,t._visibility|=2&t._pendingVisibility,8192&r&&(t._visibility=u?-2&t._visibility:1|t._visibility,u&&(t=Gl||Xl,null===n||c||t||vs(e)),null===e.memoizedProps||"manual"!==e.memoizedProps.mode))e:for(n=null,t=e;;){if(5===t.tag||26===t.tag||27===t.tag){if(null===n){c=n=t;try{if(a=c.stateNode,u)"function"==typeof(o=a.style).setProperty?o.setProperty("display","none","important"):o.display="none";else{l=c.stateNode;var p=null!=(s=c.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null;l.style.display=null==p||"boolean"==typeof p?"":(""+p).trim()}}catch(e){nc(c,c.return,e)}}}else if(6===t.tag){if(null===n){c=t;try{c.stateNode.nodeValue=u?"":c.memoizedProps}catch(e){nc(c,c.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,cs(e,n));break;case 19:ds(t,e),ps(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,cs(e,r));break;case 21:break;default:ds(t,e),ps(e)}}function ps(e){var t=e.flags;if(2&t){try{if(27!==e.tag){e:{for(var n=e.return;null!==n;){if(Wl(n)){var r=n;break e}n=n.return}throw Error(i(160))}switch(r.tag){case 27:var a=r.stateNode;Kl(e,Jl(e),a);break;case 5:var o=r.stateNode;32&r.flags&&(St(o,""),r.flags&=-33),Kl(e,Jl(e),o);break;case 3:case 4:var l=r.stateNode.containerInfo;Ql(e,Jl(e),l);break;default:throw Error(i(161))}}}catch(t){nc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function ms(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;ms(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function ys(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)rs(e,t.alternate,t),t=t.sibling}function vs(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:Il(4,t,t.return),vs(t);break;case 1:ql(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&Hl(t,t.return,n),vs(t);break;case 26:case 27:case 5:ql(t,t.return),vs(t);break;case 22:ql(t,t.return),null===t.memoizedState&&vs(t);break;default:vs(t)}e=e.sibling}}function gs(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,a=e,o=t,i=o.flags;switch(o.tag){case 0:case 11:case 15:gs(a,o,n),jl(4,o);break;case 1:if(gs(a,o,n),"function"==typeof(a=(r=o).stateNode).componentDidMount)try{a.componentDidMount()}catch(e){nc(r,r.return,e)}if(null!==(a=(r=o).updateQueue)){var l=r.stateNode;try{var s=a.shared.hiddenCallbacks;if(null!==s)for(a.shared.hiddenCallbacks=null,a=0;a<s.length;a++)$l(s[a],l)}catch(e){nc(r,r.return,e)}}n&&64&i&&Ul(o),Bl(o,o.return);break;case 26:case 27:case 5:gs(a,o,n),n&&null===r&&4&i&&Yl(o),Bl(o,o.return);break;case 12:default:gs(a,o,n);break;case 13:gs(a,o,n),n&&4&i&&us(a,o);break;case 22:null===o.memoizedState&&gs(a,o,n),Bl(o,o.return)}t=t.sibling}}function bs(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&Ia(n))}function ws(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Ia(e))}function Ss(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)Es(e,t,n,r),t=t.sibling}function Es(e,t,n,r){var a=t.flags;switch(t.tag){case 0:case 11:case 15:Ss(e,t,n,r),2048&a&&jl(9,t);break;case 3:Ss(e,t,n,r),2048&a&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Ia(e)));break;case 12:if(2048&a){Ss(e,t,n,r),e=t.stateNode;try{var o=t.memoizedProps,i=o.id,l=o.onPostCommit;"function"==typeof l&&l(i,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){nc(t,t.return,e)}}else Ss(e,t,n,r);break;case 23:break;case 22:o=t.stateNode,null!==t.memoizedState?4&o._visibility?Ss(e,t,n,r):xs(e,t):4&o._visibility?Ss(e,t,n,r):(o._visibility|=4,ks(e,t,n,r,!!(10256&t.subtreeFlags))),2048&a&&bs(t.alternate,t);break;case 24:Ss(e,t,n,r),2048&a&&ws(t.alternate,t);break;default:Ss(e,t,n,r)}}function ks(e,t,n,r,a){for(a=a&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var o=e,i=t,l=n,s=r,u=i.flags;switch(i.tag){case 0:case 11:case 15:ks(o,i,l,s,a),jl(8,i);break;case 23:break;case 22:var c=i.stateNode;null!==i.memoizedState?4&c._visibility?ks(o,i,l,s,a):xs(o,i):(c._visibility|=4,ks(o,i,l,s,a)),a&&2048&u&&bs(i.alternate,i);break;case 24:ks(o,i,l,s,a),a&&2048&u&&ws(i.alternate,i);break;default:ks(o,i,l,s,a)}t=t.sibling}}function xs(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,a=r.flags;switch(r.tag){case 22:xs(n,r),2048&a&&bs(r.alternate,r);break;case 24:xs(n,r),2048&a&&ws(r.alternate,r);break;default:xs(n,r)}t=t.sibling}}var Rs=8192;function Cs(e){if(e.subtreeFlags&Rs)for(e=e.child;null!==e;)Ps(e),e=e.sibling}function Ps(e){switch(e.tag){case 26:Cs(e),e.flags&Rs&&null!==e.memoizedState&&function(e,t,n){if(null===Ad)throw Error(i(475));var r=Ad;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var a=yd(n.href),o=e.querySelector(vd(a));if(o)return null!==(e=o._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=_d.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=o,void Ke(o);o=e.ownerDocument||e,n=gd(n),(a=ud.get(a))&&kd(n,a),Ke(o=o.createElement("link"));var l=o;l._p=new Promise((function(e,t){l.onload=e,l.onerror=t})),Yc(o,"link",n),t.instance=o}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=_d.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(fs,e.memoizedState,e.memoizedProps);break;case 5:default:Cs(e);break;case 3:case 4:var t=fs;fs=dd(e.stateNode.containerInfo),Cs(e),fs=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=Rs,Rs=16777216,Cs(e),Rs=t):Cs(e))}}function Ls(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function As(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];ts=r,Os(r,e)}Ls(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Ts(e),e=e.sibling}function Ts(e){switch(e.tag){case 0:case 11:case 15:As(e),2048&e.flags&&Il(9,e,e.return);break;case 3:case 12:default:As(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&4&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-5,_s(e)):As(e)}}function _s(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];ts=r,Os(r,e)}Ls(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:Il(8,t,t.return),_s(t);break;case 22:4&(n=t.stateNode)._visibility&&(n._visibility&=-5,_s(t));break;default:_s(t)}e=e.sibling}}function Os(e,t){for(;null!==ts;){var n=ts;switch(n.tag){case 0:case 11:case 15:Il(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:Ia(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,ts=r;else e:for(n=e;null!==ts;){var a=(r=ts).sibling,o=r.return;if(as(r),r===n){ts=null;break e}if(null!==a){a.return=o,ts=a;break e}ts=o}}}function Ds(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ns(e,t,n,r){return new Ds(e,t,n,r)}function Ms(e){return!(!(e=e.prototype)||!e.isReactComponent)}function zs(e,t){var n=e.alternate;return null===n?((n=Ns(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=31457280&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function $s(e,t){e.flags&=31457282;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function Fs(e,t,n,r,a,o){var l=0;if(r=e,"function"==typeof e)Ms(e)&&(l=1);else if("string"==typeof e)l=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,J.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case c:return js(n.children,a,o,t);case d:l=8,a|=24;break;case f:return(e=Ns(12,n,t,2|a)).elementType=f,e.lanes=o,e;case v:return(e=Ns(13,n,t,a)).elementType=v,e.lanes=o,e;case g:return(e=Ns(19,n,t,a)).elementType=g,e.lanes=o,e;case S:return Is(n,a,o,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case h:case m:l=10;break e;case p:l=9;break e;case y:l=11;break e;case b:l=14;break e;case w:l=16,r=null;break e}l=29,n=Error(i(130,null===e?"null":typeof e,"")),r=null}return(t=Ns(l,n,t,a)).elementType=e,t.type=r,t.lanes=o,t}function js(e,t,n,r){return(e=Ns(7,e,r,t)).lanes=n,e}function Is(e,t,n,r){(e=Ns(22,e,r,t)).elementType=S,e.lanes=n;var a={_visibility:1,_pendingVisibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null,_current:null,detach:function(){var e=a._current;if(null===e)throw Error(i(456));if(!(2&a._pendingVisibility)){var t=Lr(e,2);null!==t&&(a._pendingVisibility|=2,_u(t,0,2))}},attach:function(){var e=a._current;if(null===e)throw Error(i(456));if(2&a._pendingVisibility){var t=Lr(e,2);null!==t&&(a._pendingVisibility&=-3,_u(t,0,2))}}};return e.stateNode=a,e}function Us(e,t,n){return(e=Ns(6,e,null,t)).lanes=n,e}function Hs(e,t,n){return(t=Ns(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Bs(e){e.flags|=4}function qs(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Ld(t)){if(null!==(t=Pa.current)&&((4194176&nu)===nu?null!==La:(62914560&nu)!==nu&&!(536870912&nu)||t!==La))throw da=la,ia;e.flags|=8192}}function Ys(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?Ae():536870912,e.lanes|=t,pu|=t)}function Vs(e,t){if(!Qr)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ws(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=31457280&a.subtreeFlags,r|=31457280&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Js(e,t,n){var r=t.pendingProps;switch(Vr(t),t.tag){case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return Ws(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),gl(Fa),Z(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(na(t)?Bs(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==Kr&&(Du(Kr),Kr=null))),Ws(t),null;case 26:return n=t.memoizedState,null===e?(Bs(t),null!==n?(Ws(t),qs(t,n)):(Ws(t),t.flags&=-16777217)):n?n!==e.memoizedState?(Bs(t),Ws(t),qs(t,n)):(Ws(t),t.flags&=-16777217):(e.memoizedProps!==r&&Bs(t),Ws(t),t.flags&=-16777217),null;case 27:te(t),n=K.current;var a=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Bs(t);else{if(!r){if(null===t.stateNode)throw Error(i(166));return Ws(t),null}e=J.current,na(t)?ea(t):(e=sd(a,r,n),t.stateNode=e,Bs(t))}return Ws(t),null;case 5:if(te(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Bs(t);else{if(!r){if(null===t.stateNode)throw Error(i(166));return Ws(t),null}if(e=J.current,na(t))ea(t);else{switch(a=Jc(K.current),e){case 1:e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=a.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?a.createElement("select",{is:r.is}):a.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?a.createElement(n,{is:r.is}):a.createElement(n)}}e[$e]=t,e[Fe]=r;e:for(a=t.child;null!==a;){if(5===a.tag||6===a.tag)e.appendChild(a.stateNode);else if(4!==a.tag&&27!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break e;for(;null===a.sibling;){if(null===a.return||a.return===t)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}t.stateNode=e;e:switch(Yc(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Bs(t)}}return Ws(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&Bs(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));if(e=K.current,na(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(a=Wr))switch(a.tag){case 27:case 5:r=a.memoizedProps}e[$e]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Uc(e.nodeValue,n)))||Zr(t)}else(e=Jc(e).createTextNode(r))[$e]=t,t.stateNode=e}return Ws(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(a=na(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(i(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(i(317));a[$e]=t}else ra(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Ws(t),a=!1}else null!==Kr&&(Du(Kr),Kr=null),a=!0;if(!a)return 256&t.flags?(Oa(t),t):(Oa(t),null)}if(Oa(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){a=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(a=r.alternate.memoizedState.cachePool.pool);var o=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(o=r.memoizedState.cachePool.pool),o!==a&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),Ys(t,t.updateQueue),Ws(t),null;case 4:return Z(),null===e&&_c(t.stateNode.containerInfo),Ws(t),null;case 10:return gl(t.type),Ws(t),null;case 19:if(V(Da),null===(a=t.memoizedState))return Ws(t),null;if(r=!!(128&t.flags),null===(o=a.rendering))if(r)Vs(a,!1);else{if(0!==uu||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(o=Na(e))){for(t.flags|=128,Vs(a,!1),e=o.updateQueue,t.updateQueue=e,Ys(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)$s(n,e),n=n.sibling;return W(Da,1&Da.current|2),t.child}e=e.sibling}null!==a.tail&&le()>bu&&(t.flags|=128,r=!0,Vs(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=Na(o))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,Ys(t,e),Vs(a,!0),null===a.tail&&"hidden"===a.tailMode&&!o.alternate&&!Qr)return Ws(t),null}else 2*le()-a.renderingStartTime>bu&&536870912!==n&&(t.flags|=128,r=!0,Vs(a,!1),t.lanes=4194304);a.isBackwards?(o.sibling=t.child,t.child=o):(null!==(e=a.last)?e.sibling=o:t.child=o,a.last=o)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=le(),t.sibling=null,e=Da.current,W(Da,r?1&e|2:1&e),t):(Ws(t),null);case 22:case 23:return Oa(t),Ca(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(Ws(t),6&t.subtreeFlags&&(t.flags|=8192)):Ws(t),null!==(n=t.updateQueue)&&Ys(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&V(Wa),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),gl(Fa),Ws(t),null;case 25:return null}throw Error(i(156,t.tag))}function Qs(e,t){switch(Vr(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return gl(Fa),Z(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return te(t),null;case 13:if(Oa(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));ra()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return V(Da),null;case 4:return Z(),null;case 10:return gl(t.type),null;case 22:case 23:return Oa(t),Ca(),null!==e&&V(Wa),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return gl(Fa),null;default:return null}}function Ks(e,t){switch(Vr(t),t.tag){case 3:gl(Fa),Z();break;case 26:case 27:case 5:te(t);break;case 4:Z();break;case 13:Oa(t);break;case 19:V(Da);break;case 10:gl(t.type);break;case 22:case 23:Oa(t),Ca(),null!==e&&V(Wa);break;case 24:gl(Fa)}}var Gs={getCacheForType:function(e){var t=xl(Fa),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},Xs="function"==typeof WeakMap?WeakMap:Map,Zs=0,eu=null,tu=null,nu=0,ru=0,au=null,ou=!1,iu=!1,lu=!1,su=0,uu=0,cu=0,du=0,fu=0,hu=0,pu=0,mu=null,yu=null,vu=!1,gu=0,bu=1/0,wu=null,Su=null,Eu=!1,ku=null,xu=0,Ru=0,Cu=null,Pu=0,Lu=null;function Au(){return 2&Zs&&0!==nu?nu&-nu:null!==A.T?0!==Ba?Ba:wc():Me()}function Tu(){0===hu&&(hu=536870912&nu&&!Qr?536870912:Le());var e=Pa.current;return null!==e&&(e.flags|=32),hu}function _u(e,t,n){(e===eu&&2===ru||null!==e.cancelPendingCommit)&&(ju(e,0),zu(e,nu,hu,!1)),_e(e,n),2&Zs&&e===eu||(e===eu&&(!(2&Zs)&&(du|=n),4===uu&&zu(e,nu,hu,!1)),pc(e))}function Ou(e,t,n){if(6&Zs)throw Error(i(327));for(var r=!n&&!(60&t)&&!(t&e.expiredLanes)||Ce(e,t),a=r?function(e,t){var n=Zs;Zs|=2;var r=Uu(),a=Hu();eu!==e||nu!==t?(wu=null,bu=le()+500,ju(e,t)):iu=Ce(e,t);e:for(;;)try{if(0!==ru&&null!==tu){t=tu;var o=au;t:switch(ru){case 1:ru=0,au=null,Qu(e,t,o,1);break;case 2:if(sa(o)){ru=0,au=null,Ju(t);break}t=function(){2===ru&&eu===e&&(ru=7),pc(e)},o.then(t,t);break e;case 3:ru=7;break e;case 4:ru=5;break e;case 7:sa(o)?(ru=0,au=null,Ju(t)):(ru=0,au=null,Qu(e,t,o,7));break;case 5:var l=null;switch(tu.tag){case 26:l=tu.memoizedState;case 5:case 27:var s=tu;if(!l||Ld(l)){ru=0,au=null;var u=s.sibling;if(null!==u)tu=u;else{var c=s.return;null!==c?(tu=c,Ku(c)):tu=null}break t}}ru=0,au=null,Qu(e,t,o,5);break;case 6:ru=0,au=null,Qu(e,t,o,6);break;case 8:Fu(),uu=6;break e;default:throw Error(i(462))}}Vu();break}catch(t){Iu(e,t)}return yl=ml=null,A.H=r,A.A=a,Zs=n,null!==tu?0:(eu=null,nu=0,Rr(),uu)}(e,t):qu(e,t,!0),o=r;;){if(0===a){iu&&!r&&zu(e,t,0,!1);break}if(6===a)zu(e,t,0,!ou);else{if(n=e.current.alternate,o&&!Mu(n)){a=qu(e,t,!1),o=!1;continue}if(2===a){if(o=t,e.errorRecoveryDisabledLanes&o)var l=0;else l=0!=(l=-536870913&e.pendingLanes)?l:536870912&l?536870912:0;if(0!==l){t=l;e:{var s=e;a=mu;var u=s.current.memoizedState.isDehydrated;if(u&&(ju(s,l).flags|=256),2!==(l=qu(s,l,!1))){if(lu&&!u){s.errorRecoveryDisabledLanes|=o,du|=o,a=4;break e}o=yu,yu=a,null!==o&&Du(o)}a=l}if(o=!1,2!==a)continue}}if(1===a){ju(e,0),zu(e,t,0,!0);break}e:{switch(r=e,a){case 0:case 1:throw Error(i(345));case 4:if((4194176&t)===t){zu(r,t,hu,!ou);break e}break;case 2:yu=null;break;case 3:case 5:break;default:throw Error(i(329))}if(r.finishedWork=n,r.finishedLanes=t,(62914560&t)===t&&10<(o=gu+300-le())){if(zu(r,t,hu,!ou),0!==Re(r,0))break e;r.timeoutHandle=Zc(Nu.bind(null,r,n,yu,wu,vu,t,hu,du,pu,ou,2,-0,0),o)}else Nu(r,n,yu,wu,vu,t,hu,du,pu,ou,0,-0,0)}}break}pc(e)}function Du(e){null===yu?yu=e:yu.push.apply(yu,e)}function Nu(e,t,n,r,a,o,l,s,u,c,d,f,h){var p=t.subtreeFlags;if((8192&p||!(16785408&~p))&&(Ad={stylesheets:null,count:0,unsuspend:Td},Ps(t),null!==(t=function(){if(null===Ad)throw Error(i(475));var e=Ad;return e.stylesheets&&0===e.count&&Dd(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&Dd(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=t(Xu.bind(null,e,n,r,a,l,s,u,1,f,h)),void zu(e,o,l,!c);Xu(e,n,r,a,l,s,u)}function Mu(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!Wn(o(),a))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function zu(e,t,n,r){t&=~fu,t&=~du,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var a=t;0<a;){var o=31-be(a),i=1<<o;r[o]=-1,a&=~i}0!==n&&Oe(e,n,t)}function $u(){return!!(6&Zs)||(mc(0,!1),!1)}function Fu(){if(null!==tu){if(0===ru)var e=tu.return;else yl=ml=null,vo(e=tu),ha=null,pa=0,e=tu;for(;null!==e;)Ks(e.alternate,e),e=e.return;tu=null}}function ju(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,ed(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),Fu(),eu=e,tu=n=zs(e.current,null),nu=t,ru=0,au=null,ou=!1,iu=Ce(e,t),lu=!1,pu=hu=fu=du=cu=uu=0,yu=mu=null,vu=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var a=31-be(r),o=1<<a;t|=e[a],r&=~o}return su=t,Rr(),n}function Iu(e,t){Xa=null,A.H=xi,t===oa?(t=fa(),ru=3):t===ia?(t=fa(),ru=4):ru=t===Hi?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,au=t,null===tu&&(uu=1,$i(e,Dr(t,e.current)))}function Uu(){var e=A.H;return A.H=xi,null===e?xi:e}function Hu(){var e=A.A;return A.A=Gs,e}function Bu(){uu=4,ou||(4194176&nu)!==nu&&null!==Pa.current||(iu=!0),!(134217727&cu)&&!(134217727&du)||null===eu||zu(eu,nu,hu,!1)}function qu(e,t,n){var r=Zs;Zs|=2;var a=Uu(),o=Hu();eu===e&&nu===t||(wu=null,ju(e,t)),t=!1;var i=uu;e:for(;;)try{if(0!==ru&&null!==tu){var l=tu,s=au;switch(ru){case 8:Fu(),i=6;break e;case 3:case 2:case 6:null===Pa.current&&(t=!0);var u=ru;if(ru=0,au=null,Qu(e,l,s,u),n&&iu){i=0;break e}break;default:u=ru,ru=0,au=null,Qu(e,l,s,u)}}Yu(),i=uu;break}catch(t){Iu(e,t)}return t&&e.shellSuspendCounter++,yl=ml=null,Zs=r,A.H=a,A.A=o,null===tu&&(eu=null,nu=0,Rr()),i}function Yu(){for(;null!==tu;)Wu(tu)}function Vu(){for(;null!==tu&&!oe();)Wu(tu)}function Wu(e){var t=hl(e.alternate,e,su);e.memoizedProps=e.pendingProps,null===t?Ku(e):tu=t}function Ju(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=Xi(n,t,t.pendingProps,t.type,void 0,nu);break;case 11:t=Xi(n,t,t.pendingProps,t.type.render,t.ref,nu);break;case 5:vo(t);default:Ks(n,t),t=hl(n,t=tu=$s(t,su),su)}e.memoizedProps=e.pendingProps,null===t?Ku(e):tu=t}function Qu(e,t,n,r){yl=ml=null,vo(t),ha=null,pa=0;var a=t.return;try{if(function(e,t,n,r,a){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&Sl(t,n,a,!0),null!==(n=Pa.current)){switch(n.tag){case 13:return null===La?Bu():null===n.alternate&&0===uu&&(uu=3),n.flags&=-257,n.flags|=65536,n.lanes=a,r===la?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),rc(e,r,a)),!1;case 22:return n.flags|=65536,r===la?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),rc(e,r,a)),!1}throw Error(i(435,n.tag))}return rc(e,r,a),Bu(),!1}if(Qr)return null!==(t=Pa.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=a,r!==Xr&&aa(Dr(e=Error(i(422),{cause:r}),n))):(r!==Xr&&aa(Dr(t=Error(i(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,a&=-a,e.lanes|=a,r=Dr(r,n),Dl(e,a=ji(e.stateNode,r,a)),4!==uu&&(uu=2)),!1;var o=Error(i(520),{cause:r});if(o=Dr(o,n),null===mu?mu=[o]:mu.push(o),4!==uu&&(uu=2),null===t)return!0;r=Dr(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=a&-a,n.lanes|=e,Dl(n,e=ji(n.stateNode,r,e)),!1;case 1:if(t=n.type,o=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===o||"function"!=typeof o.componentDidCatch||null!==Su&&Su.has(o))))return n.flags|=65536,a&=-a,n.lanes|=a,Ui(a=Ii(a),e,n,r),Dl(n,a),!1}n=n.return}while(null!==n);return!1}(e,a,t,n,nu))return uu=1,$i(e,Dr(n,e.current)),void(tu=null)}catch(t){if(null!==a)throw tu=a,t;return uu=1,$i(e,Dr(n,e.current)),void(tu=null)}32768&t.flags?(Qr||1===r?e=!0:iu||536870912&nu?e=!1:(ou=e=!0,(2===r||3===r||6===r)&&null!==(r=Pa.current)&&13===r.tag&&(r.flags|=16384)),Gu(t,e)):Ku(t)}function Ku(e){var t=e;do{if(32768&t.flags)return void Gu(t,ou);e=t.return;var n=Js(t.alternate,t,su);if(null!==n)return void(tu=n);if(null!==(t=t.sibling))return void(tu=t);tu=t=e}while(null!==t);0===uu&&(uu=5)}function Gu(e,t){do{var n=Qs(e.alternate,e);if(null!==n)return n.flags&=32767,void(tu=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(tu=e);tu=e=n}while(null!==e);uu=6,tu=null}function Xu(e,t,n,r,a,o,l,s,u,c){var d=A.T,f=U.p;try{U.p=2,A.T=null,function(e,t,n,r,a,o,l,s){do{ec()}while(null!==ku);if(6&Zs)throw Error(i(327));var u=e.finishedWork;if(r=e.finishedLanes,null===u)return null;if(e.finishedWork=null,e.finishedLanes=0,u===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0,e.cancelPendingCommit=null;var c=u.lanes|u.childLanes;if(function(e,t,n,r,a,o){var i=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var l=e.entanglements,s=e.expirationTimes,u=e.hiddenUpdates;for(n=i&~n;0<n;){var c=31-be(n),d=1<<c;l[c]=0,s[c]=-1;var f=u[c];if(null!==f)for(u[c]=null,c=0;c<f.length;c++){var h=f[c];null!==h&&(h.lane&=-536870913)}n&=~d}0!==r&&Oe(e,r,0),0!==o&&0===a&&0!==e.tag&&(e.suspendedLanes|=o&~(i&~t))}(e,r,c|=xr,o,l,s),e===eu&&(tu=eu=null,nu=0),!(10256&u.subtreeFlags)&&!(10256&u.flags)||Eu||(Eu=!0,Ru=c,Cu=n,re(de,(function(){return ec(),null}))),n=!!(15990&u.flags),15990&u.subtreeFlags||n?(n=A.T,A.T=null,o=U.p,U.p=2,l=Zs,Zs|=4,function(e,t){if(e=e.containerInfo,Vc=Ud,Zn(e=Xn(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,o=r.focusNode;r=r.focusOffset;try{n.nodeType,o.nodeType}catch(e){n=null;break e}var l=0,s=-1,u=-1,c=0,d=0,f=e,h=null;t:for(;;){for(var p;f!==n||0!==a&&3!==f.nodeType||(s=l+a),f!==o||0!==r&&3!==f.nodeType||(u=l+r),3===f.nodeType&&(l+=f.nodeValue.length),null!==(p=f.firstChild);)h=f,f=p;for(;;){if(f===e)break t;if(h===n&&++c===a&&(s=l),h===o&&++d===r&&(u=l),null!==(p=f.nextSibling))break;h=(f=h).parentNode}f=p}n=-1===s||-1===u?null:{start:s,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(Wc={focusedElem:e,selectionRange:n},Ud=!1,ts=t;null!==ts;)if(e=(t=ts).child,1028&t.subtreeFlags&&null!==e)e.return=t,ts=e;else for(;null!==ts;){switch(o=(t=ts).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==o){e=void 0,n=t,a=o.memoizedProps,o=o.memoizedState,r=n.stateNode;try{var m=Oi(n.type,a,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(m,o),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){nc(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))od(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":od(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(i(163))}if(null!==(e=t.sibling)){e.return=t.return,ts=e;break}ts=t.return}m=ns,ns=!1}(e,u),hs(u,e),er(Wc,e.containerInfo),Ud=!!Vc,Wc=Vc=null,e.current=u,rs(e,u.alternate,u),ie(),Zs=l,U.p=o,A.T=n):e.current=u,Eu?(Eu=!1,ku=e,xu=r):Zu(e,c),0===(c=e.pendingLanes)&&(Su=null),function(e){if(ve&&"function"==typeof ve.onCommitFiberRoot)try{ve.onCommitFiberRoot(ye,e,void 0,!(128&~e.current.flags))}catch(e){}}(u.stateNode),pc(e),null!==t)for(a=e.onRecoverableError,u=0;u<t.length;u++)a((c=t[u]).value,{componentStack:c.stack});!!(3&xu)&&ec(),c=e.pendingLanes,4194218&r&&42&c?e===Lu?Pu++:(Pu=0,Lu=e):Pu=0,mc(0,!1)}(e,t,n,r,f,a,o,l)}finally{A.T=d,U.p=f}}function Zu(e,t){0==(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,Ia(t))}function ec(){if(null!==ku){var e=ku,t=Ru;Ru=0;var n=Ne(xu),r=A.T,a=U.p;try{if(U.p=32>n?32:n,A.T=null,null===ku)var o=!1;else{n=Cu,Cu=null;var l=ku,s=xu;if(ku=null,xu=0,6&Zs)throw Error(i(331));var u=Zs;if(Zs|=4,Ts(l.current),Es(l,l.current,s,n),Zs=u,mc(0,!1),ve&&"function"==typeof ve.onPostCommitFiberRoot)try{ve.onPostCommitFiberRoot(ye,l)}catch(e){}o=!0}return o}finally{U.p=a,A.T=r,Zu(e,t)}}return!1}function tc(e,t,n){t=Dr(n,t),null!==(e=_l(e,t=ji(e.stateNode,t,2),2))&&(_e(e,2),pc(e))}function nc(e,t,n){if(3===e.tag)tc(e,e,n);else for(;null!==t;){if(3===t.tag){tc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Su||!Su.has(r))){e=Dr(n,e),null!==(r=_l(t,n=Ii(2),2))&&(Ui(n,r,t,e),_e(r,2),pc(r));break}}t=t.return}}function rc(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new Xs;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(lu=!0,a.add(n),e=ac.bind(null,e,t,n),t.then(e,e))}function ac(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,eu===e&&(nu&n)===n&&(4===uu||3===uu&&(62914560&nu)===nu&&300>le()-gu?!(2&Zs)&&ju(e,0):fu|=n,pu===nu&&(pu=0)),pc(e)}function oc(e,t){0===t&&(t=Ae()),null!==(e=Lr(e,t))&&(_e(e,t),pc(e))}function ic(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),oc(e,n)}function lc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(i(314))}null!==r&&r.delete(t),oc(e,n)}var sc=null,uc=null,cc=!1,dc=!1,fc=!1,hc=0;function pc(e){var t;e!==uc&&null===e.next&&(null===uc?sc=uc=e:uc=uc.next=e),dc=!0,cc||(cc=!0,t=yc,nd((function(){6&Zs?re(ue,t):t()})))}function mc(e,t){if(!fc&&dc){fc=!0;do{for(var n=!1,r=sc;null!==r;){if(!t)if(0!==e){var a=r.pendingLanes;if(0===a)var o=0;else{var i=r.suspendedLanes,l=r.pingedLanes;o=(1<<31-be(42|e)+1)-1,o=201326677&(o&=a&~(i&~l))?201326677&o|1:o?2|o:0}0!==o&&(n=!0,bc(r,o))}else o=nu,!(3&(o=Re(r,r===eu?o:0)))||Ce(r,o)||(n=!0,bc(r,o));r=r.next}}while(n);fc=!1}}function yc(){dc=cc=!1;var e,t=0;0!==hc&&(((e=window.event)&&"popstate"===e.type?e!==Xc&&(Xc=e,!0):(Xc=null,!1))&&(t=hc),hc=0);for(var n=le(),r=null,a=sc;null!==a;){var o=a.next,i=vc(a,n);0===i?(a.next=null,null===r?sc=o:r.next=o,null===o&&(uc=r)):(r=a,(0!==t||3&i)&&(dc=!0)),a=o}mc(t,!1)}function vc(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=-62914561&e.pendingLanes;0<o;){var i=31-be(o),l=1<<i,s=a[i];-1===s?l&n&&!(l&r)||(a[i]=Pe(l,t)):s<=t&&(e.expiredLanes|=l),o&=~l}if(n=nu,n=Re(e,e===(t=eu)?n:0),r=e.callbackNode,0===n||e===t&&2===ru||null!==e.cancelPendingCommit)return null!==r&&null!==r&&ae(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||Ce(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&ae(r),Ne(n)){case 2:case 8:n=ce;break;case 32:default:n=de;break;case 268435456:n=he}return r=gc.bind(null,e),n=re(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&ae(r),e.callbackPriority=2,e.callbackNode=null,2}function gc(e,t){var n=e.callbackNode;if(ec()&&e.callbackNode!==n)return null;var r=nu;return 0===(r=Re(e,e===eu?r:0))?null:(Ou(e,r,t),vc(e,le()),null!=e.callbackNode&&e.callbackNode===n?gc.bind(null,e):null)}function bc(e,t){if(ec())return null;Ou(e,t,!0)}function wc(){return 0===hc&&(hc=Le()),hc}function Sc(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:Lt(""+e)}function Ec(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var kc=0;kc<wr.length;kc++){var xc=wr[kc];Sr(xc.toLowerCase(),"on"+(xc[0].toUpperCase()+xc.slice(1)))}Sr(fr,"onAnimationEnd"),Sr(hr,"onAnimationIteration"),Sr(pr,"onAnimationStart"),Sr("dblclick","onDoubleClick"),Sr("focusin","onFocus"),Sr("focusout","onBlur"),Sr(mr,"onTransitionRun"),Sr(yr,"onTransitionStart"),Sr(vr,"onTransitionCancel"),Sr(gr,"onTransitionEnd"),et("onMouseEnter",["mouseout","mouseover"]),et("onMouseLeave",["mouseout","mouseover"]),et("onPointerEnter",["pointerout","pointerover"]),et("onPointerLeave",["pointerout","pointerover"]),Ze("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Ze("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Ze("onBeforeInput",["compositionend","keypress","textInput","paste"]),Ze("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Ze("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Ze("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Rc="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Cc=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Rc));function Pc(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==o&&a.isPropagationStopped())break e;o=l,a.currentTarget=u;try{o(a)}catch(e){Di(e)}a.currentTarget=null,o=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,u=l.currentTarget,l=l.listener,s!==o&&a.isPropagationStopped())break e;o=l,a.currentTarget=u;try{o(a)}catch(e){Di(e)}a.currentTarget=null,o=s}}}}function Lc(e,t){var n=t[Ie];void 0===n&&(n=t[Ie]=new Set);var r=e+"__bubble";n.has(r)||(Oc(t,e,2,!1),n.add(r))}function Ac(e,t,n){var r=0;t&&(r|=4),Oc(n,e,r,t)}var Tc="_reactListening"+Math.random().toString(36).slice(2);function _c(e){if(!e[Tc]){e[Tc]=!0,Ge.forEach((function(t){"selectionchange"!==t&&(Cc.has(t)||Ac(t,!1,e),Ac(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Tc]||(t[Tc]=!0,Ac("selectionchange",!1,t))}}function Oc(e,t,n,r){switch(Jd(t)){case 2:var a=Hd;break;case 8:a=Bd;break;default:a=qd}n=a.bind(null,t,n,e),a=void 0,!$t||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Dc(e,t,n,r,a){var o=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===a||8===s.nodeType&&s.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=Ve(l)))return;if(5===(s=i.tag)||6===s||26===s||27===s){r=o=i;continue e}l=l.parentNode}}r=r.return}Mt((function(){var r=o,a=Tt(n),i=[];e:{var l=br.get(e);if(void 0!==l){var s=Gt,u=e;switch(e){case"keypress":if(0===Bt(n))break e;case"keydown":case"keyup":s=hn;break;case"focusin":u="focus",s=rn;break;case"focusout":u="blur",s=rn;break;case"beforeblur":case"afterblur":s=rn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=tn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=nn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=mn;break;case fr:case hr:case pr:s=an;break;case gr:s=yn;break;case"scroll":case"scrollend":s=Zt;break;case"wheel":s=vn;break;case"copy":case"cut":case"paste":s=on;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=pn;break;case"toggle":case"beforetoggle":s=gn}var c=!!(4&t),d=!c&&("scroll"===e||"scrollend"===e),f=c?null!==l?l+"Capture":null:l;c=[];for(var h,p=r;null!==p;){var m=p;if(h=m.stateNode,5!==(m=m.tag)&&26!==m&&27!==m||null===h||null===f||null!=(m=zt(p,f))&&c.push(Nc(p,m,h)),d)break;p=p.return}0<c.length&&(l=new s(l,u,null,n,a),i.push({event:l,listeners:c}))}}if(!(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===At||!(u=n.relatedTarget||n.fromElement)||!Ve(u)&&!u[je])&&(s||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?Ve(u):null)&&(d=z(u),c=u.tag,u!==d||5!==c&&27!==c&&6!==c)&&(u=null)):(s=null,u=r),s!==u)){if(c=tn,m="onMouseLeave",f="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(c=pn,m="onPointerLeave",f="onPointerEnter",p="pointer"),d=null==s?l:Je(s),h=null==u?l:Je(u),(l=new c(m,p+"leave",s,n,a)).target=d,l.relatedTarget=h,m=null,Ve(a)===r&&((c=new c(f,p+"enter",u,n,a)).target=h,c.relatedTarget=d,m=c),d=m,s&&u)e:{for(f=u,p=0,h=c=s;h;h=zc(h))p++;for(h=0,m=f;m;m=zc(m))h++;for(;0<p-h;)c=zc(c),p--;for(;0<h-p;)f=zc(f),h--;for(;p--;){if(c===f||null!==f&&c===f.alternate)break e;c=zc(c),f=zc(f)}c=null}else c=null;null!==s&&$c(i,l,s,c,!1),null!==u&&null!==d&&$c(i,d,u,c,!0)}if("select"===(s=(l=r?Je(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var y=zn;else if(Tn(l))if($n)y=Vn;else{y=qn;var v=Bn}else!(s=l.nodeName)||"input"!==s.toLowerCase()||"checkbox"!==l.type&&"radio"!==l.type?r&&Rt(r.elementType)&&(y=zn):y=Yn;switch(y&&(y=y(e,r))?_n(i,y,n,a):(v&&v(e,l,r),"focusout"===e&&r&&"number"===l.type&&null!=r.memoizedProps.value&&vt(l,"number",l.value)),v=r?Je(r):window,e){case"focusin":(Tn(v)||"true"===v.contentEditable)&&(nr=v,rr=r,ar=null);break;case"focusout":ar=rr=nr=null;break;case"mousedown":or=!0;break;case"contextmenu":case"mouseup":case"dragend":or=!1,ir(i,n,a);break;case"selectionchange":if(tr)break;case"keydown":case"keyup":ir(i,n,a)}var g;if(wn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Ln?Cn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(kn&&"ko"!==n.locale&&(Ln||"onCompositionStart"!==b?"onCompositionEnd"===b&&Ln&&(g=Ht()):(It="value"in(jt=a)?jt.value:jt.textContent,Ln=!0)),0<(v=Mc(r,b)).length&&(b=new ln(b,e,null,n,a),i.push({event:b,listeners:v}),(g||null!==(g=Pn(n)))&&(b.data=g))),(g=En?function(e,t){switch(e){case"compositionend":return Pn(t);case"keypress":return 32!==t.which?null:(Rn=!0,xn);case"textInput":return(e=t.data)===xn&&Rn?null:e;default:return null}}(e,n):function(e,t){if(Ln)return"compositionend"===e||!wn&&Cn(e,t)?(e=Ht(),Ut=It=jt=null,Ln=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return kn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(b=Mc(r,"onBeforeInput")).length&&(v=new ln("onBeforeInput","beforeinput",null,n,a),i.push({event:v,listeners:b}),v.data=g),function(e,t,n,r,a){if("submit"===t&&n&&n.stateNode===a){var o=Sc((a[Fe]||null).action),i=r.submitter;i&&null!==(t=(t=i[Fe]||null)?Sc(t.formAction):i.getAttribute("formAction"))&&(o=t,i=null);var l=new Gt("action","action",null,r,a);e.push({event:l,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==hc){var e=i?Ec(a,i):new FormData(a);ci(n,{pending:!0,data:e,method:a.method,action:o},null,e)}}else"function"==typeof o&&(l.preventDefault(),e=i?Ec(a,i):new FormData(a),ci(n,{pending:!0,data:e,method:a.method,action:o},o,e))},currentTarget:a}]})}}(i,e,r,n,a)}Pc(i,t)}))}function Nc(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Mc(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5!==(a=a.tag)&&26!==a&&27!==a||null===o||(null!=(a=zt(e,n))&&r.unshift(Nc(e,a,o)),null!=(a=zt(e,t))&&r.push(Nc(e,a,o))),e=e.return}return r}function zc(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function $c(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(l=l.tag,null!==s&&s===r)break;5!==l&&26!==l&&27!==l||null===u||(s=u,a?null!=(u=zt(n,o))&&i.unshift(Nc(n,u,s)):a||null!=(u=zt(n,o))&&i.push(Nc(n,u,s))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Fc=/\r\n?/g,jc=/\u0000|\uFFFD/g;function Ic(e){return("string"==typeof e?e:""+e).replace(Fc,"\n").replace(jc,"")}function Uc(e,t){return t=Ic(t),Ic(e)===t}function Hc(){}function Bc(e,t,n,r,a,o){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||St(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&St(e,""+r);break;case"className":it(e,"class",r);break;case"tabIndex":it(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":it(e,n,r);break;case"style":xt(e,r,o);break;case"data":if("object"!==t){it(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Lt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof o&&("formAction"===n?("input"!==t&&Bc(e,t,"name",a.name,a,null),Bc(e,t,"formEncType",a.formEncType,a,null),Bc(e,t,"formMethod",a.formMethod,a,null),Bc(e,t,"formTarget",a.formTarget,a,null)):(Bc(e,t,"encType",a.encType,a,null),Bc(e,t,"method",a.method,a,null),Bc(e,t,"target",a.target,a,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Lt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=Hc);break;case"onScroll":null!=r&&Lc("scroll",e);break;case"onScrollEnd":null!=r&&Lc("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(i(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(i(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=Lt(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":Lc("beforetoggle",e),Lc("toggle",e),ot(e,"popover",r);break;case"xlinkActuate":lt(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":lt(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":lt(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":lt(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":lt(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":lt(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":lt(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":lt(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":lt(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":ot(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&ot(e,n=Ct.get(n)||n,r)}}function qc(e,t,n,r,a,o){switch(n){case"style":xt(e,r,o);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(i(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(i(60));e.innerHTML=n}}break;case"children":"string"==typeof r?St(e,r):("number"==typeof r||"bigint"==typeof r)&&St(e,""+r);break;case"onScroll":null!=r&&Lc("scroll",e);break;case"onScrollEnd":null!=r&&Lc("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Hc);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Xe.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(a=n.endsWith("Capture"),t=n.slice(2,a?n.length-7:void 0),"function"==typeof(o=null!=(o=e[Fe]||null)?o[n]:null)&&e.removeEventListener(t,o,a),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):ot(e,n,r):("function"!=typeof o&&null!==o&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,a)))}}function Yc(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Lc("error",e),Lc("load",e);var r,a=!1,o=!1;for(r in n)if(n.hasOwnProperty(r)){var l=n[r];if(null!=l)switch(r){case"src":a=!0;break;case"srcSet":o=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(i(137,t));default:Bc(e,t,r,l,n,null)}}return o&&Bc(e,t,"srcSet",n.srcSet,n,null),void(a&&Bc(e,t,"src",n.src,n,null));case"input":Lc("invalid",e);var s=r=l=o=null,u=null,c=null;for(a in n)if(n.hasOwnProperty(a)){var d=n[a];if(null!=d)switch(a){case"name":o=d;break;case"type":l=d;break;case"checked":u=d;break;case"defaultChecked":c=d;break;case"value":r=d;break;case"defaultValue":s=d;break;case"children":case"dangerouslySetInnerHTML":if(null!=d)throw Error(i(137,t));break;default:Bc(e,t,a,d,n,null)}}return yt(e,r,s,u,c,l,o,!1),void ct(e);case"select":for(o in Lc("invalid",e),a=l=r=null,n)if(n.hasOwnProperty(o)&&null!=(s=n[o]))switch(o){case"value":r=s;break;case"defaultValue":l=s;break;case"multiple":a=s;default:Bc(e,t,o,s,n,null)}return t=r,n=l,e.multiple=!!a,void(null!=t?gt(e,!!a,t,!1):null!=n&&gt(e,!!a,n,!0));case"textarea":for(l in Lc("invalid",e),r=o=a=null,n)if(n.hasOwnProperty(l)&&null!=(s=n[l]))switch(l){case"value":a=s;break;case"defaultValue":o=s;break;case"children":r=s;break;case"dangerouslySetInnerHTML":if(null!=s)throw Error(i(91));break;default:Bc(e,t,l,s,n,null)}return wt(e,a,o,r),void ct(e);case"option":for(u in n)n.hasOwnProperty(u)&&null!=(a=n[u])&&("selected"===u?e.selected=a&&"function"!=typeof a&&"symbol"!=typeof a:Bc(e,t,u,a,n,null));return;case"dialog":Lc("cancel",e),Lc("close",e);break;case"iframe":case"object":Lc("load",e);break;case"video":case"audio":for(a=0;a<Rc.length;a++)Lc(Rc[a],e);break;case"image":Lc("error",e),Lc("load",e);break;case"details":Lc("toggle",e);break;case"embed":case"source":case"link":Lc("error",e),Lc("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in n)if(n.hasOwnProperty(c)&&null!=(a=n[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(i(137,t));default:Bc(e,t,c,a,n,null)}return;default:if(Rt(t)){for(d in n)n.hasOwnProperty(d)&&void 0!==(a=n[d])&&qc(e,t,d,a,n,void 0);return}}for(s in n)n.hasOwnProperty(s)&&null!=(a=n[s])&&Bc(e,t,s,a,n,null)}var Vc=null,Wc=null;function Jc(e){return 9===e.nodeType?e:e.ownerDocument}function Qc(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function Kc(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function Gc(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Xc=null,Zc="function"==typeof setTimeout?setTimeout:void 0,ed="function"==typeof clearTimeout?clearTimeout:void 0,td="function"==typeof Promise?Promise:void 0,nd="function"==typeof queueMicrotask?queueMicrotask:void 0!==td?function(e){return td.resolve(null).then(e).catch(rd)}:Zc;function rd(e){setTimeout((function(){throw e}))}function ad(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void hf(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);hf(t)}function od(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":od(n),Ye(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function id(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}function ld(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function sd(e,t,n){switch(t=Jc(n),e){case"html":if(!(e=t.documentElement))throw Error(i(452));return e;case"head":if(!(e=t.head))throw Error(i(453));return e;case"body":if(!(e=t.body))throw Error(i(454));return e;default:throw Error(i(451))}}var ud=new Map,cd=new Set;function dd(e){return"function"==typeof e.getRootNode?e.getRootNode():e.ownerDocument}var fd=U.d;U.d={f:function(){var e=fd.f(),t=$u();return e||t},r:function(e){var t=We(e);null!==t&&5===t.tag&&"form"===t.type?fi(t):fd.r(e)},D:function(e){fd.D(e),pd("dns-prefetch",e,null)},C:function(e,t){fd.C(e,t),pd("preconnect",e,t)},L:function(e,t,n){fd.L(e,t,n);var r=hd;if(r&&e&&t){var a='link[rel="preload"][as="'+pt(t)+'"]';"image"===t&&n&&n.imageSrcSet?(a+='[imagesrcset="'+pt(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(a+='[imagesizes="'+pt(n.imageSizes)+'"]')):a+='[href="'+pt(e)+'"]';var o=a;switch(t){case"style":o=yd(e);break;case"script":o=bd(e)}ud.has(o)||(e=T({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),ud.set(o,e),null!==r.querySelector(a)||"style"===t&&r.querySelector(vd(o))||"script"===t&&r.querySelector(wd(o))||(Yc(t=r.createElement("link"),"link",e),Ke(t),r.head.appendChild(t)))}},m:function(e,t){fd.m(e,t);var n=hd;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",a='link[rel="modulepreload"][as="'+pt(r)+'"][href="'+pt(e)+'"]',o=a;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":o=bd(e)}if(!ud.has(o)&&(e=T({rel:"modulepreload",href:e},t),ud.set(o,e),null===n.querySelector(a))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(wd(o)))return}Yc(r=n.createElement("link"),"link",e),Ke(r),n.head.appendChild(r)}}},X:function(e,t){fd.X(e,t);var n=hd;if(n&&e){var r=Qe(n).hoistableScripts,a=bd(e),o=r.get(a);o||((o=n.querySelector(wd(a)))||(e=T({src:e,async:!0},t),(t=ud.get(a))&&xd(e,t),Ke(o=n.createElement("script")),Yc(o,"link",e),n.head.appendChild(o)),o={type:"script",instance:o,count:1,state:null},r.set(a,o))}},S:function(e,t,n){fd.S(e,t,n);var r=hd;if(r&&e){var a=Qe(r).hoistableStyles,o=yd(e);t=t||"default";var i=a.get(o);if(!i){var l={loading:0,preload:null};if(i=r.querySelector(vd(o)))l.loading=5;else{e=T({rel:"stylesheet",href:e,"data-precedence":t},n),(n=ud.get(o))&&kd(e,n);var s=i=r.createElement("link");Ke(s),Yc(s,"link",e),s._p=new Promise((function(e,t){s.onload=e,s.onerror=t})),s.addEventListener("load",(function(){l.loading|=1})),s.addEventListener("error",(function(){l.loading|=2})),l.loading|=4,Ed(i,t,r)}i={type:"stylesheet",instance:i,count:1,state:l},a.set(o,i)}}},M:function(e,t){fd.M(e,t);var n=hd;if(n&&e){var r=Qe(n).hoistableScripts,a=bd(e),o=r.get(a);o||((o=n.querySelector(wd(a)))||(e=T({src:e,async:!0,type:"module"},t),(t=ud.get(a))&&xd(e,t),Ke(o=n.createElement("script")),Yc(o,"link",e),n.head.appendChild(o)),o={type:"script",instance:o,count:1,state:null},r.set(a,o))}}};var hd="undefined"==typeof document?null:document;function pd(e,t,n){var r=hd;if(r&&"string"==typeof t&&t){var a=pt(t);a='link[rel="'+e+'"][href="'+a+'"]',"string"==typeof n&&(a+='[crossorigin="'+n+'"]'),cd.has(a)||(cd.add(a),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(a)&&(Yc(t=r.createElement("link"),"link",e),Ke(t),r.head.appendChild(t)))}}function md(e,t,n,r){var a,o,l,s,u=(u=K.current)?dd(u):null;if(!u)throw Error(i(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=yd(n.href),(r=(n=Qe(u).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=yd(n.href);var c=Qe(u).hoistableStyles,d=c.get(e);if(d||(u=u.ownerDocument||u,d={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,d),(c=u.querySelector(vd(e)))&&!c._p&&(d.instance=c,d.state.loading=5),ud.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},ud.set(e,n),c||(a=u,o=e,l=n,s=d.state,a.querySelector('link[rel="preload"][as="style"]['+o+"]")?s.loading=1:(o=a.createElement("link"),s.preload=o,o.addEventListener("load",(function(){return s.loading|=1})),o.addEventListener("error",(function(){return s.loading|=2})),Yc(o,"link",l),Ke(o),a.head.appendChild(o))))),t&&null===r)throw Error(i(528,""));return d}if(t&&null!==r)throw Error(i(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=bd(n),(r=(n=Qe(u).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(i(444,e))}}function yd(e){return'href="'+pt(e)+'"'}function vd(e){return'link[rel="stylesheet"]['+e+"]"}function gd(e){return T({},e,{"data-precedence":e.precedence,precedence:null})}function bd(e){return'[src="'+pt(e)+'"]'}function wd(e){return"script[async]"+e}function Sd(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+pt(n.href)+'"]');if(r)return t.instance=r,Ke(r),r;var a=T({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return Ke(r=(e.ownerDocument||e).createElement("style")),Yc(r,"style",a),Ed(r,n.precedence,e),t.instance=r;case"stylesheet":a=yd(n.href);var o=e.querySelector(vd(a));if(o)return t.state.loading|=4,t.instance=o,Ke(o),o;r=gd(n),(a=ud.get(a))&&kd(r,a),Ke(o=(e.ownerDocument||e).createElement("link"));var l=o;return l._p=new Promise((function(e,t){l.onload=e,l.onerror=t})),Yc(o,"link",r),t.state.loading|=4,Ed(o,n.precedence,e),t.instance=o;case"script":return o=bd(n.src),(a=e.querySelector(wd(o)))?(t.instance=a,Ke(a),a):(r=n,(a=ud.get(o))&&xd(r=T({},n),a),Ke(a=(e=e.ownerDocument||e).createElement("script")),Yc(a,"link",r),e.head.appendChild(a),t.instance=a);case"void":return null;default:throw Error(i(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,Ed(r,n.precedence,e));return t.instance}function Ed(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),a=r.length?r[r.length-1]:null,o=a,i=0;i<r.length;i++){var l=r[i];if(l.dataset.precedence===t)o=l;else if(o!==a)break}o?o.parentNode.insertBefore(e,o.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function kd(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function xd(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var Rd=null;function Cd(e,t,n){if(null===Rd){var r=new Map,a=Rd=new Map;a.set(n,r)}else(r=(a=Rd).get(n))||(r=new Map,a.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),a=0;a<n.length;a++){var o=n[a];if(!(o[qe]||o[$e]||"link"===e&&"stylesheet"===o.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==o.namespaceURI){var i=o.getAttribute(t)||"";i=e+i;var l=r.get(i);l?l.push(o):r.set(i,[o])}}return r}function Pd(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Ld(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var Ad=null;function Td(){}function _d(){if(this.count--,0===this.count)if(this.stylesheets)Dd(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Od=null;function Dd(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Od=new Map,t.forEach(Nd,e),Od=null,_d.call(e))}function Nd(e,t){if(!(4&t.state.loading)){var n=Od.get(e);if(n)var r=n.get(null);else{n=new Map,Od.set(e,n);for(var a=e.querySelectorAll("link[data-precedence],style[data-precedence]"),o=0;o<a.length;o++){var i=a[o];"LINK"!==i.nodeName&&"not all"===i.getAttribute("media")||(n.set(i.dataset.precedence,i),r=i)}r&&n.set(null,r)}i=(a=t.instance).getAttribute("data-precedence"),(o=n.get(i)||r)===r&&n.set(null,a),n.set(i,a),this.count++,r=_d.bind(this),a.addEventListener("load",r),a.addEventListener("error",r),o?o.parentNode.insertBefore(a,o.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(a,e.firstChild),t.state.loading|=4}}var Md={$$typeof:m,Provider:null,Consumer:null,_currentValue:H,_currentValue2:H,_threadCount:0};function zd(e,t,n,r,a,o,i,l){this.tag=1,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Te(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.finishedLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Te(0),this.hiddenUpdates=Te(null),this.identifierPrefix=r,this.onUncaughtError=a,this.onCaughtError=o,this.onRecoverableError=i,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=l,this.incompleteTransitions=new Map}function $d(e,t,n,r,a,o){a=function(e){return e?e=_r:_r}(a),null===r.context?r.context=a:r.pendingContext=a,(r=Tl(t)).payload={element:n},null!==(o=void 0===o?null:o)&&(r.callback=o),null!==(n=_l(e,r,t))&&(_u(n,0,t),Ol(n,e,t))}function Fd(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function jd(e,t){Fd(e,t),(e=e.alternate)&&Fd(e,t)}function Id(e){if(13===e.tag){var t=Lr(e,67108864);null!==t&&_u(t,0,67108864),jd(e,67108864)}}var Ud=!0;function Hd(e,t,n,r){var a=A.T;A.T=null;var o=U.p;try{U.p=2,qd(e,t,n,r)}finally{U.p=o,A.T=a}}function Bd(e,t,n,r){var a=A.T;A.T=null;var o=U.p;try{U.p=8,qd(e,t,n,r)}finally{U.p=o,A.T=a}}function qd(e,t,n,r){if(Ud){var a=Yd(r);if(null===a)Dc(e,t,r,Vd,n),rf(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Kd=af(Kd,e,t,n,r,a),!0;case"dragenter":return Gd=af(Gd,e,t,n,r,a),!0;case"mouseover":return Xd=af(Xd,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return Zd.set(o,af(Zd.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,ef.set(o,af(ef.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(rf(e,r),4&t&&-1<nf.indexOf(e)){for(;null!==a;){var o=We(a);if(null!==o)switch(o.tag){case 3:if((o=o.stateNode).current.memoizedState.isDehydrated){var i=xe(o.pendingLanes);if(0!==i){var l=o;for(l.pendingLanes|=2,l.entangledLanes|=2;i;){var s=1<<31-be(i);l.entanglements[1]|=s,i&=~s}pc(o),!(6&Zs)&&(bu=le()+500,mc(0,!1))}}break;case 13:null!==(l=Lr(o,2))&&_u(l,0,2),$u(),jd(o,2)}if(null===(o=Yd(r))&&Dc(e,t,r,Vd,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else Dc(e,t,r,null,n)}}function Yd(e){return Wd(e=Tt(e))}var Vd=null;function Wd(e){if(Vd=null,null!==(e=Ve(e))){var t=z(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=$(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return Vd=e,null}function Jd(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(se()){case ue:return 2;case ce:return 8;case de:case fe:return 32;case he:return 268435456;default:return 32}default:return 32}}var Qd=!1,Kd=null,Gd=null,Xd=null,Zd=new Map,ef=new Map,tf=[],nf="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function rf(e,t){switch(e){case"focusin":case"focusout":Kd=null;break;case"dragenter":case"dragleave":Gd=null;break;case"mouseover":case"mouseout":Xd=null;break;case"pointerover":case"pointerout":Zd.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ef.delete(t.pointerId)}}function af(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=We(t))&&Id(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function of(e){var t=Ve(e.target);if(null!==t){var n=z(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=$(n)))return e.blockedOn=t,void function(e){var t=U.p;try{return U.p=e,function(){if(13===n.tag){var e=Au(),t=Lr(n,e);null!==t&&_u(t,0,e),jd(n,e)}}()}finally{U.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function lf(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Yd(e.nativeEvent);if(null!==n)return null!==(t=We(n))&&Id(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);At=r,n.target.dispatchEvent(r),At=null,t.shift()}return!0}function sf(e,t,n){lf(e)&&n.delete(t)}function uf(){Qd=!1,null!==Kd&&lf(Kd)&&(Kd=null),null!==Gd&&lf(Gd)&&(Gd=null),null!==Xd&&lf(Xd)&&(Xd=null),Zd.forEach(sf),ef.forEach(sf)}function cf(e,t){e.blockedOn===t&&(e.blockedOn=null,Qd||(Qd=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,uf)))}var df=null;function ff(e){df!==e&&(df=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,(function(){df===e&&(df=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],a=e[t+2];if("function"!=typeof r){if(null===Wd(r||n))continue;break}var o=We(n);null!==o&&(e.splice(t,3),t-=3,ci(o,{pending:!0,data:a,method:n.method,action:r},r,a))}})))}function hf(e){function t(t){return cf(t,e)}null!==Kd&&cf(Kd,e),null!==Gd&&cf(Gd,e),null!==Xd&&cf(Xd,e),Zd.forEach(t),ef.forEach(t);for(var n=0;n<tf.length;n++){var r=tf[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<tf.length&&null===(n=tf[0]).blockedOn;)of(n),null===n.blockedOn&&tf.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var a=n[r],o=n[r+1],i=a[Fe]||null;if("function"==typeof o)i||ff(n);else if(i){var l=null;if(o&&o.hasAttribute("formAction")){if(a=o,i=o[Fe]||null)l=i.formAction;else if(null!==Wd(a))continue}else l=i.action;"function"==typeof l?n[r+1]=l:(n.splice(r,3),r-=3),ff(n)}}}function pf(e){this._internalRoot=e}function mf(e){this._internalRoot=e}mf.prototype.render=pf.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));$d(t.current,Au(),e,t,null,null)},mf.prototype.unmount=pf.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;0===e.tag&&ec(),$d(e.current,2,null,e,null,null),$u(),t[je]=null}},mf.prototype.unstable_scheduleHydration=function(e){if(e){var t=Me();e={blockedOn:null,target:e,priority:t};for(var n=0;n<tf.length&&0!==t&&t<tf[n].priority;n++);tf.splice(n,0,e),0===n&&of(e)}};var yf=a.version;if("19.0.0"!==yf)throw Error(i(527,yf,"19.0.0"));U.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=z(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var o=a.alternate;if(null===o){if(null!==(r=a.return)){n=r;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===n)return F(a),e;if(o===r)return F(a),t;o=o.sibling}throw Error(i(188))}if(n.return!==r.return)n=a,r=o;else{for(var l=!1,s=a.child;s;){if(s===n){l=!0,n=a,r=o;break}if(s===r){l=!0,r=a,n=o;break}s=s.sibling}if(!l){for(s=o.child;s;){if(s===n){l=!0,n=o,r=a;break}if(s===r){l=!0,r=o,n=a;break}s=s.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?j(e):null)?null:e.stateNode};var vf={bundleType:0,version:"19.0.0",rendererPackageName:"react-dom",currentDispatcherRef:A,findFiberByHostInstance:Ve,reconcilerVersion:"19.0.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var gf=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!gf.isDisabled&&gf.supportsFiber)try{ye=gf.inject(vf),ve=gf}catch(e){}}t.createRoot=function(e,t){if(!(n=e)||1!==n.nodeType&&9!==n.nodeType&&11!==n.nodeType)throw Error(i(299));var n,r=!1,a="",o=Ni,l=Mi,s=zi;return null!=t&&(!0===t.unstable_strictMode&&(r=!0),void 0!==t.identifierPrefix&&(a=t.identifierPrefix),void 0!==t.onUncaughtError&&(o=t.onUncaughtError),void 0!==t.onCaughtError&&(l=t.onCaughtError),void 0!==t.onRecoverableError&&(s=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=function(e,t,n,r,a,o,i,l,s,u,c,d){return e=new zd(e,t,n,i,l,s,u,d),t=1,!0===o&&(t|=24),o=Ns(3,null,null,t),e.current=o,o.stateNode=e,(t=ja()).refCount++,e.pooledCache=t,t.refCount++,o.memoizedState={element:r,isDehydrated:n,cache:t},Ll(o),e}(e,1,!1,null,0,r,a,o,l,s,0,null),e[je]=t.current,_c(8===e.nodeType?e.parentNode:e),new pf(t)}},580:(e,t,n)=>{var r=n(471);function a(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function o(){}var i={d:{f:o,r:function(){throw Error(a(522))},D:o,C:o,L:o,m:o,X:o,S:o,M:o},p:0,findDOMNode:null},l=Symbol.for("react.portal"),s=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function u(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=i,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(a(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:l,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=s.T,n=i.p;try{if(s.T=null,i.p=2,e)return e()}finally{s.T=t,i.p=n,i.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,i.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&i.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=u(n,t.crossOrigin),a="string"==typeof t.integrity?t.integrity:void 0,o="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?i.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:a,fetchPriority:o}):"script"===n&&i.d.X(e,{crossOrigin:r,integrity:a,fetchPriority:o,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=u(t.as,t.crossOrigin);i.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&i.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=u(n,t.crossOrigin);i.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=u(t.as,t.crossOrigin);i.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else i.d.m(e)},t.requestFormReset=function(e){i.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return s.H.useFormState(e,t,n)},t.useFormStatus=function(){return s.H.useHostTransitionStatus()},t.version="19.0.0"},723:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(96)},834:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(580)},183:(e,t,n)=>{var r,a=Object.defineProperty,o=Object.getOwnPropertyDescriptor,i=Object.getOwnPropertyNames,l=Object.prototype.hasOwnProperty,s=(e,t,n,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let s of i(t))l.call(e,s)||s===n||a(e,s,{get:()=>t[s],enumerable:!(r=o(t,s))||r.enumerable});return e},u={};((e,t)=>{for(var n in t)a(e,n,{get:t[n],enumerable:!0})})(u,{HydratedRouter:()=>c.HydratedRouter,RouterProvider:()=>c.RouterProvider}),e.exports=(r=u,s(a({},"__esModule",{value:!0}),r));var c=n(405);((e,t,n)=>{s(e,t,"default"),n&&s(n,t,"default")})(u,n(77),e.exports)},405:(e,t,n)=>{var r,a=Object.create,o=Object.defineProperty,i=Object.getOwnPropertyDescriptor,l=Object.getOwnPropertyNames,s=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty,c=(e,t,n,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let a of l(t))u.call(e,a)||a===n||o(e,a,{get:()=>t[a],enumerable:!(r=i(t,a))||r.enumerable});return e},d=(e,t,n)=>(n=null!=e?a(s(e)):{},c(!t&&e&&e.__esModule?n:o(n,"default",{value:e,enumerable:!0}),e)),f={};((e,t)=>{for(var n in t)o(e,n,{get:t[n],enumerable:!0})})(f,{HydratedRouter:()=>vn,RouterProvider:()=>fn}),e.exports=(r=f,c(o({},"__esModule",{value:!0}),r));var h=d(n(471)),p=d(n(834)),m="popstate";function y(e={}){return function(e,t,n,r={}){let{window:a=document.defaultView,v5Compat:o=!1}=r,i=a.history,l="POP",s=null,u=c();function c(){return(i.state||{idx:null}).idx}function d(){l="POP";let e=c(),t=null==e?null:e-u;u=e,s&&s({action:l,location:h.location,delta:t})}function f(e){let t="null"!==a.location.origin?a.location.origin:a.location.href,n="string"==typeof e?e:S(e);return n=n.replace(/ $/,"%20"),v(t,`No window.location.(origin|href) available to create URL for href: ${n}`),new URL(n,t)}null==u&&(u=0,i.replaceState({...i.state,idx:u},""));let h={get action(){return l},get location(){return e(a,i)},listen(e){if(s)throw new Error("A history only accepts one active listener");return a.addEventListener(m,d),s=e,()=>{a.removeEventListener(m,d),s=null}},createHref:e=>t(a,e),createURL:f,encodeLocation(e){let t=f(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){l="PUSH";let r=w(h.location,e,t);n&&n(r,e),u=c()+1;let d=b(r,u),f=h.createHref(r);try{i.pushState(d,"",f)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;a.location.assign(f)}o&&s&&s({action:l,location:h.location,delta:1})},replace:function(e,t){l="REPLACE";let r=w(h.location,e,t);n&&n(r,e),u=c();let a=b(r,u),d=h.createHref(r);i.replaceState(a,"",d),o&&s&&s({action:l,location:h.location,delta:0})},go:e=>i.go(e)};return h}((function(e,t){let{pathname:n,search:r,hash:a}=e.location;return w("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:S(t)}),null,e)}function v(e,t){if(!1===e||null==e)throw new Error(t)}function g(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function b(e,t){return{usr:e.state,key:e.key,idx:t}}function w(e,t,n=null,r){return{pathname:"string"==typeof e?e:e.pathname,search:"",hash:"",..."string"==typeof t?E(t):t,state:n,key:t&&t.key||r||Math.random().toString(36).substring(2,10)}}function S({pathname:e="/",search:t="",hash:n=""}){return t&&"?"!==t&&(e+="?"===t.charAt(0)?t:"?"+t),n&&"#"!==n&&(e+="#"===n.charAt(0)?n:"#"+n),e}function E(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substring(n),e=e.substring(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substring(r),e=e.substring(0,r)),e&&(t.pathname=e)}return t}var k=new Set(["lazy","caseSensitive","path","id","index","children"]);function x(e,t,n=[],r={}){return e.map(((e,a)=>{let o=[...n,String(a)],i="string"==typeof e.id?e.id:o.join("-");if(v(!0!==e.index||!e.children,"Cannot specify children on an index route"),v(!r[i],`Found a route id collision on id "${i}".  Route id's must be globally unique within Data Router usages`),function(e){return!0===e.index}(e)){let n={...e,...t(e),id:i};return r[i]=n,n}{let n={...e,...t(e),id:i,children:void 0};return r[i]=n,e.children&&(n.children=x(e.children,t,o,r)),n}}))}function R(e,t,n="/"){return C(e,t,n,!1)}function C(e,t,n,r){let a=I(("string"==typeof t?E(t):t).pathname||"/",n);if(null==a)return null;let o=P(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let i=null;for(let e=0;null==i&&e<o.length;++e){let t=j(a);i=$(o[e],t,r)}return i}function P(e,t=[],n=[],r=""){let a=(e,a,o)=>{let i={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};i.relativePath.startsWith("/")&&(v(i.relativePath.startsWith(r),`Absolute route path "${i.relativePath}" nested under path "${r}" is not valid. An absolute child route path must start with the combined path of all its parent routes.`),i.relativePath=i.relativePath.slice(r.length));let l=B([r,i.relativePath]),s=n.concat(i);e.children&&e.children.length>0&&(v(!0!==e.index,`Index routes must not have child routes. Please remove all child routes from route path "${l}".`),P(e.children,t,s,l)),(null!=e.path||e.index)&&t.push({path:l,score:z(l,e.index),routesMeta:s})};return e.forEach(((e,t)=>{if(""!==e.path&&e.path?.includes("?"))for(let n of L(e.path))a(e,t,n);else a(e,t)})),t}function L(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,a=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===r.length)return a?[o,""]:[o];let i=L(r.join("/")),l=[];return l.push(...i.map((e=>""===e?o:[o,e].join("/")))),a&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}var A=/^:[\w-]+$/,T=3,_=2,O=1,D=10,N=-2,M=e=>"*"===e;function z(e,t){let n=e.split("/"),r=n.length;return n.some(M)&&(r+=N),t&&(r+=_),n.filter((e=>!M(e))).reduce(((e,t)=>e+(A.test(t)?T:""===t?O:D)),r)}function $(e,t,n=!1){let{routesMeta:r}=e,a={},o="/",i=[];for(let e=0;e<r.length;++e){let l=r[e],s=e===r.length-1,u="/"===o?t:t.slice(o.length)||"/",c=F({path:l.relativePath,caseSensitive:l.caseSensitive,end:s},u),d=l.route;if(!c&&s&&n&&!r[r.length-1].route.index&&(c=F({path:l.relativePath,caseSensitive:l.caseSensitive,end:!1},u)),!c)return null;Object.assign(a,c.params),i.push({params:a,pathname:B([o,c.pathname]),pathnameBase:q(B([o,c.pathnameBase])),route:d}),"/"!==c.pathnameBase&&(o=B([o,c.pathnameBase]))}return i}function F(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t=!1,n=!0){g("*"===e||!e.endsWith("*")||e.endsWith("/*"),`Route path "${e}" will be treated as if it were "${e.replace(/\*$/,"/*")}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${e.replace(/\*$/,"/*")}".`);let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],i=o.replace(/(.)\/+$/,"$1"),l=a.slice(1);return{params:r.reduce(((e,{paramName:t,isOptional:n},r)=>{if("*"===t){let e=l[r]||"";i=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}const a=l[r];return e[t]=n&&!a?void 0:(a||"").replace(/%2F/g,"/"),e}),{}),pathname:o,pathnameBase:i,pattern:e}}function j(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return g(!1,`The URL path "${e}" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding (${t}).`),e}}function I(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function U(e,t,n,r){return`Cannot include a '${e}' character in a manually specified \`to.${t}\` field [${JSON.stringify(r)}].  Please separate it out to the \`to.${n}\` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.`}function H(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}var B=e=>e.join("/").replace(/\/\/+/g,"/"),q=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),Y=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",V=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"",W=class{constructor(e,t){this.type="DataWithResponseInit",this.data=e,this.init=t||null}};var J=(e,t=302)=>{let n=t;"number"==typeof n?n={status:n}:void 0===n.status&&(n.status=302);let r=new Headers(n.headers);return r.set("Location",e),new Response(null,{...n,headers:r})},Q=class{constructor(e,t,n,r=!1){this.status=e,this.statusText=t||"",this.internal=r,n instanceof Error?(this.data=n.toString(),this.error=n):this.data=n}};function K(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}var G=["POST","PUT","PATCH","DELETE"],X=new Set(G),Z=["GET",...G],ee=new Set(Z),te=new Set([301,302,303,307,308]),ne=new Set([307,308]),re={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},ae={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},oe={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},ie=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,le=e=>({hasErrorBoundary:Boolean(e.hasErrorBoundary)}),se="remix-router-transitions",ue=Symbol("ResetLoaderData");function ce(e,t,n,r,a,o){let i,l;if(a){i=[];for(let e of t)if(i.push(e),e.route.id===a){l=e;break}}else i=t,l=t[t.length-1];let s=function(e,t,n,r=!1){let a;"string"==typeof e?a=E(e):(a={...e},v(!a.pathname||!a.pathname.includes("?"),U("?","pathname","search",a)),v(!a.pathname||!a.pathname.includes("#"),U("#","pathname","hash",a)),v(!a.search||!a.search.includes("#"),U("#","search","hash",a)));let o,i=""===e||""===a.pathname,l=i?"/":a.pathname;if(null==l)o=n;else{let e=t.length-1;if(!r&&l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}o=e>=0?t[e]:"/"}let s=function(e,t="/"){let{pathname:n,search:r="",hash:a=""}="string"==typeof e?E(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:Y(r),hash:V(a)}}(a,o),u=l&&"/"!==l&&l.endsWith("/"),c=(i||"."===l)&&n.endsWith("/");return s.pathname.endsWith("/")||!u&&!c||(s.pathname+="/"),s}(r||".",function(e){let t=H(e);return t.map(((e,n)=>n===t.length-1?e.pathname:e.pathnameBase))}(i),I(e.pathname,n)||e.pathname,"path"===o);if(null==r&&(s.search=e.search,s.hash=e.hash),(null==r||""===r||"."===r)&&l){let e=Ie(s.search);if(l.route.index&&!e)s.search=s.search?s.search.replace(/^\?/,"?index&"):"?index";else if(!l.route.index&&e){let e=new URLSearchParams(s.search),t=e.getAll("index");e.delete("index"),t.filter((e=>e)).forEach((t=>e.append("index",t)));let n=e.toString();s.search=n?`?${n}`:""}}return"/"!==n&&(s.pathname="/"===s.pathname?n:B([n,s.pathname])),S(s)}function de(e,t,n){if(!n||!function(e){return null!=e&&("formData"in e&&null!=e.formData||"body"in e&&void 0!==e.body)}(n))return{path:t};if(n.formMethod&&(r=n.formMethod,!ee.has(r.toUpperCase())))return{path:t,error:_e(405,{method:n.formMethod})};var r;let a,o,i=()=>({path:t,error:_e(400,{type:"invalid-body"})}),l=(n.formMethod||"get").toUpperCase(),s=De(t);if(void 0!==n.body){if("text/plain"===n.formEncType){if(!je(l))return i();let e="string"==typeof n.body?n.body:n.body instanceof FormData||n.body instanceof URLSearchParams?Array.from(n.body.entries()).reduce(((e,[t,n])=>`${e}${t}=${n}\n`),""):String(n.body);return{path:t,submission:{formMethod:l,formAction:s,formEncType:n.formEncType,formData:void 0,json:void 0,text:e}}}if("application/json"===n.formEncType){if(!je(l))return i();try{let e="string"==typeof n.body?JSON.parse(n.body):n.body;return{path:t,submission:{formMethod:l,formAction:s,formEncType:n.formEncType,formData:void 0,json:e,text:void 0}}}catch(e){return i()}}}if(v("function"==typeof FormData,"FormData is not available in this environment"),n.formData)a=xe(n.formData),o=n.formData;else if(n.body instanceof FormData)a=xe(n.body),o=n.body;else if(n.body instanceof URLSearchParams)a=n.body,o=Re(a);else if(null==n.body)a=new URLSearchParams,o=new FormData;else try{a=new URLSearchParams(n.body),o=Re(a)}catch(e){return i()}let u={formMethod:l,formAction:s,formEncType:n&&n.formEncType||"application/x-www-form-urlencoded",formData:o,json:void 0,text:void 0};if(je(u.formMethod))return{path:t,submission:u};let c=E(t);return e&&c.search&&Ie(c.search)&&a.append("index",""),c.search=`?${a}`,{path:S(c),submission:u}}function fe(e,t,n=!1){let r=e.findIndex((e=>e.route.id===t));return r>=0?e.slice(0,n?r+1:r):e}function he(e,t,n,r,a,o,i,l,s,u,c,d,f,h){let p=h?Me(h[1])?h[1].error:h[1].data:void 0,m=e.createURL(t.location),y=e.createURL(a),v=n;o&&t.errors?v=fe(n,Object.keys(t.errors)[0],!0):h&&Me(h[1])&&(v=fe(n,h[0]));let g=h?h[1].statusCode:void 0,b=g&&g>=400,w=v.filter(((e,n)=>{let{route:a}=e;if(a.lazy)return!0;if(null==a.loader)return!1;if(o)return pe(a,t.loaderData,t.errors);if(function(e,t,n){let r=!t||n.route.id!==t.route.id,a=!e.hasOwnProperty(n.route.id);return r||a}(t.loaderData,t.matches[n],e))return!0;let l=t.matches[n],s=e;return ye(e,{currentUrl:m,currentParams:l.params,nextUrl:y,nextParams:s.params,...r,actionResult:p,actionStatus:g,defaultShouldRevalidate:!b&&(i||m.pathname+m.search===y.pathname+y.search||m.search!==y.search||me(l,s))})})),S=[];return u.forEach(((e,a)=>{if(o||!n.some((t=>t.route.id===e.routeId))||s.has(a))return;let u=R(d,e.path,f);if(!u)return void S.push({key:a,routeId:e.routeId,path:e.path,matches:null,match:null,controller:null});let h=t.fetchers.get(a),v=Ue(u,e.path),w=!1;c.has(a)?w=!1:l.has(a)?(l.delete(a),w=!0):w=h&&"idle"!==h.state&&void 0===h.data?i:ye(v,{currentUrl:m,currentParams:t.matches[t.matches.length-1].params,nextUrl:y,nextParams:n[n.length-1].params,...r,actionResult:p,actionStatus:g,defaultShouldRevalidate:!b&&i}),w&&S.push({key:a,routeId:e.routeId,path:e.path,matches:u,match:v,controller:new AbortController})})),[w,S]}function pe(e,t,n){if(e.lazy)return!0;if(!e.loader)return!1;let r=null!=t&&void 0!==t[e.id],a=null!=n&&void 0!==n[e.id];return!(!r&&a)&&("function"==typeof e.loader&&!0===e.loader.hydrate||!r&&!a)}function me(e,t){let n=e.route.path;return e.pathname!==t.pathname||null!=n&&n.endsWith("*")&&e.params["*"]!==t.params["*"]}function ye(e,t){if(e.route.shouldRevalidate){let n=e.route.shouldRevalidate(t);if("boolean"==typeof n)return n}return t.defaultShouldRevalidate}function ve(e,t,n,r,a){let o;if(e){let t=r[e];v(t,`No route found to patch children into: routeId = ${e}`),t.children||(t.children=[]),o=t.children}else o=n;let i=x(t.filter((e=>!o.some((t=>ge(e,t))))),a,[e||"_","patch",String(o?.length||"0")],r);o.push(...i)}function ge(e,t){return"id"in e&&"id"in t&&e.id===t.id||e.index===t.index&&e.path===t.path&&e.caseSensitive===t.caseSensitive&&(!(e.children&&0!==e.children.length||t.children&&0!==t.children.length)||e.children.every(((e,n)=>t.children?.some((t=>ge(e,t))))))}async function be({matches:e}){let t=e.filter((e=>e.shouldLoad));return(await Promise.all(t.map((e=>e.resolve())))).reduce(((e,n,r)=>Object.assign(e,{[t[r].route.id]:n})),{})}async function we(e){let{result:t,type:n}=e;if(Fe(t)){let e;try{let n=t.headers.get("Content-Type");e=n&&/\bapplication\/json\b/.test(n)?null==t.body?null:await t.json():await t.text()}catch(e){return{type:"error",error:e}}return"error"===n?{type:"error",error:new Q(t.status,t.statusText,e),statusCode:t.status,headers:t.headers}:{type:"data",data:e,statusCode:t.status,headers:t.headers}}if("error"===n){if($e(t)){if(t.data instanceof Error)return{type:"error",error:t.data,statusCode:t.init?.status};t=new Q(t.init?.status||500,void 0,t.data)}return{type:"error",error:t,statusCode:K(t)?t.status:void 0}}return $e(t)?{type:"data",data:t.data,statusCode:t.init?.status,headers:t.init?.headers?new Headers(t.init.headers):void 0}:{type:"data",data:t}}function Se(e,t,n,r,a){let o=e.headers.get("Location");if(v(o,"Redirects returned/thrown from loaders/actions must have a Location header"),!ie.test(o)){let i=r.slice(0,r.findIndex((e=>e.route.id===n))+1);o=ce(new URL(t.url),i,a,o),e.headers.set("Location",o)}return e}function Ee(e,t,n){if(ie.test(e)){let r=e,a=r.startsWith("//")?new URL(t.protocol+r):new URL(r),o=null!=I(a.pathname,n);if(a.origin===t.origin&&o)return a.pathname+a.search+a.hash}return e}function ke(e,t,n,r){let a=e.createURL(De(t)).toString(),o={signal:n};if(r&&je(r.formMethod)){let{formMethod:e,formEncType:t}=r;o.method=e.toUpperCase(),"application/json"===t?(o.headers=new Headers({"Content-Type":t}),o.body=JSON.stringify(r.json)):"text/plain"===t?o.body=r.text:"application/x-www-form-urlencoded"===t&&r.formData?o.body=xe(r.formData):o.body=r.formData}return new Request(a,o)}function xe(e){let t=new URLSearchParams;for(let[n,r]of e.entries())t.append(n,"string"==typeof r?r:r.name);return t}function Re(e){let t=new FormData;for(let[n,r]of e.entries())t.append(n,r);return t}function Ce(e,t,n,r,a,o){let{loaderData:i,errors:l}=function(e,t,n,r=!1,a=!1){let o,i={},l=null,s=!1,u={},c=n&&Me(n[1])?n[1].error:void 0;return e.forEach((n=>{if(!(n.route.id in t))return;let d=n.route.id,f=t[d];if(v(!ze(f),"Cannot handle redirect results in processLoaderData"),Me(f)){let t=f.error;if(void 0!==c&&(t=c,c=void 0),l=l||{},a)l[d]=t;else{let n=Ae(e,d);null==l[n.route.id]&&(l[n.route.id]=t)}r||(i[d]=ue),s||(s=!0,o=K(f.error)?f.error.status:500),f.headers&&(u[d]=f.headers)}else i[d]=f.data,f.statusCode&&200!==f.statusCode&&!s&&(o=f.statusCode),f.headers&&(u[d]=f.headers)})),void 0!==c&&n&&(l={[n[0]]:c},i[n[0]]=void 0),{loaderData:i,errors:l,statusCode:o||200,loaderHeaders:u}}(t,n,r);return a.forEach((t=>{let{key:n,match:r,controller:a}=t,i=o[n];if(v(i,"Did not find corresponding fetcher result"),!a||!a.signal.aborted)if(Me(i)){let t=Ae(e.matches,r?.route.id);l&&l[t.route.id]||(l={...l,[t.route.id]:i.error}),e.fetchers.delete(n)}else if(ze(i))v(!1,"Unhandled fetcher revalidation redirect");else{let t=Ye(i.data);e.fetchers.set(n,t)}})),{loaderData:i,errors:l}}function Pe(e,t,n,r){let a=Object.entries(t).filter((([,e])=>e!==ue)).reduce(((e,[t,n])=>(e[t]=n,e)),{});for(let o of n){let n=o.route.id;if(!t.hasOwnProperty(n)&&e.hasOwnProperty(n)&&o.route.loader&&(a[n]=e[n]),r&&r.hasOwnProperty(n))break}return a}function Le(e){return e?Me(e[1])?{actionData:{}}:{actionData:{[e[0]]:e[1].data}}:{}}function Ae(e,t){return(t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e]).reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function Te(e){let t=1===e.length?e[0]:e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function _e(e,{pathname:t,routeId:n,method:r,type:a,message:o}={}){let i="Unknown Server Error",l="Unknown @remix-run/router error";return 400===e?(i="Bad Request",r&&t&&n?l=`You made a ${r} request to "${t}" but did not provide a \`loader\` for route "${n}", so there is no way to handle the request.`:"invalid-body"===a&&(l="Unable to encode submission body")):403===e?(i="Forbidden",l=`Route "${n}" does not match URL "${t}"`):404===e?(i="Not Found",l=`No route matches URL "${t}"`):405===e&&(i="Method Not Allowed",r&&t&&n?l=`You made a ${r.toUpperCase()} request to "${t}" but did not provide an \`action\` for route "${n}", so there is no way to handle the request.`:r&&(l=`Invalid request method "${r.toUpperCase()}"`)),new Q(e||500,i,new Error(l),!0)}function Oe(e){let t=Object.entries(e);for(let e=t.length-1;e>=0;e--){let[n,r]=t[e];if(ze(r))return{key:n,result:r}}}function De(e){return S({..."string"==typeof e?E(e):e,hash:""})}function Ne(e){return Fe(e.result)&&te.has(e.result.status)}function Me(e){return"error"===e.type}function ze(e){return"redirect"===(e&&e.type)}function $e(e){return"object"==typeof e&&null!=e&&"type"in e&&"data"in e&&"init"in e&&"DataWithResponseInit"===e.type}function Fe(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"object"==typeof e.headers&&void 0!==e.body}function je(e){return X.has(e.toUpperCase())}function Ie(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function Ue(e,t){let n="string"==typeof t?E(t).search:t.search;if(e[e.length-1].route.index&&Ie(n||""))return e[e.length-1];let r=H(e);return r[r.length-1]}function He(e){let{formMethod:t,formAction:n,formEncType:r,text:a,formData:o,json:i}=e;if(t&&n&&r)return null!=a?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:void 0,text:a}:null!=o?{formMethod:t,formAction:n,formEncType:r,formData:o,json:void 0,text:void 0}:void 0!==i?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:i,text:void 0}:void 0}function Be(e,t){return t?{state:"loading",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}:{state:"loading",location:e,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function qe(e,t){return e?{state:"loading",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t}}function Ye(e){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:e}}var Ve=d(n(471)),We=d(n(471)),Je=We.createContext(null);Je.displayName="DataRouter";var Qe=We.createContext(null);Qe.displayName="DataRouterState";var Ke=We.createContext({isTransitioning:!1});Ke.displayName="ViewTransition";var Ge=We.createContext(new Map);Ge.displayName="Fetchers",We.createContext(null).displayName="Await";var Xe=We.createContext(null);Xe.displayName="Navigation";var Ze=We.createContext(null);Ze.displayName="Location";var et=We.createContext({outlet:null,matches:[],isDataRoute:!1});et.displayName="Route";var tt=We.createContext(null);tt.displayName="RouteError";var nt=d(n(471));function rt(){return null!=nt.useContext(Ze)}function at(){let e=ut(),t=K(e)?`${e.status} ${e.statusText}`:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,r="rgba(200,200,200, 0.5)",a={padding:"0.5rem",backgroundColor:r},o={padding:"2px 4px",backgroundColor:r},i=null;return console.error("Error handled by React Router default ErrorBoundary:",e),i=nt.createElement(nt.Fragment,null,nt.createElement("p",null,"💿 Hey developer 👋"),nt.createElement("p",null,"You can provide a way better UX than this when your app throws errors by providing your own ",nt.createElement("code",{style:o},"ErrorBoundary")," or"," ",nt.createElement("code",{style:o},"errorElement")," prop on your route.")),nt.createElement(nt.Fragment,null,nt.createElement("h2",null,"Unexpected Application Error!"),nt.createElement("h3",{style:{fontStyle:"italic"}},t),n?nt.createElement("pre",{style:a},n):null,i)}nt.createContext(null);var ot=nt.createElement(at,null),it=class extends nt.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?nt.createElement(et.Provider,{value:this.props.routeContext},nt.createElement(tt.Provider,{value:this.state.error,children:this.props.component})):this.props.children}};function lt({routeContext:e,match:t,children:n}){let r=nt.useContext(Je);return r&&r.static&&r.staticContext&&(t.route.errorElement||t.route.ErrorBoundary)&&(r.staticContext._deepestRenderedBoundaryId=t.route.id),nt.createElement(et.Provider,{value:e},n)}function st(e){return`${e} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`}function ut(){let e=nt.useContext(tt),t=function(){let e=nt.useContext(Qe);return v(e,st("useRouteError")),e}(),n=function(e){let t=function(e){let t=nt.useContext(et);return v(t,st(e)),t}(e),n=t.matches[t.matches.length-1];return v(n.route.id,`${e} can only be used on routes that contain a unique "id"`),n.route.id}("useRouteError");return void 0!==e?e:t.errors?.[n]}var ct={};function dt(e,t,n){t||ct[e]||(ct[e]=!0,g(!1,n))}var ft={};function ht(e,t){e||ft[t]||(ft[t]=!0,console.warn(t))}var pt=!0;function mt(e){let t={hasErrorBoundary:e.hasErrorBoundary||null!=e.ErrorBoundary||null!=e.errorElement};return e.Component&&(pt&&e.element&&g(!1,"You should not include both `Component` and `element` on your route - `Component` will be used."),Object.assign(t,{element:Ve.createElement(e.Component),Component:void 0})),e.HydrateFallback&&(pt&&e.hydrateFallbackElement&&g(!1,"You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - `HydrateFallback` will be used."),Object.assign(t,{hydrateFallbackElement:Ve.createElement(e.HydrateFallback),HydrateFallback:void 0})),e.ErrorBoundary&&(pt&&e.errorElement&&g(!1,"You should not include both `ErrorBoundary` and `errorElement` on your route - `ErrorBoundary` will be used."),Object.assign(t,{errorElement:Ve.createElement(e.ErrorBoundary),ErrorBoundary:void 0})),t}var yt=class{constructor(){this.status="pending",this.promise=new Promise(((e,t)=>{this.resolve=t=>{"pending"===this.status&&(this.status="resolved",e(t))},this.reject=e=>{"pending"===this.status&&(this.status="rejected",t(e))}}))}};function vt({router:e,flushSync:t}){let[n,r]=Ve.useState(e.state),[a,o]=Ve.useState(),[i,l]=Ve.useState({isTransitioning:!1}),[s,u]=Ve.useState(),[c,d]=Ve.useState(),[f,h]=Ve.useState(),p=Ve.useRef(new Map),m=Ve.useCallback(((n,{deletedFetchers:a,flushSync:i,viewTransitionOpts:f})=>{a.forEach((e=>p.current.delete(e))),n.fetchers.forEach(((e,t)=>{void 0!==e.data&&p.current.set(t,e.data)})),ht(!1===i||null!=t,'You provided the `flushSync` option to a router update, but you are not using the `<RouterProvider>` from `react-router/dom` so `ReactDOM.flushSync()` is unavailable.  Please update your app to `import { RouterProvider } from "react-router/dom"` and ensure you have `react-dom` installed as a dependency to use the `flushSync` option.');let m=null!=e.window&&null!=e.window.document&&"function"==typeof e.window.document.startViewTransition;if(ht(null==f||m,"You provided the `viewTransition` option to a router update, but you do not appear to be running in a DOM environment as `window.startViewTransition` is not available."),f&&m){if(t&&i){t((()=>{c&&(s&&s.resolve(),c.skipTransition()),l({isTransitioning:!0,flushSync:!0,currentLocation:f.currentLocation,nextLocation:f.nextLocation})}));let a=e.window.document.startViewTransition((()=>{t((()=>r(n)))}));return a.finished.finally((()=>{t((()=>{u(void 0),d(void 0),o(void 0),l({isTransitioning:!1})}))})),void t((()=>d(a)))}c?(s&&s.resolve(),c.skipTransition(),h({state:n,currentLocation:f.currentLocation,nextLocation:f.nextLocation})):(o(n),l({isTransitioning:!0,flushSync:!1,currentLocation:f.currentLocation,nextLocation:f.nextLocation}))}else t&&i?t((()=>r(n))):Ve.startTransition((()=>r(n)))}),[e.window,t,c,s]);Ve.useLayoutEffect((()=>e.subscribe(m)),[e,m]),Ve.useEffect((()=>{i.isTransitioning&&!i.flushSync&&u(new yt)}),[i]),Ve.useEffect((()=>{if(s&&a&&e.window){let t=a,n=s.promise,i=e.window.document.startViewTransition((async()=>{Ve.startTransition((()=>r(t))),await n}));i.finished.finally((()=>{u(void 0),d(void 0),o(void 0),l({isTransitioning:!1})})),d(i)}}),[a,s,e.window]),Ve.useEffect((()=>{s&&a&&n.location.key===a.location.key&&s.resolve()}),[s,c,n.location,a]),Ve.useEffect((()=>{!i.isTransitioning&&f&&(o(f.state),l({isTransitioning:!0,flushSync:!1,currentLocation:f.currentLocation,nextLocation:f.nextLocation}),h(void 0))}),[i.isTransitioning,f]);let y=Ve.useMemo((()=>({createHref:e.createHref,encodeLocation:e.encodeLocation,go:t=>e.navigate(t),push:(t,n,r)=>e.navigate(t,{state:n,preventScrollReset:r?.preventScrollReset}),replace:(t,n,r)=>e.navigate(t,{replace:!0,state:n,preventScrollReset:r?.preventScrollReset})})),[e]),v=e.basename||"/",g=Ve.useMemo((()=>({router:e,navigator:y,static:!1,basename:v})),[e,y,v]);return Ve.createElement(Ve.Fragment,null,Ve.createElement(Je.Provider,{value:g},Ve.createElement(Qe.Provider,{value:n},Ve.createElement(Ge.Provider,{value:p.current},Ve.createElement(Ke.Provider,{value:i},Ve.createElement(bt,{basename:v,location:n.location,navigationType:n.historyAction,navigator:y},Ve.createElement(gt,{routes:e.routes,future:e.future,state:n})))))),null)}var gt=Ve.memo((function({routes:e,future:t,state:n}){return function(e,t,n){v(rt(),"useRoutes() may be used only in the context of a <Router> component.");let{navigator:r}=nt.useContext(Xe),{matches:a}=nt.useContext(et),o=a[a.length-1],i=o?o.params:{},l=o?o.pathname:"/",s=o?o.pathnameBase:"/",u=o&&o.route;{let e=u&&u.path||"";dt(l,!u||e.endsWith("*")||e.endsWith("*?"),`You rendered descendant <Routes> (or called \`useRoutes()\`) at "${l}" (under <Route path="${e}">) but the parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.\n\nPlease change the parent <Route path="${e}"> to <Route path="${"/"===e?"*":`${e}/*`}">.`)}let c,d=(v(rt(),"useLocation() may be used only in the context of a <Router> component."),nt.useContext(Ze).location);if(t){let e="string"==typeof t?E(t):t;v("/"===s||e.pathname?.startsWith(s),`When overriding the location using \`<Routes location>\` or \`useRoutes(routes, location)\`, the location pathname must begin with the portion of the URL pathname that was matched by all parent routes. The current pathname base is "${s}" but pathname "${e.pathname}" was given in the \`location\` prop.`),c=e}else c=d;let f=c.pathname||"/",h=f;if("/"!==s){let e=s.replace(/^\//,"").split("/");h="/"+f.replace(/^\//,"").split("/").slice(e.length).join("/")}let p=R(e,{pathname:h});g(u||null!=p,`No routes matched location "${c.pathname}${c.search}${c.hash}" `),g(null==p||void 0!==p[p.length-1].route.element||void 0!==p[p.length-1].route.Component||void 0!==p[p.length-1].route.lazy,`Matched leaf route at location "${c.pathname}${c.search}${c.hash}" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.`);let m=function(e,t=[],n=null){if(null==e){if(!n)return null;if(n.errors)e=n.matches;else{if(0!==t.length||n.initialized||!(n.matches.length>0))return null;e=n.matches}}let r=e,a=n?.errors;if(null!=a){let e=r.findIndex((e=>e.route.id&&void 0!==a?.[e.route.id]));v(e>=0,`Could not find a matching route for errors on route IDs: ${Object.keys(a).join(",")}`),r=r.slice(0,Math.min(r.length,e+1))}let o=!1,i=-1;if(n)for(let e=0;e<r.length;e++){let t=r[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(i=e),t.route.id){let{loaderData:e,errors:a}=n,l=t.route.loader&&!e.hasOwnProperty(t.route.id)&&(!a||void 0===a[t.route.id]);if(t.route.lazy||l){o=!0,r=i>=0?r.slice(0,i+1):[r[0]];break}}}return r.reduceRight(((e,l,s)=>{let u,c=!1,d=null,f=null;n&&(u=a&&l.route.id?a[l.route.id]:void 0,d=l.route.errorElement||ot,o&&(i<0&&0===s?(dt("route-fallback",!1,"No `HydrateFallback` element provided to render during initial hydration"),c=!0,f=null):i===s&&(c=!0,f=l.route.hydrateFallbackElement||null)));let h=t.concat(r.slice(0,s+1)),p=()=>{let t;return t=u?d:c?f:l.route.Component?nt.createElement(l.route.Component,null):l.route.element?l.route.element:e,nt.createElement(lt,{match:l,routeContext:{outlet:e,matches:h,isDataRoute:null!=n},children:t})};return n&&(l.route.ErrorBoundary||l.route.errorElement||0===s)?nt.createElement(it,{location:n.location,revalidation:n.revalidation,component:d,error:u,children:p(),routeContext:{outlet:null,matches:h,isDataRoute:!0}}):p()}),null)}(p&&p.map((e=>Object.assign({},e,{params:Object.assign({},i,e.params),pathname:B([s,r.encodeLocation?r.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?s:B([s,r.encodeLocation?r.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),a,n);return t&&m?nt.createElement(Ze.Provider,{value:{location:{pathname:"/",search:"",hash:"",state:null,key:"default",...c},navigationType:"POP"}},m):m}(e,void 0,n)}));function bt({basename:e="/",children:t=null,location:n,navigationType:r="POP",navigator:a,static:o=!1}){v(!rt(),"You cannot render a <Router> inside another <Router>. You should never have more than one in your app.");let i=e.replace(/^\/*/,"/"),l=Ve.useMemo((()=>({basename:i,navigator:a,static:o,future:{}})),[i,a,o]);"string"==typeof n&&(n=E(n));let{pathname:s="/",search:u="",hash:c="",state:d=null,key:f="default"}=n,h=Ve.useMemo((()=>{let e=I(s,i);return null==e?null:{location:{pathname:e,search:u,hash:c,state:d,key:f},navigationType:r}}),[i,s,u,c,d,f,r]);return g(null!=h,`<Router basename="${i}"> is not able to match the URL "${s}${u}${c}" because it does not start with the basename, so the <Router> won't render anything.`),null==h?null:Ve.createElement(Xe.Provider,{value:l},Ve.createElement(Ze.Provider,{children:t,value:h}))}var wt,St=d(n(471));function Et(e,t){if(!1===e||null==e)throw new Error(t)}async function kt(e,t){if(!e.css&&!t.links||!function(){if(void 0!==wt)return wt;let e=document.createElement("link");return wt=e.relList.supports("preload"),e=null,wt}())return;let n=[];if(e.css&&n.push(...e.css.map((e=>({rel:"stylesheet",href:e})))),t.links&&n.push(...t.links()),0===n.length)return;let r=[];for(let e of n)null!=(a=e)&&"string"==typeof a.page||"stylesheet"!==e.rel||r.push({...e,rel:"preload",as:"style"});var a;let o=r.filter((e=>(!e.media||window.matchMedia(e.media).matches)&&!document.querySelector(`link[rel="stylesheet"][href="${e.href}"]`)));await Promise.all(o.map(xt))}async function xt(e){return new Promise((t=>{let n=document.createElement("link");function r(){document.head.contains(n)&&document.head.removeChild(n)}Object.assign(n,e),n.onload=()=>{r(),t()},n.onerror=()=>{r(),t()},document.head.appendChild(n)}))}function Rt(e){return{__html:e}}d(n(471));var Ct=n(413);async function Pt(e){let t={signal:e.signal};if("GET"!==e.method){t.method=e.method;let n=e.headers.get("Content-Type");n&&/\bapplication\/json\b/.test(n)?(t.headers={"Content-Type":n},t.body=JSON.stringify(await e.json())):n&&/\btext\/plain\b/.test(n)?(t.headers={"Content-Type":n},t.body=await e.text()):n&&/\bapplication\/x-www-form-urlencoded\b/.test(n)?t.body=new URLSearchParams(await e.text()):t.body=await e.formData()}return t}var Lt=Symbol("SingleFetchRedirect");function At(e,t,n,r){return e((async()=>{let e=new URL(t);e.searchParams.set("_routes",r);let{data:a}=await Ot(e,n);return Nt(a,r)}))}function Tt(e){let t=e.searchParams.getAll("index");e.searchParams.delete("index");let n=[];for(let e of t)e&&n.push(e);for(let t of n)e.searchParams.append("index",t);return e}function _t(e){let t="string"==typeof e?new URL(e,"undefined"==typeof window?"server://singlefetch/":window.location.origin):e;return"/"===t.pathname?t.pathname="_root.data":t.pathname=`${t.pathname.replace(/\/$/,"")}.data`,t}async function Ot(e,t){let n=await fetch(e,t);if(404===n.status&&!n.headers.has("X-Remix-Response"))throw new Q(404,"Not Found",!0);Et(n.body,"No response body to decode");try{let e=await Dt(n.body,window);return{status:n.status,data:e.value}}catch(e){throw new Error("Unable to decode turbo-stream response")}}function Dt(e,t){return(0,Ct.decode)(e,{plugins:[(e,...n)=>{if("SanitizedError"===e){let[e,r,a]=n,o=Error;e&&e in t&&"function"==typeof t[e]&&(o=t[e]);let i=new o(r);return i.stack=a,{value:i}}if("ErrorResponse"===e){let[e,t,r]=n;return{value:new Q(t,r,e)}}return"SingleFetchRedirect"===e?{value:{[Lt]:n[0]}}:"SingleFetchClassInstance"===e?{value:n[0]}:"SingleFetchFallback"===e?{value:void 0}:void 0}]})}function Nt(e,t){let n=e[Lt];return n?Mt(n,t):void 0!==e[t]?Mt(e[t],t):null}function Mt(e,t){if("error"in e)throw e.error;if("redirect"in e){let t={};throw e.revalidate&&(t["X-Remix-Revalidate"]="yes"),e.reload&&(t["X-Remix-Reload-Document"]="yes"),e.replace&&(t["X-Remix-Replace"]="yes"),J(e.redirect,{status:e.status,headers:t})}if("data"in e)return e.data;throw new Error(`No response found for routeId "${t}"`)}function zt(){let e,t,n=new Promise(((r,a)=>{e=async e=>{r(e);try{await n}catch(e){}},t=async e=>{a(e);try{await n}catch(e){}}}));return{promise:n,resolve:e,reject:t}}var $t=d(n(471)),Ft=d(n(471)),jt=d(n(471)),It=class extends jt.Component{constructor(e){super(e),this.state={error:e.error||null,location:e.location}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location?{error:e.error||null,location:e.location}:{error:e.error||t.error,location:t.location}}render(){return this.state.error?jt.createElement(Ut,{error:this.state.error,isOutsideRemixApp:!0}):this.props.children}};function Ut({error:e,isOutsideRemixApp:t}){console.error(e);let n,r=jt.createElement("script",{dangerouslySetInnerHTML:{__html:'\n        console.log(\n          "💿 Hey developer 👋. You can provide a way better UX than this when your app throws errors. Check out https://remix.run/guides/errors for more information."\n        );\n      '}});if(K(e))return jt.createElement(Ht,{title:"Unhandled Thrown Response!"},jt.createElement("h1",{style:{fontSize:"24px"}},e.status," ",e.statusText),r);if(e instanceof Error)n=e;else{let t=null==e?"Unknown Error":"object"==typeof e&&"toString"in e?e.toString():JSON.stringify(e);n=new Error(t)}return jt.createElement(Ht,{title:"Application Error!",isOutsideRemixApp:t},jt.createElement("h1",{style:{fontSize:"24px"}},"Application Error"),jt.createElement("pre",{style:{padding:"2rem",background:"hsla(10, 50%, 50%, 0.1)",color:"red",overflow:"auto"}},n.stack),r)}function Ht({title:e,renderScripts:t,isOutsideRemixApp:n,children:r}){let{routeModules:a}=un();return a.root?.Layout&&!n?r:jt.createElement("html",{lang:"en"},jt.createElement("head",null,jt.createElement("meta",{charSet:"utf-8"}),jt.createElement("meta",{name:"viewport",content:"width=device-width,initial-scale=1,viewport-fit=cover"}),jt.createElement("title",null,e)),jt.createElement("body",null,jt.createElement("main",{style:{fontFamily:"system-ui, sans-serif",padding:"2rem"}},r,t?jt.createElement(dn,null):null)))}var Bt=d(n(471));function qt(){return Bt.createElement(Ht,{title:"Loading...",renderScripts:!0},Bt.createElement("script",{dangerouslySetInnerHTML:{__html:'\n              console.log(\n                "💿 Hey developer 👋. You can provide a way better UX than this " +\n                "when your app is loading JS modules and/or running `clientLoader` " +\n                "functions. Check out https://remix.run/route/hydrate-fallback " +\n                "for more information."\n              );\n            '}}))}function Yt(e){let t={};return Object.values(e).forEach((e=>{if(e){let n=e.parentId||"";t[n]||(t[n]=[]),t[n].push(e)}})),t}function Vt(e,t,n){let r=Xt(t),a=!t.HydrateFallback||n&&"root"!==e.id?"root"===e.id?qt:void 0:t.HydrateFallback,o=t.ErrorBoundary?t.ErrorBoundary:"root"===e.id?()=>Ft.createElement(Ut,{error:ut()}):void 0;return"root"===e.id&&t.Layout?{...r?{element:Ft.createElement(t.Layout,null,Ft.createElement(r,null))}:{Component:r},...o?{errorElement:Ft.createElement(t.Layout,null,Ft.createElement(o,null))}:{ErrorBoundary:o},...a?{hydrateFallbackElement:Ft.createElement(t.Layout,null,Ft.createElement(a,null))}:{HydrateFallback:a}}:{Component:r,ErrorBoundary:o,HydrateFallback:a}}function Wt(e,t,n,r,a,o){return Kt(t,n,r,o,"",Yt(t),e)}function Jt(e,t,n){if(n){let n=`You cannot call ${"action"===e?"serverAction()":"serverLoader()"} in SPA Mode (routeId: "${t.id}")`;throw console.error(n),new Q(400,"Bad Request",new Error(n),!0)}let r=`You are trying to call ${"action"===e?"serverAction()":"serverLoader()"} on a route that does not have a server ${e} (routeId: "${t.id}")`;if("loader"===e&&!t.hasLoader||"action"===e&&!t.hasAction)throw console.error(r),new Q(400,"Bad Request",new Error(r),!0)}function Qt(e,t){let n="clientAction"===e?"a":"an",r=`Route "${t}" does not have ${n} ${e}, but you are trying to submit to it. To fix this, please add ${n} \`${e}\` function to the route`;throw console.error(r),new Q(405,"Method Not Allowed",new Error(r),!0)}function Kt(e,t,n,r,a="",o=Yt(e),i){return(o[a]||[]).map((a=>{let l=t[a.id];function s(e){return Et("function"==typeof e,"No single fetch function available for route handler"),e()}function u(e){return a.hasLoader?s(e):Promise.resolve(null)}function c(e){if(!a.hasAction)throw Qt("action",a.id);return s(e)}async function d(e){let n=t[a.id],r=n?kt(a,n):Promise.resolve();try{return e()}finally{await r}}let f={id:a.id,index:a.index,path:a.path};if(l){Object.assign(f,{...f,...Vt(a,l,r),handle:l.handle,shouldRevalidate:Gt(l,a.id,i)});let e=n&&n.loaderData&&a.id in n.loaderData,t=e?n?.loaderData?.[a.id]:void 0,o=n&&n.errors&&a.id in n.errors,s=o?n?.errors?.[a.id]:void 0,h=null==i&&(!0===l.clientLoader?.hydrate||!a.hasLoader);f.loader=async({request:n,params:i},c)=>{try{return await d((async()=>(Et(l,"No `routeModule` available for critical-route loader"),l.clientLoader?l.clientLoader({request:n,params:i,async serverLoader(){if(Jt("loader",a,r),h){if(e)return t;if(o)throw s}return u(c)}}):r?null:u(c))))}finally{h=!1}},f.loader.hydrate=Zt(a,l,r),f.action=({request:e,params:t},n)=>d((async()=>{if(Et(l,"No `routeModule` available for critical-route action"),!l.clientAction){if(r)throw Qt("clientAction",a.id);return c(n)}return l.clientAction({request:e,params:t,serverAction:async()=>(Jt("action",a,r),c(n))})}))}else a.hasClientLoader||(f.loader=({request:e},t)=>d((()=>r?Promise.resolve(null):u(t)))),a.hasClientAction||(f.action=({request:e},t)=>d((()=>{if(r)throw Qt("clientAction",a.id);return c(t)}))),f.lazy=async()=>{let e=await async function(e,t){let n=await async function(e,t){if(e.id in t)return t[e.id];try{let n=await import(e.module);return t[e.id]=n,n}catch(t){return console.error(`Error loading route module \`${e.module}\`, reloading page...`),console.error(t),window.__reactRouterContext&&window.__reactRouterContext.isSpaMode,window.location.reload(),new Promise((()=>{}))}}(e,t);return await kt(e,n),{Component:Xt(n),ErrorBoundary:n.ErrorBoundary,clientAction:n.clientAction,clientLoader:n.clientLoader,handle:n.handle,links:n.links,meta:n.meta,shouldRevalidate:n.shouldRevalidate}}(a,t),n={...e};if(e.clientLoader){let t=e.clientLoader;n.loader=(e,n)=>t({...e,serverLoader:async()=>(Jt("loader",a,r),u(n))})}if(e.clientAction){let t=e.clientAction;n.action=(e,n)=>t({...e,serverAction:async()=>(Jt("action",a,r),c(n))})}return{...n.loader?{loader:n.loader}:{},...n.action?{action:n.action}:{},hasErrorBoundary:n.hasErrorBoundary,shouldRevalidate:Gt(n,a.id,i),handle:n.handle,Component:n.Component,ErrorBoundary:n.ErrorBoundary}};let h=Kt(e,t,n,r,a.id,o,i);return h.length>0&&(f.children=h),f}))}function Gt(e,t,n){if(n)return function(e,t,n){let r=!1;return a=>r?t?t(a):a.defaultShouldRevalidate:(r=!0,n.has(e))}(t,e.shouldRevalidate,n);if(e.shouldRevalidate){let t=e.shouldRevalidate;return e=>t({...e,defaultShouldRevalidate:!0})}return e.shouldRevalidate}function Xt(e){if(null!=e.default)return"object"==typeof e.default&&0===Object.keys(e.default).length?void 0:e.default}function Zt(e,t,n){return n&&"root"!==e.id||null!=t.clientLoader&&(!0===t.clientLoader.hydrate||!0!==e.hasLoader)}var en=new Set,tn=1e3,nn=new Set,rn=7680;function an(e){return!e}function on(e,t,n,r){if(an(n))return async({path:a,patch:o})=>{nn.has(a)||await ln([a],e,t,n,r,o)}}async function ln(e,t,n,r,a,o){let i=`${null!=a?a:"/"}/__manifest`.replace(/\/+/g,"/"),l=new URL(i,window.location.origin);if(e.sort().forEach((e=>l.searchParams.append("p",e))),l.searchParams.set("version",t.version),l.toString().length>rn)return void en.clear();let s=await fetch(l);if(!s.ok)throw new Error(`${s.status} ${s.statusText}`);if(s.status>=400)throw new Error(await s.text());let u=await s.json(),c=new Set(Object.keys(t.routes)),d=Object.values(u).reduce(((e,t)=>(t&&!c.has(t.id)&&(e[t.id]=t),e)),{});Object.assign(t.routes,d),e.forEach((e=>function(e,t){if(t.size>=tn){let e=t.values().next().value;t.delete(e)}t.add(e)}(e,nn)));let f=new Set;Object.values(d).forEach((e=>{!e||e.parentId&&d[e.parentId]||f.add(e.parentId)})),f.forEach((e=>o(e||null,Kt(d,n,null,r,e))))}var sn=St.createContext(void 0);function un(){let e=St.useContext(sn);return Et(e,"You must render this element inside a <HydratedRouter> element"),e}sn.displayName="FrameworkContext";var cn=!1;function dn(e){let{manifest:t,serverHandoffString:n,isSpaMode:r,renderMeta:a}=un(),{router:o,static:i,staticContext:l}=function(){let e=St.useContext(Je);return Et(e,"You must render this element inside a <DataRouterContext.Provider> element"),e}(),{matches:s}=function(){let e=St.useContext(Qe);return Et(e,"You must render this element inside a <DataRouterStateContext.Provider> element"),e}(),u=an(r);a&&(a.didRenderScripts=!0);let c=function(e,t,n){return n&&!cn?[e[0]]:e}(s,0,r);St.useEffect((()=>{cn=!0}),[]);let d=St.useMemo((()=>{let r=l?`window.__reactRouterContext = ${n};window.__reactRouterContext.stream = new ReadableStream({start(controller){window.__reactRouterContext.streamController = controller;}}).pipeThrough(new TextEncoderStream());`:" ",a=i?`${t.hmr?.runtime?`import ${JSON.stringify(t.hmr.runtime)};`:""}${u?"":`import ${JSON.stringify(t.url)}`};\n${c.map(((e,n)=>`import * as route${n} from ${JSON.stringify(t.routes[e.route.id].module)};`)).join("\n")}\n  ${u?`window.__reactRouterManifest = ${JSON.stringify(function(e,t){let n=new Set(t.state.matches.map((e=>e.route.id))),r=t.state.location.pathname.split("/").filter(Boolean),a=["/"];for(r.pop();r.length>0;)a.push(`/${r.join("/")}`),r.pop();a.forEach((e=>{let r=R(t.routes,e,t.basename);r&&r.forEach((e=>n.add(e.route.id)))}));let o=[...n].reduce(((t,n)=>Object.assign(t,{[n]:e.routes[n]})),{});return{...e,routes:o}}(t,o),null,2)};`:""}\n  window.__reactRouterRouteModules = {${c.map(((e,t)=>`${JSON.stringify(e.route.id)}:route${t}`)).join(",")}};\n\nimport(${JSON.stringify(t.entry.module)});`:" ";return St.createElement(St.Fragment,null,St.createElement("script",{...e,suppressHydrationWarning:!0,dangerouslySetInnerHTML:Rt(r),type:void 0}),St.createElement("script",{...e,suppressHydrationWarning:!0,dangerouslySetInnerHTML:Rt(a),type:"module",async:!0}))}),[]),f=c.map((e=>{let n=t.routes[e.route.id];return n?(n.imports||[]).concat([n.module]):[]})).flat(1),h=cn?[]:t.entry.imports.concat(f);return cn?null:St.createElement(St.Fragment,null,u?null:St.createElement("link",{rel:"modulepreload",href:t.url,crossOrigin:e.crossOrigin}),St.createElement("link",{rel:"modulepreload",href:t.entry.module,crossOrigin:e.crossOrigin}),(p=h,[...new Set(p)]).map((t=>St.createElement("link",{key:t,rel:"modulepreload",href:t,crossOrigin:e.crossOrigin}))),d);var p}function fn(e){return h.createElement(vt,{flushSync:p.flushSync,...e})}var hn=d(n(471)),pn=null,mn=null;function yn(){if(!pn&&window.__reactRouterContext&&window.__reactRouterManifest&&window.__reactRouterRouteModules&&(pn={context:window.__reactRouterContext,manifest:window.__reactRouterManifest,routeModules:window.__reactRouterRouteModules,stateDecodingPromise:void 0,router:void 0,routerInitialized:!1}),!pn)throw new Error("You must be using the SSR features of React Router in order to skip passing a `router` prop to `<RouterProvider>`");let e=pn;if(!pn.stateDecodingPromise){let t=pn.context.stream;v(t,"No stream found for single fetch decoding"),pn.context.stream=void 0,pn.stateDecodingPromise=Dt(t,window).then((t=>{pn.context.state=t.value,e.stateDecodingPromise.value=!0})).catch((t=>{e.stateDecodingPromise.error=t}))}if(pn.stateDecodingPromise.error)throw pn.stateDecodingPromise.error;if(!pn.stateDecodingPromise.value)throw pn.stateDecodingPromise;let t,n=Kt(pn.manifest.routes,pn.routeModules,pn.context.state,pn.context.isSpaMode);if(!pn.context.isSpaMode){t={...pn.context.state,loaderData:{...pn.context.state.loaderData}};let e=R(n,window.location,window.__reactRouterContext?.basename);if(e)for(let n of e){let e=n.route.id,r=pn.routeModules[e],a=pn.manifest.routes[e];r&&a&&Zt(a,r,pn.context.isSpaMode)&&(r.HydrateFallback||!a.hasLoader)?delete t.loaderData[e]:a&&!a.hasLoader&&(t.loaderData[e]=null)}t&&t.errors&&(t.errors=function(e){if(!e)return null;let t=Object.entries(e),n={};for(let[e,r]of t)if(r&&"RouteErrorResponse"===r.__type)n[e]=new Q(r.status,r.statusText,r.data,!0===r.internal);else if(r&&"Error"===r.__type){if(r.__subType){let t=window[r.__subType];if("function"==typeof t)try{let a=new t(r.message);a.stack=r.stack,n[e]=a}catch(e){}}if(null==n[e]){let t=new Error(r.message);t.stack=r.stack,n[e]=t}}else n[e]=r;return n}(t.errors))}let r=function(e){const t=e.window?e.window:"undefined"!=typeof window?window:void 0,n=void 0!==t&&void 0!==t.document&&void 0!==t.document.createElement;v(e.routes.length>0,"You must provide a non-empty routes array to createRouter");let r,a,o,i=e.mapRouteProperties||le,l={},s=x(e.routes,i,void 0,l),u=e.basename||"/",c=e.dataStrategy||be,d=e.patchRoutesOnNavigation,f={...e.future},h=null,p=new Set,m=null,y=null,b=null,S=null!=e.hydrationData,E=R(s,e.history.location,u),P=null;if(null==E&&!d){let t=_e(404,{pathname:e.history.location.pathname}),{matches:n,route:r}=Te(s);E=n,P={[r.id]:t}}if(E&&!e.hydrationData&&Xe(E,s,e.history.location.pathname).active&&(E=null),E)if(E.some((e=>e.route.lazy)))a=!1;else if(E.some((e=>e.route.loader))){let t=e.hydrationData?e.hydrationData.loaderData:null,n=e.hydrationData?e.hydrationData.errors:null;if(n){let e=E.findIndex((e=>void 0!==n[e.route.id]));a=E.slice(0,e+1).every((e=>!pe(e.route,t,n)))}else a=E.every((e=>!pe(e.route,t,n)))}else a=!0;else{a=!1,E=[];let t=Xe(null,s,e.history.location.pathname);t.active&&t.matches&&(E=t.matches)}let L,A,T={historyAction:e.history.action,location:e.history.location,matches:E,initialized:a,navigation:re,restoreScrollPosition:null==e.hydrationData&&null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||P,fetchers:new Map,blockers:new Map},_="POP",O=!1,D=!1,N=new Map,M=null,z=!1,$=!1,F=new Set,j=new Map,U=0,H=-1,B=new Map,q=new Set,Y=new Map,V=new Map,W=new Set,J=new Map,Q=null;function G(e,t={}){T={...T,...e};let n=[],r=[];T.fetchers.forEach(((e,t)=>{"idle"===e.state&&(W.has(t)?n.push(t):r.push(t))})),[...p].forEach((e=>e(T,{deletedFetchers:n,viewTransitionOpts:t.viewTransitionOpts,flushSync:!0===t.flushSync}))),n.forEach((e=>Re(e))),r.forEach((e=>T.fetchers.delete(e)))}function X(t,n,{flushSync:a}={}){let o,i=null!=T.actionData&&null!=T.navigation.formMethod&&je(T.navigation.formMethod)&&"loading"===T.navigation.state&&!0!==t.state?._isRedirect;o=n.actionData?Object.keys(n.actionData).length>0?n.actionData:null:i?T.actionData:null;let l=n.loaderData?Pe(T.loaderData,n.loaderData,n.matches||[],n.errors):T.loaderData,u=T.blockers;u.size>0&&(u=new Map(u),u.forEach(((e,t)=>u.set(t,oe))));let c,d=!0===O||null!=T.navigation.formMethod&&je(T.navigation.formMethod)&&!0!==t.state?._isRedirect;if(r&&(s=r,r=void 0),z||"POP"===_||("PUSH"===_?e.history.push(t,t.state):"REPLACE"===_&&e.history.replace(t,t.state)),"POP"===_){let e=N.get(T.location.pathname);e&&e.has(t.pathname)?c={currentLocation:T.location,nextLocation:t}:N.has(t.pathname)&&(c={currentLocation:t,nextLocation:T.location})}else if(D){let e=N.get(T.location.pathname);e?e.add(t.pathname):(e=new Set([t.pathname]),N.set(T.location.pathname,e)),c={currentLocation:T.location,nextLocation:t}}G({...n,actionData:o,loaderData:l,historyAction:_,location:t,initialized:!0,navigation:re,revalidation:"idle",restoreScrollPosition:Ge(t,n.matches||T.matches),preventScrollReset:d,blockers:u},{viewTransitionOpts:c,flushSync:!0===a}),_="POP",O=!1,D=!1,z=!1,$=!1,Q?.resolve(),Q=null}async function Z(t,n,a){L&&L.abort(),L=null,_=t,z=!0===(a&&a.startUninterruptedRevalidation),function(e,t){if(m&&b){let n=Ke(e,t);m[n]=b()}}(T.location,T.matches),O=!0===(a&&a.preventScrollReset),D=!0===(a&&a.enableViewTransition);let o=r||s,i=a&&a.overrideNavigation,l=R(o,n,u),c=!0===(a&&a.flushSync),d=Xe(l,o,n.pathname);if(d.active&&d.matches&&(l=d.matches),!l){let{error:e,notFoundMatches:t,route:r}=Qe(n.pathname);return void X(n,{matches:t,loaderData:{},errors:{[r.id]:e}},{flushSync:c})}if(T.initialized&&!$&&(h=n,(f=T.location).pathname===h.pathname&&f.search===h.search&&(""===f.hash?""!==h.hash:f.hash===h.hash||""!==h.hash))&&!(a&&a.submission&&je(a.submission.formMethod)))return void X(n,{matches:l},{flushSync:c});var f,h;L=new AbortController;let p,y=ke(e.history,n,L.signal,a&&a.submission);if(a&&a.pendingError)p=[Ae(l).route.id,{type:"error",error:a.pendingError}];else if(a&&a.submission&&je(a.submission.formMethod)){let t=await async function(e,t,n,r,a,o={}){me();let i,l=function(e,t){return{state:"submitting",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}}(t,n);if(G({navigation:l},{flushSync:!0===o.flushSync}),a){let n=await Ze(r,t.pathname,e.signal);if("aborted"===n.type)return{shortCircuited:!0};if("error"===n.type){let e=Ae(n.partialMatches).route.id;return{matches:n.partialMatches,pendingActionResult:[e,{type:"error",error:n.error}]}}if(!n.matches){let{notFoundMatches:e,error:n,route:r}=Qe(t.pathname);return{matches:e,pendingActionResult:[r.id,{type:"error",error:n}]}}r=n.matches}let s=Ue(r,t);if(s.route.action||s.route.lazy){if(i=(await ue("action",0,e,[s],r,null))[s.route.id],e.signal.aborted)return{shortCircuited:!0}}else i={type:"error",error:_e(405,{method:e.method,pathname:t.pathname,routeId:s.route.id})};if(ze(i)){let t;return t=o&&null!=o.replace?o.replace:Ee(i.response.headers.get("Location"),new URL(e.url),u)===T.location.pathname+T.location.search,await te(e,i,!0,{submission:n,replace:t}),{shortCircuited:!0}}if(Me(i)){let e=Ae(r,s.route.id);return!0!==(o&&o.replace)&&(_="PUSH"),{matches:r,pendingActionResult:[e.route.id,i]}}return{matches:r,pendingActionResult:[s.route.id,i]}}(y,n,a.submission,l,d.active,{replace:a.replace,flushSync:c});if(t.shortCircuited)return;if(t.pendingActionResult){let[e,r]=t.pendingActionResult;if(Me(r)&&K(r.error)&&404===r.error.status)return L=null,void X(n,{matches:t.matches,loaderData:{},errors:{[e]:r.error}})}l=t.matches||l,p=t.pendingActionResult,i=Be(n,a.submission),c=!1,d.active=!1,y=ke(e.history,y.url,y.signal)}let{shortCircuited:v,matches:g,loaderData:w,errors:S}=await async function(t,n,a,o,i,l,c,d,f,h,p){let m=i||Be(n,l),y=l||c||He(m),v=!z&&!f;if(o){if(v){let e=ee(p);G({navigation:m,...void 0!==e?{actionData:e}:{}},{flushSync:h})}let e=await Ze(a,n.pathname,t.signal);if("aborted"===e.type)return{shortCircuited:!0};if("error"===e.type){let t=Ae(e.partialMatches).route.id;return{matches:e.partialMatches,loaderData:{},errors:{[t]:e.error}}}if(!e.matches){let{error:e,notFoundMatches:t,route:r}=Qe(n.pathname);return{matches:t,loaderData:{},errors:{[r.id]:e}}}a=e.matches}let g=r||s,[b,w]=he(e.history,T,a,y,n,!0===f,$,F,W,Y,q,g,u,p);if(H=++U,0===b.length&&0===w.length){let e=Fe();return X(n,{matches:a,loaderData:{},errors:p&&Me(p[1])?{[p[0]]:p[1].error}:null,...Le(p),...e?{fetchers:new Map(T.fetchers)}:{}},{flushSync:h}),{shortCircuited:!0}}if(v){let e={};if(!o){e.navigation=m;let t=ee(p);void 0!==t&&(e.actionData=t)}w.length>0&&(e.fetchers=function(e){return e.forEach((e=>{let t=T.fetchers.get(e.key),n=qe(void 0,t?t.data:void 0);T.fetchers.set(e.key,n)})),new Map(T.fetchers)}(w)),G(e,{flushSync:h})}w.forEach((e=>{De(e.key),e.controller&&j.set(e.key,e.controller)}));let S=()=>w.forEach((e=>De(e.key)));L&&L.signal.addEventListener("abort",S);let{loaderResults:E,fetcherResults:k}=await fe(0,a,b,w,t);if(t.signal.aborted)return{shortCircuited:!0};L&&L.signal.removeEventListener("abort",S),w.forEach((e=>j.delete(e.key)));let x=Oe(E);if(x)return await te(t,x.result,!0,{replace:d}),{shortCircuited:!0};if(x=Oe(k),x)return q.add(x.key),await te(t,x.result,!0,{replace:d}),{shortCircuited:!0};let{loaderData:R,errors:C}=Ce(T,a,E,p,w,k);f&&T.errors&&(C={...T.errors,...C});let P=Fe(),A=Ie(H);return{matches:a,loaderData:R,errors:C,...P||A||w.length>0?{fetchers:new Map(T.fetchers)}:{}}}(y,n,l,d.active,i,a&&a.submission,a&&a.fetcherSubmission,a&&a.replace,a&&!0===a.initialHydration,c,p);v||(L=null,X(n,{matches:g||l,...Le(p),loaderData:w,errors:S}))}function ee(e){return e&&!Me(e[1])?{[e[0]]:e[1].data}:T.actionData?0===Object.keys(T.actionData).length?null:T.actionData:void 0}async function te(r,a,o,{submission:i,fetcherSubmission:l,preventScrollReset:s,replace:c}={}){a.response.headers.has("X-Remix-Revalidate")&&($=!0);let d=a.response.headers.get("Location");v(d,"Expected a Location header on the redirect Response"),d=Ee(d,new URL(r.url),u);let f=w(T.location,d,{_isRedirect:!0});if(n){let n=!1;if(a.response.headers.has("X-Remix-Reload-Document"))n=!0;else if(ie.test(d)){const r=e.history.createURL(d);n=r.origin!==t.location.origin||null==I(r.pathname,u)}if(n)return void(c?t.location.replace(d):t.location.assign(d))}L=null;let h=!0===c||a.response.headers.has("X-Remix-Replace")?"REPLACE":"PUSH",{formMethod:p,formAction:m,formEncType:y}=T.navigation;!i&&!l&&p&&m&&y&&(i=He(T.navigation));let g=i||l;if(ne.has(a.response.status)&&g&&je(g.formMethod))await Z(h,f,{submission:{...g,formAction:d},preventScrollReset:s||O,enableViewTransition:o?D:void 0});else{let e=Be(f,i);await Z(h,f,{overrideNavigation:e,fetcherSubmission:l,preventScrollReset:s||O,enableViewTransition:o?D:void 0})}}async function ue(e,t,n,r,a,o){let s,d={};try{s=await async function(e,t,n,r,a,o,i,l,s,u){let c=o.map((e=>e.route.lazy?async function(e,t,n){if(!e.lazy)return;let r=await e.lazy();if(!e.lazy)return;let a=n[e.id];v(a,"No route found in manifest");let o={};for(let e in r){let t=void 0!==a[e]&&"hasErrorBoundary"!==e;g(!t,`Route "${a.id}" has a static property "${e}" defined but its lazy function is also returning a value for this property. The lazy route property "${e}" will be ignored.`),t||k.has(e)||(o[e]=r[e])}Object.assign(a,o),Object.assign(a,{...t(a),lazy:void 0})}(e.route,s,l):void 0)),d=o.map(((e,n)=>{let o=c[n],i=a.some((t=>t.route.id===e.route.id));return{...e,shouldLoad:i,resolve:async n=>(n&&"GET"===r.method&&(e.route.lazy||e.route.loader)&&(i=!0),i?async function(e,t,n,r,a,o){let i,l,s=r=>{let i,s=new Promise(((e,t)=>i=t));l=()=>i(),t.signal.addEventListener("abort",l);let u=a=>"function"!=typeof r?Promise.reject(new Error(`You cannot call the handler for a route which defines a boolean "${e}" [routeId: ${n.route.id}]`)):r({request:t,params:n.params,context:o},...void 0!==a?[a]:[]),c=(async()=>{try{return{type:"data",result:await(a?a((e=>u(e))):u())}}catch(e){return{type:"error",result:e}}})();return Promise.race([c,s])};try{let a=n.route[e];if(r)if(a){let e,[t]=await Promise.all([s(a).catch((t=>{e=t})),r]);if(void 0!==e)throw e;i=t}else{if(await r,a=n.route[e],!a){if("action"===e){let e=new URL(t.url),r=e.pathname+e.search;throw _e(405,{method:t.method,pathname:r,routeId:n.route.id})}return{type:"data",result:void 0}}i=await s(a)}else{if(!a){let e=new URL(t.url);throw _e(404,{pathname:e.pathname+e.search})}i=await s(a)}}catch(e){return{type:"error",result:e}}finally{l&&t.signal.removeEventListener("abort",l)}return i}(t,r,e,o,n,u):Promise.resolve({type:"data",result:void 0}))}})),f=await e({matches:d,request:r,params:o[0].params,fetcherKey:i,context:u});try{await Promise.all(c)}catch(e){}return f}(c,e,0,n,r,a,o,l,i)}catch(e){return r.forEach((t=>{d[t.route.id]={type:"error",error:e}})),d}for(let[e,t]of Object.entries(s))if(Ne(t)){let r=t.result;d[e]={type:"redirect",response:Se(r,n,e,a,u)}}else d[e]=await we(t);return d}async function fe(t,n,r,a,o){let i=ue("loader",0,o,r,n,null),l=Promise.all(a.map((async t=>{if(t.matches&&t.match&&t.controller){let n=(await ue("loader",0,ke(e.history,t.path,t.controller.signal),[t.match],t.matches,t.key))[t.match.route.id];return{[t.key]:n}}return Promise.resolve({[t.key]:{type:"error",error:_e(404,{pathname:t.path})}})})));return{loaderResults:await i,fetcherResults:(await l).reduce(((e,t)=>Object.assign(e,t)),{})}}function me(){$=!0,Y.forEach(((e,t)=>{j.has(t)&&F.add(t),De(t)}))}function ye(e,t,n={}){T.fetchers.set(e,t),G({fetchers:new Map(T.fetchers)},{flushSync:!0===(n&&n.flushSync)})}function ge(e,t,n,r={}){let a=Ae(T.matches,t);Re(e),G({errors:{[a.route.id]:n},fetchers:new Map(T.fetchers)},{flushSync:!0===(r&&r.flushSync)})}function xe(e){return V.set(e,(V.get(e)||0)+1),W.has(e)&&W.delete(e),T.fetchers.get(e)||ae}function Re(e){let t=T.fetchers.get(e);!j.has(e)||t&&"loading"===t.state&&B.has(e)||De(e),Y.delete(e),B.delete(e),q.delete(e),W.delete(e),F.delete(e),T.fetchers.delete(e)}function De(e){let t=j.get(e);t&&(t.abort(),j.delete(e))}function $e(e){for(let t of e){let e=Ye(xe(t).data);T.fetchers.set(t,e)}}function Fe(){let e=[],t=!1;for(let n of q){let r=T.fetchers.get(n);v(r,`Expected fetcher: ${n}`),"loading"===r.state&&(q.delete(n),e.push(n),t=!0)}return $e(e),t}function Ie(e){let t=[];for(let[n,r]of B)if(r<e){let e=T.fetchers.get(n);v(e,`Expected fetcher: ${n}`),"loading"===e.state&&(De(n),B.delete(n),t.push(n))}return $e(t),t.length>0}function Ve(e){T.blockers.delete(e),J.delete(e)}function We(e,t){let n=T.blockers.get(e)||oe;v("unblocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"proceeding"===t.state||"blocked"===n.state&&"unblocked"===t.state||"proceeding"===n.state&&"unblocked"===t.state,`Invalid blocker state transition: ${n.state} -> ${t.state}`);let r=new Map(T.blockers);r.set(e,t),G({blockers:r})}function Je({currentLocation:e,nextLocation:t,historyAction:n}){if(0===J.size)return;J.size>1&&g(!1,"A router only supports one blocker at a time");let r=Array.from(J.entries()),[a,o]=r[r.length-1],i=T.blockers.get(a);return i&&"proceeding"===i.state?void 0:o({currentLocation:e,nextLocation:t,historyAction:n})?a:void 0}function Qe(e){let t=_e(404,{pathname:e}),n=r||s,{matches:a,route:o}=Te(n);return{notFoundMatches:a,route:o,error:t}}function Ke(e,t){return y&&y(e,t.map((e=>function(e,t){let{route:n,pathname:r,params:a}=e;return{id:n.id,pathname:r,params:a,data:t[n.id],handle:n.handle}}(e,T.loaderData))))||e.key}function Ge(e,t){if(m){let n=Ke(e,t),r=m[n];if("number"==typeof r)return r}return null}function Xe(e,t,n){if(d){if(!e)return{active:!0,matches:C(t,n,u,!0)||[]};if(Object.keys(e[0].params).length>0)return{active:!0,matches:C(t,n,u,!0)}}return{active:!1,matches:null}}async function Ze(e,t,n){if(!d)return{type:"success",matches:e};let a=e;for(;;){let e=null==r,o=r||s,c=l;try{await d({path:t,matches:a,patch:(e,t)=>{n.aborted||ve(e,t,o,c,i)}})}catch(e){return{type:"error",error:e,partialMatches:a}}finally{e&&!n.aborted&&(s=[...s])}if(n.aborted)return{type:"aborted"};let f=R(o,t,u);if(f)return{type:"success",matches:f};let h=C(o,t,u,!0);if(!h||a.length===h.length&&a.every(((e,t)=>e.route.id===h[t].route.id)))return{type:"success",matches:null};a=h}}return o={get basename(){return u},get future(){return f},get state(){return T},get routes(){return s},get window(){return t},initialize:function(){if(h=e.history.listen((({action:t,location:n,delta:r})=>{if(A)return A(),void(A=void 0);g(0===J.size||null!=r,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let a=Je({currentLocation:T.location,nextLocation:n,historyAction:t});if(a&&null!=r){let t=new Promise((e=>{A=e}));return e.history.go(-1*r),void We(a,{state:"blocked",location:n,proceed(){We(a,{state:"proceeding",proceed:void 0,reset:void 0,location:n}),t.then((()=>e.history.go(r)))},reset(){let e=new Map(T.blockers);e.set(a,oe),G({blockers:e})}})}return Z(t,n)})),n){!function(e,t){try{let n=e.sessionStorage.getItem(se);if(n){let e=JSON.parse(n);for(let[n,r]of Object.entries(e||{}))r&&Array.isArray(r)&&t.set(n,new Set(r||[]))}}catch(e){}}(t,N);let e=()=>function(e,t){if(t.size>0){let n={};for(let[e,r]of t)n[e]=[...r];try{e.sessionStorage.setItem(se,JSON.stringify(n))}catch(e){g(!1,`Failed to save applied view transitions in sessionStorage (${e}).`)}}}(t,N);t.addEventListener("pagehide",e),M=()=>t.removeEventListener("pagehide",e)}return T.initialized||Z("POP",T.location,{initialHydration:!0}),o},subscribe:function(e){return p.add(e),()=>p.delete(e)},enableScrollRestoration:function(e,t,n){if(m=e,b=t,y=n||null,!S&&T.navigation===re){S=!0;let e=Ge(T.location,T.matches);null!=e&&G({restoreScrollPosition:e})}return()=>{m=null,b=null,y=null}},navigate:async function t(n,r){if("number"==typeof n)return void e.history.go(n);let a=ce(T.location,T.matches,u,n,r?.fromRouteId,r?.relative),{path:o,submission:i,error:l}=de(!1,a,r),s=T.location,c=w(T.location,o,r&&r.state);c={...c,...e.history.encodeLocation(c)};let d=r&&null!=r.replace?r.replace:void 0,f="PUSH";!0===d?f="REPLACE":!1===d||null!=i&&je(i.formMethod)&&i.formAction===T.location.pathname+T.location.search&&(f="REPLACE");let h=r&&"preventScrollReset"in r?!0===r.preventScrollReset:void 0,p=!0===(r&&r.flushSync),m=Je({currentLocation:s,nextLocation:c,historyAction:f});m?We(m,{state:"blocked",location:c,proceed(){We(m,{state:"proceeding",proceed:void 0,reset:void 0,location:c}),t(n,r)},reset(){let e=new Map(T.blockers);e.set(m,oe),G({blockers:e})}}):await Z(f,c,{submission:i,pendingError:l,preventScrollReset:h,replace:r&&r.replace,enableViewTransition:r&&r.viewTransition,flushSync:p})},fetch:async function(t,n,a,o){De(t);let i=!0===(o&&o.flushSync),l=r||s,c=ce(T.location,T.matches,u,a,n,o?.relative),d=R(l,c,u),f=Xe(d,l,c);if(f.active&&f.matches&&(d=f.matches),!d)return void ge(t,n,_e(404,{pathname:c}),{flushSync:i});let{path:h,submission:p,error:m}=de(!0,c,o);if(m)return void ge(t,n,m,{flushSync:i});let y=Ue(d,h),g=!0===(o&&o.preventScrollReset);p&&je(p.formMethod)?await async function(t,n,a,o,i,l,c,d,f){function h(e){if(!e.route.action&&!e.route.lazy){let e=_e(405,{method:f.formMethod,pathname:a,routeId:n});return ge(t,n,e,{flushSync:c}),!0}return!1}if(me(),Y.delete(t),!l&&h(o))return;let p=T.fetchers.get(t);ye(t,function(e,t){return{state:"submitting",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t?t.data:void 0}}(f,p),{flushSync:c});let m=new AbortController,y=ke(e.history,a,m.signal,f);if(l){let e=await Ze(i,a,y.signal);if("aborted"===e.type)return;if("error"===e.type)return void ge(t,n,e.error,{flushSync:c});if(!e.matches)return void ge(t,n,_e(404,{pathname:a}),{flushSync:c});if(h(o=Ue(i=e.matches,a)))return}j.set(t,m);let g=U,b=(await ue("action",0,y,[o],i,t))[o.route.id];if(y.signal.aborted)return void(j.get(t)===m&&j.delete(t));if(W.has(t)){if(ze(b)||Me(b))return void ye(t,Ye(void 0))}else{if(ze(b))return j.delete(t),H>g?void ye(t,Ye(void 0)):(q.add(t),ye(t,qe(f)),te(y,b,!1,{fetcherSubmission:f,preventScrollReset:d}));if(Me(b))return void ge(t,n,b.error)}let w=T.navigation.location||T.location,S=ke(e.history,w,m.signal),E=r||s,k="idle"!==T.navigation.state?R(E,T.navigation.location,u):T.matches;v(k,"Didn't find any matches after fetcher action");let x=++U;B.set(t,x);let C=qe(f,b.data);T.fetchers.set(t,C);let[P,A]=he(e.history,T,k,f,w,!1,$,F,W,Y,q,E,u,[o.route.id,b]);A.filter((e=>e.key!==t)).forEach((e=>{let t=e.key,n=T.fetchers.get(t),r=qe(void 0,n?n.data:void 0);T.fetchers.set(t,r),De(t),e.controller&&j.set(t,e.controller)})),G({fetchers:new Map(T.fetchers)});let O=()=>A.forEach((e=>De(e.key)));m.signal.addEventListener("abort",O);let{loaderResults:D,fetcherResults:N}=await fe(0,k,P,A,S);if(m.signal.aborted)return;m.signal.removeEventListener("abort",O),B.delete(t),j.delete(t),A.forEach((e=>j.delete(e.key)));let M=Oe(D);if(M)return te(S,M.result,!1,{preventScrollReset:d});if(M=Oe(N),M)return q.add(M.key),te(S,M.result,!1,{preventScrollReset:d});let{loaderData:z,errors:I}=Ce(T,k,D,void 0,A,N);if(T.fetchers.has(t)){let e=Ye(b.data);T.fetchers.set(t,e)}Ie(x),"loading"===T.navigation.state&&x>H?(v(_,"Expected pending action"),L&&L.abort(),X(T.navigation.location,{matches:k,loaderData:z,errors:I,fetchers:new Map(T.fetchers)})):(G({errors:I,loaderData:Pe(T.loaderData,z,k,I),fetchers:new Map(T.fetchers)}),$=!1)}(t,n,h,y,d,f.active,i,g,p):(Y.set(t,{routeId:n,path:h}),await async function(t,n,r,a,o,i,l,s,u){let c=T.fetchers.get(t);ye(t,qe(u,c?c.data:void 0),{flushSync:l});let d=new AbortController,f=ke(e.history,r,d.signal);if(i){let e=await Ze(o,r,f.signal);if("aborted"===e.type)return;if("error"===e.type)return void ge(t,n,e.error,{flushSync:l});if(!e.matches)return void ge(t,n,_e(404,{pathname:r}),{flushSync:l});a=Ue(o=e.matches,r)}j.set(t,d);let h=U,p=(await ue("loader",0,f,[a],o,t))[a.route.id];if(j.get(t)===d&&j.delete(t),!f.signal.aborted){if(!W.has(t))return ze(p)?H>h?void ye(t,Ye(void 0)):(q.add(t),void await te(f,p,!1,{preventScrollReset:s})):void(Me(p)?ge(t,n,p.error):ye(t,Ye(p.data)));ye(t,Ye(void 0))}}(t,n,h,y,d,f.active,i,g,p))},revalidate:function(){Q||(Q=function(){let e,t,n=new Promise(((r,a)=>{e=async e=>{r(e);try{await n}catch(e){}},t=async e=>{a(e);try{await n}catch(e){}}}));return{promise:n,resolve:e,reject:t}}()),me(),G({revalidation:"loading"});let e=Q.promise;return"submitting"===T.navigation.state?e:"idle"===T.navigation.state?(Z(T.historyAction,T.location,{startUninterruptedRevalidation:!0}),e):(Z(_||T.historyAction,T.navigation.location,{overrideNavigation:T.navigation,enableViewTransition:!0===D}),e)},createHref:t=>e.history.createHref(t),encodeLocation:t=>e.history.encodeLocation(t),getFetcher:xe,deleteFetcher:function(e){let t=(V.get(e)||0)-1;t<=0?(V.delete(e),W.add(e)):V.set(e,t),G({fetchers:new Map(T.fetchers)})},dispose:function(){h&&h(),M&&M(),p.clear(),L&&L.abort(),T.fetchers.forEach(((e,t)=>Re(t))),T.blockers.forEach(((e,t)=>Ve(t)))},getBlocker:function(e,t){let n=T.blockers.get(e)||oe;return J.get(e)!==t&&J.set(e,t),n},deleteBlocker:Ve,patchRoutes:function(e,t){let n=null==r;ve(e,t,r||s,l,i),n&&(s=[...s],G({}))},_internalFetchControllers:j,_internalSetRoutes:function(e){l={},r=x(e,i,void 0,l)}},o}({routes:n,history:y(),basename:pn.context.basename,hydrationData:t,mapRouteProperties:mt,dataStrategy:(a=pn.manifest,o=pn.routeModules,i=()=>r,async({request:e,matches:t,fetcherKey:n})=>"GET"!==e.method?async function(e,t){let n=t.find((e=>e.shouldLoad));Et(n,"No action match found");let r,a=await n.resolve((async t=>await t((async()=>{let t=_t(e.url),a=await Pt(e),{data:o,status:i}=await Ot(t,a);return r=i,Mt(o,n.route.id)}))));return Fe(a.result)||K(a.result)?{[n.route.id]:a}:{[n.route.id]:{type:a.type,result:(o=a.result,i=r,new W(o,"number"==typeof i?{status:i}:i))}};var o,i}(e,t):n?async function(e,t){let n=t.find((e=>e.shouldLoad));Et(n,"No fetcher match found");let r=await n.resolve((async t=>At(t,Tt(_t(e.url)),await Pt(e),n.route.id)));return{[n.route.id]:r}}(e,t):async function(e,t,n,r,a){let o=new Set,i=!1,l=a.map((()=>zt())),s=Promise.all(l.map((e=>e.promise))),u=zt(),c=Tt(_t(r.url)),d=await Pt(r),f={},h=Promise.all(a.map((async(r,a)=>r.resolve((async s=>{l[a].resolve();let h=e.routes[r.route.id];if(!r.shouldLoad){if(!n.state.initialized)return;if(r.route.id in n.state.loaderData&&h&&h.hasLoader&&t[r.route.id]?.shouldRevalidate)return void(i=!0)}if(h&&h.hasClientLoader){h.hasLoader&&(i=!0);try{let e=await At(s,c,d,r.route.id);f[r.route.id]={type:"data",result:e}}catch(e){f[r.route.id]={type:"error",result:e}}}else{h&&h.hasLoader&&o.add(r.route.id);try{let e=await s((async()=>Nt(await u.promise,r.route.id)));f[r.route.id]={type:"data",result:e}}catch(e){f[r.route.id]={type:"error",result:e}}}})))));if(await s,n.state.initialized&&0!==o.size||window.__reactRouterHdrActive)try{i&&o.size>0&&c.searchParams.set("_routes",a.filter((e=>o.has(e.route.id))).map((e=>e.route.id)).join(","));let e=await Ot(c,d);u.resolve(e.data)}catch(e){u.reject(e)}else u.resolve({});return await h,f}(a,o,i(),e,t)),patchRoutesOnNavigation:on(pn.manifest,pn.routeModules,pn.context.isSpaMode,pn.context.basename)});var a,o,i;return pn.router=r,r.state.initialized&&(pn.routerInitialized=!0,r.initialize()),r.createRoutesForHMR=Wt,window.__reactRouterDataRouter=r,r}function vn(){mn||(mn=yn());let[e,t]=hn.useState(void 0),[n,r]=hn.useState(mn.state.location);return hn.useLayoutEffect((()=>{pn&&pn.router&&!pn.routerInitialized&&(pn.routerInitialized=!0,pn.router.initialize())}),[]),hn.useLayoutEffect((()=>{if(pn&&pn.router)return pn.router.subscribe((e=>{e.location!==n&&r(e.location)}))}),[n]),v(pn,"ssrInfo unavailable for HydratedRouter"),a=mn,o=pn.manifest,i=pn.routeModules,l=pn.context.isSpaMode,$t.useEffect((()=>{if(!an(l)||!0===navigator.connection?.saveData)return;function e(e){let t="FORM"===e.tagName?e.getAttribute("action"):e.getAttribute("href");if(!t)return;let n=new URL(t,window.location.origin);nn.has(n.pathname)||en.add(n.pathname)}async function t(){let e=Array.from(en.keys()).filter((e=>!nn.has(e)||(en.delete(e),!1)));if(0!==e.length)try{await ln(e,o,i,l,a.basename,a.patchRoutes)}catch(e){console.error("Failed to fetch manifest patches",e)}}document.body.querySelectorAll("a[data-discover], form[data-discover]").forEach((t=>e(t))),t();let n=function(e){let t;return(...n)=>{window.clearTimeout(t),t=window.setTimeout((()=>e(...n)),100)}}(t),r=new MutationObserver((t=>{let r=new Set;t.forEach((e=>{[e.target,...e.addedNodes].forEach((e=>{(function(e){return e.nodeType===Node.ELEMENT_NODE})(e)&&(("A"===e.tagName&&e.getAttribute("data-discover")||"FORM"===e.tagName&&e.getAttribute("data-discover"))&&r.add(e),"A"!==e.tagName&&e.querySelectorAll("a[data-discover], form[data-discover]").forEach((e=>r.add(e))))}))})),r.forEach((t=>e(t))),n()}));return r.observe(document.documentElement,{subtree:!0,childList:!0,attributes:!0,attributeFilter:["data-discover","href","action"]}),()=>r.disconnect()}),[l,o,i,a]),hn.createElement(hn.Fragment,null,hn.createElement(sn.Provider,{value:{manifest:pn.manifest,routeModules:pn.routeModules,future:pn.context.future,criticalCss:e,isSpaMode:pn.context.isSpaMode}},hn.createElement(It,{location:n},hn.createElement(fn,{router:mn}))),hn.createElement(hn.Fragment,null));var a,o,i,l}},77:(e,t,n)=>{var r,a=Object.create,o=Object.defineProperty,i=Object.getOwnPropertyDescriptor,l=Object.getOwnPropertyNames,s=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty,c=(e,t,n,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let a of l(t))u.call(e,a)||a===n||o(e,a,{get:()=>t[a],enumerable:!(r=i(t,a))||r.enumerable});return e},d=(e,t,n)=>(n=null!=e?a(s(e)):{},c(!t&&e&&e.__esModule?n:o(n,"default",{value:e,enumerable:!0}),e)),f={};((e,t)=>{for(var n in t)o(e,n,{get:t[n],enumerable:!0})})(f,{Await:()=>Sn,BrowserRouter:()=>Zr,Form:()=>oa,HashRouter:()=>ea,IDLE_BLOCKER:()=>me,IDLE_FETCHER:()=>pe,IDLE_NAVIGATION:()=>he,Link:()=>ra,Links:()=>Ur,MemoryRouter:()=>mn,Meta:()=>qr,NavLink:()=>aa,Navigate:()=>yn,NavigationType:()=>h,Outlet:()=>vn,PrefetchPageLinks:()=>Hr,Route:()=>gn,Router:()=>bn,RouterProvider:()=>hn,Routes:()=>wn,Scripts:()=>Vr,ScrollRestoration:()=>ia,ServerRouter:()=>ja,StaticRouter:()=>Ca,StaticRouterProvider:()=>Pa,UNSAFE_DataRouterContext:()=>ft,UNSAFE_DataRouterStateContext:()=>ht,UNSAFE_ErrorResponseImpl:()=>oe,UNSAFE_FetchersContext:()=>mt,UNSAFE_FrameworkContext:()=>$r,UNSAFE_LocationContext:()=>gt,UNSAFE_NavigationContext:()=>vt,UNSAFE_RemixErrorBoundary:()=>fr,UNSAFE_RouteContext:()=>bt,UNSAFE_ServerMode:()=>Ga,UNSAFE_SingleFetchRedirectSymbol:()=>Xn,UNSAFE_ViewTransitionContext:()=>pt,UNSAFE_createBrowserHistory:()=>y,UNSAFE_createClientRoutes:()=>kr,UNSAFE_createClientRoutesWithHMRRevalidationOptOut:()=>wr,UNSAFE_createRouter:()=>we,UNSAFE_decodeViaTurboStream:()=>or,UNSAFE_deserializeErrors:()=>Mo,UNSAFE_getPatchRoutesOnNavigationFunction:()=>Or,UNSAFE_getSingleFetchDataStrategy:()=>er,UNSAFE_invariant:()=>g,UNSAFE_mapRouteProperties:()=>cn,UNSAFE_shouldHydrateRouteLoader:()=>Cr,UNSAFE_useFogOFWarDiscovery:()=>Dr,UNSAFE_useScrollRestoration:()=>Sa,createBrowserRouter:()=>Qr,createCookie:()=>Wa,createCookieSessionStorage:()=>Do,createHashRouter:()=>Kr,createMemoryRouter:()=>dn,createMemorySessionStorage:()=>No,createPath:()=>E,createRequestHandler:()=>Co,createRoutesFromChildren:()=>xn,createRoutesFromElements:()=>Rn,createRoutesStub:()=>Ua,createSearchParams:()=>_n,createSession:()=>Ao,createSessionStorage:()=>_o,createStaticHandler:()=>_a,createStaticRouter:()=>Oa,data:()=>te,generatePath:()=>U,isCookie:()=>Ja,isRouteErrorResponse:()=>ie,isSession:()=>To,matchPath:()=>H,matchRoutes:()=>P,parsePath:()=>k,redirect:()=>ne,redirectDocument:()=>re,renderMatches:()=>Cn,replace:()=>ae,resolvePath:()=>Y,unstable_HistoryRouter:()=>ta,unstable_setDevServerHooks:()=>mo,unstable_usePrompt:()=>ka,useActionData:()=>Xt,useAsyncError:()=>tn,useAsyncValue:()=>en,useBeforeUnload:()=>Ea,useBlocker:()=>rn,useFetcher:()=>ya,useFetchers:()=>va,useFormAction:()=>ma,useHref:()=>kt,useInRouterContext:()=>xt,useLinkClickHandler:()=>ca,useLoaderData:()=>Kt,useLocation:()=>Rt,useMatch:()=>Pt,useMatches:()=>Qt,useNavigate:()=>Tt,useNavigation:()=>Wt,useNavigationType:()=>Ct,useOutlet:()=>Dt,useOutletContext:()=>Ot,useParams:()=>Nt,useResolvedPath:()=>Mt,useRevalidator:()=>Jt,useRouteError:()=>Zt,useRouteLoaderData:()=>Gt,useRoutes:()=>zt,useSearchParams:()=>da,useSubmit:()=>pa,useViewTransitionState:()=>xa}),e.exports=(r=f,c(o({},"__esModule",{value:!0}),r));var h=(e=>(e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE",e))(h||{}),p="popstate";function m(e={}){let t,{initialEntries:n=["/"],initialIndex:r,v5Compat:a=!1}=e;t=n.map(((e,t)=>c(e,"string"==typeof e?null:e.state,0===t?"default":void 0)));let o=s(null==r?t.length-1:r),i="POP",l=null;function s(e){return Math.min(Math.max(e,0),t.length-1)}function u(){return t[o]}function c(e,n=null,r){let a=S(t?u().pathname:"/",e,n,r);return b("/"===a.pathname.charAt(0),`relative pathnames are not supported in memory history: ${JSON.stringify(e)}`),a}function d(e){return"string"==typeof e?e:E(e)}return{get index(){return o},get action(){return i},get location(){return u()},createHref:d,createURL:e=>new URL(d(e),"http://localhost"),encodeLocation(e){let t="string"==typeof e?k(e):e;return{pathname:t.pathname||"",search:t.search||"",hash:t.hash||""}},push(e,n){i="PUSH";let r=c(e,n);o+=1,t.splice(o,t.length,r),a&&l&&l({action:i,location:r,delta:1})},replace(e,n){i="REPLACE";let r=c(e,n);t[o]=r,a&&l&&l({action:i,location:r,delta:0})},go(e){i="POP";let n=s(o+e),r=t[n];o=n,l&&l({action:i,location:r,delta:e})},listen:e=>(l=e,()=>{l=null})}}function y(e={}){return x((function(e,t){let{pathname:n,search:r,hash:a}=e.location;return S("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:E(t)}),null,e)}function v(e={}){return x((function(e,t){let{pathname:n="/",search:r="",hash:a=""}=k(e.location.hash.substring(1));return n.startsWith("/")||n.startsWith(".")||(n="/"+n),S("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");r=-1===n?t:t.slice(0,n)}return r+"#"+("string"==typeof t?t:E(t))}),(function(e,t){b("/"===e.pathname.charAt(0),`relative pathnames are not supported in hash history.push(${JSON.stringify(t)})`)}),e)}function g(e,t){if(!1===e||null==e)throw new Error(t)}function b(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function w(e,t){return{usr:e.state,key:e.key,idx:t}}function S(e,t,n=null,r){return{pathname:"string"==typeof e?e:e.pathname,search:"",hash:"",..."string"==typeof t?k(t):t,state:n,key:t&&t.key||r||Math.random().toString(36).substring(2,10)}}function E({pathname:e="/",search:t="",hash:n=""}){return t&&"?"!==t&&(e+="?"===t.charAt(0)?t:"?"+t),n&&"#"!==n&&(e+="#"===n.charAt(0)?n:"#"+n),e}function k(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substring(n),e=e.substring(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substring(r),e=e.substring(0,r)),e&&(t.pathname=e)}return t}function x(e,t,n,r={}){let{window:a=document.defaultView,v5Compat:o=!1}=r,i=a.history,l="POP",s=null,u=c();function c(){return(i.state||{idx:null}).idx}function d(){l="POP";let e=c(),t=null==e?null:e-u;u=e,s&&s({action:l,location:h.location,delta:t})}function f(e){let t="null"!==a.location.origin?a.location.origin:a.location.href,n="string"==typeof e?e:E(e);return n=n.replace(/ $/,"%20"),g(t,`No window.location.(origin|href) available to create URL for href: ${n}`),new URL(n,t)}null==u&&(u=0,i.replaceState({...i.state,idx:u},""));let h={get action(){return l},get location(){return e(a,i)},listen(e){if(s)throw new Error("A history only accepts one active listener");return a.addEventListener(p,d),s=e,()=>{a.removeEventListener(p,d),s=null}},createHref:e=>t(a,e),createURL:f,encodeLocation(e){let t=f(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){l="PUSH";let r=S(h.location,e,t);n&&n(r,e),u=c()+1;let d=w(r,u),f=h.createHref(r);try{i.pushState(d,"",f)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;a.location.assign(f)}o&&s&&s({action:l,location:h.location,delta:1})},replace:function(e,t){l="REPLACE";let r=S(h.location,e,t);n&&n(r,e),u=c();let a=w(r,u),d=h.createHref(r);i.replaceState(a,"",d),o&&s&&s({action:l,location:h.location,delta:0})},go:e=>i.go(e)};return h}var R=new Set(["lazy","caseSensitive","path","id","index","children"]);function C(e,t,n=[],r={}){return e.map(((e,a)=>{let o=[...n,String(a)],i="string"==typeof e.id?e.id:o.join("-");if(g(!0!==e.index||!e.children,"Cannot specify children on an index route"),g(!r[i],`Found a route id collision on id "${i}".  Route id's must be globally unique within Data Router usages`),function(e){return!0===e.index}(e)){let n={...e,...t(e),id:i};return r[i]=n,n}{let n={...e,...t(e),id:i,children:void 0};return r[i]=n,e.children&&(n.children=C(e.children,t,o,r)),n}}))}function P(e,t,n="/"){return L(e,t,n,!1)}function L(e,t,n,r){let a=q(("string"==typeof t?k(t):t).pathname||"/",n);if(null==a)return null;let o=T(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let i=null;for(let e=0;null==i&&e<o.length;++e){let t=B(a);i=I(o[e],t,r)}return i}function A(e,t){let{route:n,pathname:r,params:a}=e;return{id:n.id,pathname:r,params:a,data:t[n.id],handle:n.handle}}function T(e,t=[],n=[],r=""){let a=(e,a,o)=>{let i={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};i.relativePath.startsWith("/")&&(g(i.relativePath.startsWith(r),`Absolute route path "${i.relativePath}" nested under path "${r}" is not valid. An absolute child route path must start with the combined path of all its parent routes.`),i.relativePath=i.relativePath.slice(r.length));let l=K([r,i.relativePath]),s=n.concat(i);e.children&&e.children.length>0&&(g(!0!==e.index,`Index routes must not have child routes. Please remove all child routes from route path "${l}".`),T(e.children,t,s,l)),(null!=e.path||e.index)&&t.push({path:l,score:j(l,e.index),routesMeta:s})};return e.forEach(((e,t)=>{if(""!==e.path&&e.path?.includes("?"))for(let n of _(e.path))a(e,t,n);else a(e,t)})),t}function _(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,a=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===r.length)return a?[o,""]:[o];let i=_(r.join("/")),l=[];return l.push(...i.map((e=>""===e?o:[o,e].join("/")))),a&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}var O=/^:[\w-]+$/,D=3,N=2,M=1,z=10,$=-2,F=e=>"*"===e;function j(e,t){let n=e.split("/"),r=n.length;return n.some(F)&&(r+=$),t&&(r+=N),n.filter((e=>!F(e))).reduce(((e,t)=>e+(O.test(t)?D:""===t?M:z)),r)}function I(e,t,n=!1){let{routesMeta:r}=e,a={},o="/",i=[];for(let e=0;e<r.length;++e){let l=r[e],s=e===r.length-1,u="/"===o?t:t.slice(o.length)||"/",c=H({path:l.relativePath,caseSensitive:l.caseSensitive,end:s},u),d=l.route;if(!c&&s&&n&&!r[r.length-1].route.index&&(c=H({path:l.relativePath,caseSensitive:l.caseSensitive,end:!1},u)),!c)return null;Object.assign(a,c.params),i.push({params:a,pathname:K([o,c.pathname]),pathnameBase:G(K([o,c.pathnameBase])),route:d}),"/"!==c.pathnameBase&&(o=K([o,c.pathnameBase]))}return i}function U(e,t={}){let n=e;n.endsWith("*")&&"*"!==n&&!n.endsWith("/*")&&(b(!1,`Route path "${n}" will be treated as if it were "${n.replace(/\*$/,"/*")}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${n.replace(/\*$/,"/*")}".`),n=n.replace(/\*$/,"/*"));const r=n.startsWith("/")?"/":"",a=e=>null==e?"":"string"==typeof e?e:String(e);return r+n.split(/\/+/).map(((e,n,r)=>{if(n===r.length-1&&"*"===e)return a(t["*"]);const o=e.match(/^:([\w-]+)(\??)$/);if(o){const[,e,n]=o;let r=t[e];return g("?"===n||null!=r,`Missing ":${e}" param`),a(r)}return e.replace(/\?$/g,"")})).filter((e=>!!e)).join("/")}function H(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t=!1,n=!0){b("*"===e||!e.endsWith("*")||e.endsWith("/*"),`Route path "${e}" will be treated as if it were "${e.replace(/\*$/,"/*")}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${e.replace(/\*$/,"/*")}".`);let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],i=o.replace(/(.)\/+$/,"$1"),l=a.slice(1);return{params:r.reduce(((e,{paramName:t,isOptional:n},r)=>{if("*"===t){let e=l[r]||"";i=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}const a=l[r];return e[t]=n&&!a?void 0:(a||"").replace(/%2F/g,"/"),e}),{}),pathname:o,pathnameBase:i,pattern:e}}function B(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return b(!1,`The URL path "${e}" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding (${t}).`),e}}function q(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function Y(e,t="/"){let{pathname:n,search:r="",hash:a=""}="string"==typeof e?k(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:X(r),hash:Z(a)}}function V(e,t,n,r){return`Cannot include a '${e}' character in a manually specified \`to.${t}\` field [${JSON.stringify(r)}].  Please separate it out to the \`to.${n}\` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.`}function W(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function J(e){let t=W(e);return t.map(((e,n)=>n===t.length-1?e.pathname:e.pathnameBase))}function Q(e,t,n,r=!1){let a;"string"==typeof e?a=k(e):(a={...e},g(!a.pathname||!a.pathname.includes("?"),V("?","pathname","search",a)),g(!a.pathname||!a.pathname.includes("#"),V("#","pathname","hash",a)),g(!a.search||!a.search.includes("#"),V("#","search","hash",a)));let o,i=""===e||""===a.pathname,l=i?"/":a.pathname;if(null==l)o=n;else{let e=t.length-1;if(!r&&l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}o=e>=0?t[e]:"/"}let s=Y(a,o),u=l&&"/"!==l&&l.endsWith("/"),c=(i||"."===l)&&n.endsWith("/");return s.pathname.endsWith("/")||!u&&!c||(s.pathname+="/"),s}var K=e=>e.join("/").replace(/\/\/+/g,"/"),G=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),X=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",Z=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"",ee=class{constructor(e,t){this.type="DataWithResponseInit",this.data=e,this.init=t||null}};function te(e,t){return new ee(e,"number"==typeof t?{status:t}:t)}var ne=(e,t=302)=>{let n=t;"number"==typeof n?n={status:n}:void 0===n.status&&(n.status=302);let r=new Headers(n.headers);return r.set("Location",e),new Response(null,{...n,headers:r})},re=(e,t)=>{let n=ne(e,t);return n.headers.set("X-Remix-Reload-Document","true"),n},ae=(e,t)=>{let n=ne(e,t);return n.headers.set("X-Remix-Replace","true"),n},oe=class{constructor(e,t,n,r=!1){this.status=e,this.statusText=t||"",this.internal=r,n instanceof Error?(this.data=n.toString(),this.error=n):this.data=n}};function ie(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}var le=["POST","PUT","PATCH","DELETE"],se=new Set(le),ue=["GET",...le],ce=new Set(ue),de=new Set([301,302,303,307,308]),fe=new Set([307,308]),he={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},pe={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},me={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},ye=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,ve=e=>({hasErrorBoundary:Boolean(e.hasErrorBoundary)}),ge="remix-router-transitions",be=Symbol("ResetLoaderData");function we(e){const t=e.window?e.window:"undefined"!=typeof window?window:void 0,n=void 0!==t&&void 0!==t.document&&void 0!==t.document.createElement;g(e.routes.length>0,"You must provide a non-empty routes array to createRouter");let r,a,o,i=e.mapRouteProperties||ve,l={},s=C(e.routes,i,void 0,l),u=e.basename||"/",c=e.dataStrategy||Oe,d=e.patchRoutesOnNavigation,f={...e.future},h=null,p=new Set,m=null,y=null,v=null,w=null!=e.hydrationData,E=P(s,e.history.location,u),k=null;if(null==E&&!d){let t=Ve(404,{pathname:e.history.location.pathname}),{matches:n,route:r}=Ye(s);E=n,k={[r.id]:t}}if(E&&!e.hydrationData&&_e(E,s,e.history.location.pathname).active&&(E=null),E)if(E.some((e=>e.route.lazy)))a=!1;else if(E.some((e=>e.route.loader))){let t=e.hydrationData?e.hydrationData.loaderData:null,n=e.hydrationData?e.hydrationData.errors:null;if(n){let e=E.findIndex((e=>void 0!==n[e.route.id]));a=E.slice(0,e+1).every((e=>!Pe(e.route,t,n)))}else a=E.every((e=>!Pe(e.route,t,n)))}else a=!0;else{a=!1,E=[];let t=_e(null,s,e.history.location.pathname);t.active&&t.matches&&(E=t.matches)}let x,R,T={historyAction:e.history.action,location:e.history.location,matches:E,initialized:a,navigation:he,restoreScrollPosition:null==e.hydrationData&&null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||k,fetchers:new Map,blockers:new Map},_="POP",O=!1,D=!1,N=new Map,M=null,z=!1,$=!1,F=new Set,j=new Map,I=0,U=-1,H=new Map,B=new Set,Y=new Map,V=new Map,W=new Set,J=new Map,Q=null;function K(e,t={}){T={...T,...e};let n=[],r=[];T.fetchers.forEach(((e,t)=>{"idle"===e.state&&(W.has(t)?n.push(t):r.push(t))})),[...p].forEach((e=>e(T,{deletedFetchers:n,viewTransitionOpts:t.viewTransitionOpts,flushSync:!0===t.flushSync}))),n.forEach((e=>se(e))),r.forEach((e=>T.fetchers.delete(e)))}function G(t,n,{flushSync:a}={}){let o,i=null!=T.actionData&&null!=T.navigation.formMethod&&rt(T.navigation.formMethod)&&"loading"===T.navigation.state&&!0!==t.state?._isRedirect;o=n.actionData?Object.keys(n.actionData).length>0?n.actionData:null:i?T.actionData:null;let l=n.loaderData?He(T.loaderData,n.loaderData,n.matches||[],n.errors):T.loaderData,u=T.blockers;u.size>0&&(u=new Map(u),u.forEach(((e,t)=>u.set(t,me))));let c,d=!0===O||null!=T.navigation.formMethod&&rt(T.navigation.formMethod)&&!0!==t.state?._isRedirect;if(r&&(s=r,r=void 0),z||"POP"===_||("PUSH"===_?e.history.push(t,t.state):"REPLACE"===_&&e.history.replace(t,t.state)),"POP"===_){let e=N.get(T.location.pathname);e&&e.has(t.pathname)?c={currentLocation:T.location,nextLocation:t}:N.has(t.pathname)&&(c={currentLocation:t,nextLocation:T.location})}else if(D){let e=N.get(T.location.pathname);e?e.add(t.pathname):(e=new Set([t.pathname]),N.set(T.location.pathname,e)),c={currentLocation:T.location,nextLocation:t}}K({...n,actionData:o,loaderData:l,historyAction:_,location:t,initialized:!0,navigation:he,revalidation:"idle",restoreScrollPosition:Ae(t,n.matches||T.matches),preventScrollReset:d,blockers:u},{viewTransitionOpts:c,flushSync:!0===a}),_="POP",O=!1,D=!1,z=!1,$=!1,Q?.resolve(),Q=null}async function X(t,n,a){x&&x.abort(),x=null,_=t,z=!0===(a&&a.startUninterruptedRevalidation),function(e,t){if(m&&v){let n=Le(e,t);m[n]=v()}}(T.location,T.matches),O=!0===(a&&a.preventScrollReset),D=!0===(a&&a.enableViewTransition);let o=r||s,i=a&&a.overrideNavigation,l=P(o,n,u),c=!0===(a&&a.flushSync),d=_e(l,o,n.pathname);if(d.active&&d.matches&&(l=d.matches),!l){let{error:e,notFoundMatches:t,route:r}=Re(n.pathname);return void G(n,{matches:t,loaderData:{},errors:{[r.id]:e}},{flushSync:c})}if(T.initialized&&!$&&(f=T.location,h=n,f.pathname===h.pathname&&f.search===h.search&&(""===f.hash?""!==h.hash:f.hash===h.hash||""!==h.hash))&&!(a&&a.submission&&rt(a.submission.formMethod)))return void G(n,{matches:l},{flushSync:c});var f,h;x=new AbortController;let p,y=$e(e.history,n,x.signal,a&&a.submission);if(a&&a.pendingError)p=[qe(l).route.id,{type:"error",error:a.pendingError}];else if(a&&a.submission&&rt(a.submission.formMethod)){let t=await async function(e,t,n,r,a,o={}){re();let i,l=function(e,t){return{state:"submitting",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}}(t,n);if(K({navigation:l},{flushSync:!0===o.flushSync}),a){let n=await Fe(r,t.pathname,e.signal);if("aborted"===n.type)return{shortCircuited:!0};if("error"===n.type){let e=qe(n.partialMatches).route.id;return{matches:n.partialMatches,pendingActionResult:[e,{type:"error",error:n.error}]}}if(!n.matches){let{notFoundMatches:e,error:n,route:r}=Re(t.pathname);return{matches:e,pendingActionResult:[r.id,{type:"error",error:n}]}}r=n.matches}let s=ot(r,t);if(s.route.action||s.route.lazy){if(i=(await te("action",T,e,[s],r,null))[s.route.id],e.signal.aborted)return{shortCircuited:!0}}else i={type:"error",error:Ve(405,{method:e.method,pathname:t.pathname,routeId:s.route.id})};if(Ge(i)){let t;return t=o&&null!=o.replace?o.replace:ze(i.response.headers.get("Location"),new URL(e.url),u)===T.location.pathname+T.location.search,await ee(e,i,!0,{submission:n,replace:t}),{shortCircuited:!0}}if(Ke(i)){let e=qe(r,s.route.id);return!0!==(o&&o.replace)&&(_="PUSH"),{matches:r,pendingActionResult:[e.route.id,i]}}return{matches:r,pendingActionResult:[s.route.id,i]}}(y,n,a.submission,l,d.active,{replace:a.replace,flushSync:c});if(t.shortCircuited)return;if(t.pendingActionResult){let[e,r]=t.pendingActionResult;if(Ke(r)&&ie(r.error)&&404===r.error.status)return x=null,void G(n,{matches:t.matches,loaderData:{},errors:{[e]:r.error}})}l=t.matches||l,p=t.pendingActionResult,i=lt(n,a.submission),c=!1,d.active=!1,y=$e(e.history,y.url,y.signal)}let{shortCircuited:g,matches:b,loaderData:w,errors:S}=await async function(t,n,a,o,i,l,c,d,f,h,p){let m=i||lt(n,l),y=l||c||it(m),v=!z&&!f;if(o){if(v){let e=Z(p);K({navigation:m,...void 0!==e?{actionData:e}:{}},{flushSync:h})}let e=await Fe(a,n.pathname,t.signal);if("aborted"===e.type)return{shortCircuited:!0};if("error"===e.type){let t=qe(e.partialMatches).route.id;return{matches:e.partialMatches,loaderData:{},errors:{[t]:e.error}}}if(!e.matches){let{error:e,notFoundMatches:t,route:r}=Re(n.pathname);return{matches:t,loaderData:{},errors:{[r.id]:e}}}a=e.matches}let g=r||s,[b,w]=Ce(e.history,T,a,y,n,!0===f,$,F,W,Y,B,g,u,p);if(U=++I,0===b.length&&0===w.length){let e=de();return G(n,{matches:a,loaderData:{},errors:p&&Ke(p[1])?{[p[0]]:p[1].error}:null,...Be(p),...e?{fetchers:new Map(T.fetchers)}:{}},{flushSync:h}),{shortCircuited:!0}}if(v){let e={};if(!o){e.navigation=m;let t=Z(p);void 0!==t&&(e.actionData=t)}w.length>0&&(e.fetchers=function(e){return e.forEach((e=>{let t=T.fetchers.get(e.key),n=st(void 0,t?t.data:void 0);T.fetchers.set(e.key,n)})),new Map(T.fetchers)}(w)),K(e,{flushSync:h})}w.forEach((e=>{ue(e.key),e.controller&&j.set(e.key,e.controller)}));let S=()=>w.forEach((e=>ue(e.key)));x&&x.signal.addEventListener("abort",S);let{loaderResults:E,fetcherResults:k}=await ne(T,a,b,w,t);if(t.signal.aborted)return{shortCircuited:!0};x&&x.signal.removeEventListener("abort",S),w.forEach((e=>j.delete(e.key)));let R=We(E);if(R)return await ee(t,R.result,!0,{replace:d}),{shortCircuited:!0};if(R=We(k),R)return B.add(R.key),await ee(t,R.result,!0,{replace:d}),{shortCircuited:!0};let{loaderData:C,errors:P}=Ue(T,a,E,p,w,k);f&&T.errors&&(P={...T.errors,...P});let L=de(),A=be(U);return{matches:a,loaderData:C,errors:P,...L||A||w.length>0?{fetchers:new Map(T.fetchers)}:{}}}(y,n,l,d.active,i,a&&a.submission,a&&a.fetcherSubmission,a&&a.replace,a&&!0===a.initialHydration,c,p);g||(x=null,G(n,{matches:b||l,...Be(p),loaderData:w,errors:S}))}function Z(e){return e&&!Ke(e[1])?{[e[0]]:e[1].data}:T.actionData?0===Object.keys(T.actionData).length?null:T.actionData:void 0}async function ee(r,a,o,{submission:i,fetcherSubmission:l,preventScrollReset:s,replace:c}={}){a.response.headers.has("X-Remix-Revalidate")&&($=!0);let d=a.response.headers.get("Location");g(d,"Expected a Location header on the redirect Response"),d=ze(d,new URL(r.url),u);let f=S(T.location,d,{_isRedirect:!0});if(n){let n=!1;if(a.response.headers.has("X-Remix-Reload-Document"))n=!0;else if(ye.test(d)){const r=e.history.createURL(d);n=r.origin!==t.location.origin||null==q(r.pathname,u)}if(n)return void(c?t.location.replace(d):t.location.assign(d))}x=null;let h=!0===c||a.response.headers.has("X-Remix-Replace")?"REPLACE":"PUSH",{formMethod:p,formAction:m,formEncType:y}=T.navigation;!i&&!l&&p&&m&&y&&(i=it(T.navigation));let v=i||l;if(fe.has(a.response.status)&&v&&rt(v.formMethod))await X(h,f,{submission:{...v,formAction:d},preventScrollReset:s||O,enableViewTransition:o?D:void 0});else{let e=lt(f,i);await X(h,f,{overrideNavigation:e,fetcherSubmission:l,preventScrollReset:s||O,enableViewTransition:o?D:void 0})}}async function te(e,t,n,r,a,o){let s,d={};try{s=await De(c,e,0,n,r,a,o,l,i)}catch(e){return r.forEach((t=>{d[t.route.id]={type:"error",error:e}})),d}for(let[e,t]of Object.entries(s))if(Qe(t)){let r=t.result;d[e]={type:"redirect",response:Me(r,n,e,a,u)}}else d[e]=await Ne(t);return d}async function ne(t,n,r,a,o){let i=te("loader",0,o,r,n,null),l=Promise.all(a.map((async t=>{if(t.matches&&t.match&&t.controller){let n=(await te("loader",0,$e(e.history,t.path,t.controller.signal),[t.match],t.matches,t.key))[t.match.route.id];return{[t.key]:n}}return Promise.resolve({[t.key]:{type:"error",error:Ve(404,{pathname:t.path})}})})));return{loaderResults:await i,fetcherResults:(await l).reduce(((e,t)=>Object.assign(e,t)),{})}}function re(){$=!0,Y.forEach(((e,t)=>{j.has(t)&&F.add(t),ue(t)}))}function ae(e,t,n={}){T.fetchers.set(e,t),K({fetchers:new Map(T.fetchers)},{flushSync:!0===(n&&n.flushSync)})}function oe(e,t,n,r={}){let a=qe(T.matches,t);se(e),K({errors:{[a.route.id]:n},fetchers:new Map(T.fetchers)},{flushSync:!0===(r&&r.flushSync)})}function le(e){return V.set(e,(V.get(e)||0)+1),W.has(e)&&W.delete(e),T.fetchers.get(e)||pe}function se(e){let t=T.fetchers.get(e);!j.has(e)||t&&"loading"===t.state&&H.has(e)||ue(e),Y.delete(e),H.delete(e),B.delete(e),W.delete(e),F.delete(e),T.fetchers.delete(e)}function ue(e){let t=j.get(e);t&&(t.abort(),j.delete(e))}function ce(e){for(let t of e){let e=ut(le(t).data);T.fetchers.set(t,e)}}function de(){let e=[],t=!1;for(let n of B){let r=T.fetchers.get(n);g(r,`Expected fetcher: ${n}`),"loading"===r.state&&(B.delete(n),e.push(n),t=!0)}return ce(e),t}function be(e){let t=[];for(let[n,r]of H)if(r<e){let e=T.fetchers.get(n);g(e,`Expected fetcher: ${n}`),"loading"===e.state&&(ue(n),H.delete(n),t.push(n))}return ce(t),t.length>0}function we(e){T.blockers.delete(e),J.delete(e)}function Se(e,t){let n=T.blockers.get(e)||me;g("unblocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"proceeding"===t.state||"blocked"===n.state&&"unblocked"===t.state||"proceeding"===n.state&&"unblocked"===t.state,`Invalid blocker state transition: ${n.state} -> ${t.state}`);let r=new Map(T.blockers);r.set(e,t),K({blockers:r})}function Ee({currentLocation:e,nextLocation:t,historyAction:n}){if(0===J.size)return;J.size>1&&b(!1,"A router only supports one blocker at a time");let r=Array.from(J.entries()),[a,o]=r[r.length-1],i=T.blockers.get(a);return i&&"proceeding"===i.state?void 0:o({currentLocation:e,nextLocation:t,historyAction:n})?a:void 0}function Re(e){let t=Ve(404,{pathname:e}),n=r||s,{matches:a,route:o}=Ye(n);return{notFoundMatches:a,route:o,error:t}}function Le(e,t){return y&&y(e,t.map((e=>A(e,T.loaderData))))||e.key}function Ae(e,t){if(m){let n=Le(e,t),r=m[n];if("number"==typeof r)return r}return null}function _e(e,t,n){if(d){if(!e)return{active:!0,matches:L(t,n,u,!0)||[]};if(Object.keys(e[0].params).length>0)return{active:!0,matches:L(t,n,u,!0)}}return{active:!1,matches:null}}async function Fe(e,t,n){if(!d)return{type:"success",matches:e};let a=e;for(;;){let e=null==r,o=r||s,c=l;try{await d({path:t,matches:a,patch:(e,t)=>{n.aborted||Te(e,t,o,c,i)}})}catch(e){return{type:"error",error:e,partialMatches:a}}finally{e&&!n.aborted&&(s=[...s])}if(n.aborted)return{type:"aborted"};let f=P(o,t,u);if(f)return{type:"success",matches:f};let h=L(o,t,u,!0);if(!h||a.length===h.length&&a.every(((e,t)=>e.route.id===h[t].route.id)))return{type:"success",matches:null};a=h}}return o={get basename(){return u},get future(){return f},get state(){return T},get routes(){return s},get window(){return t},initialize:function(){if(h=e.history.listen((({action:t,location:n,delta:r})=>{if(R)return R(),void(R=void 0);b(0===J.size||null!=r,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let a=Ee({currentLocation:T.location,nextLocation:n,historyAction:t});if(a&&null!=r){let t=new Promise((e=>{R=e}));return e.history.go(-1*r),void Se(a,{state:"blocked",location:n,proceed(){Se(a,{state:"proceeding",proceed:void 0,reset:void 0,location:n}),t.then((()=>e.history.go(r)))},reset(){let e=new Map(T.blockers);e.set(a,me),K({blockers:e})}})}return X(t,n)})),n){!function(e,t){try{let n=e.sessionStorage.getItem(ge);if(n){let e=JSON.parse(n);for(let[n,r]of Object.entries(e||{}))r&&Array.isArray(r)&&t.set(n,new Set(r||[]))}}catch(e){}}(t,N);let e=()=>function(e,t){if(t.size>0){let n={};for(let[e,r]of t)n[e]=[...r];try{e.sessionStorage.setItem(ge,JSON.stringify(n))}catch(e){b(!1,`Failed to save applied view transitions in sessionStorage (${e}).`)}}}(t,N);t.addEventListener("pagehide",e),M=()=>t.removeEventListener("pagehide",e)}return T.initialized||X("POP",T.location,{initialHydration:!0}),o},subscribe:function(e){return p.add(e),()=>p.delete(e)},enableScrollRestoration:function(e,t,n){if(m=e,v=t,y=n||null,!w&&T.navigation===he){w=!0;let e=Ae(T.location,T.matches);null!=e&&K({restoreScrollPosition:e})}return()=>{m=null,v=null,y=null}},navigate:async function t(n,r){if("number"==typeof n)return void e.history.go(n);let a=ke(T.location,T.matches,u,n,r?.fromRouteId,r?.relative),{path:o,submission:i,error:l}=xe(!1,a,r),s=T.location,c=S(T.location,o,r&&r.state);c={...c,...e.history.encodeLocation(c)};let d=r&&null!=r.replace?r.replace:void 0,f="PUSH";!0===d?f="REPLACE":!1===d||null!=i&&rt(i.formMethod)&&i.formAction===T.location.pathname+T.location.search&&(f="REPLACE");let h=r&&"preventScrollReset"in r?!0===r.preventScrollReset:void 0,p=!0===(r&&r.flushSync),m=Ee({currentLocation:s,nextLocation:c,historyAction:f});m?Se(m,{state:"blocked",location:c,proceed(){Se(m,{state:"proceeding",proceed:void 0,reset:void 0,location:c}),t(n,r)},reset(){let e=new Map(T.blockers);e.set(m,me),K({blockers:e})}}):await X(f,c,{submission:i,pendingError:l,preventScrollReset:h,replace:r&&r.replace,enableViewTransition:r&&r.viewTransition,flushSync:p})},fetch:async function(t,n,a,o){ue(t);let i=!0===(o&&o.flushSync),l=r||s,c=ke(T.location,T.matches,u,a,n,o?.relative),d=P(l,c,u),f=_e(d,l,c);if(f.active&&f.matches&&(d=f.matches),!d)return void oe(t,n,Ve(404,{pathname:c}),{flushSync:i});let{path:h,submission:p,error:m}=xe(!0,c,o);if(m)return void oe(t,n,m,{flushSync:i});let y=ot(d,h),v=!0===(o&&o.preventScrollReset);p&&rt(p.formMethod)?await async function(t,n,a,o,i,l,c,d,f){function h(e){if(!e.route.action&&!e.route.lazy){let e=Ve(405,{method:f.formMethod,pathname:a,routeId:n});return oe(t,n,e,{flushSync:c}),!0}return!1}if(re(),Y.delete(t),!l&&h(o))return;let p=T.fetchers.get(t);ae(t,function(e,t){return{state:"submitting",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t?t.data:void 0}}(f,p),{flushSync:c});let m=new AbortController,y=$e(e.history,a,m.signal,f);if(l){let e=await Fe(i,a,y.signal);if("aborted"===e.type)return;if("error"===e.type)return void oe(t,n,e.error,{flushSync:c});if(!e.matches)return void oe(t,n,Ve(404,{pathname:a}),{flushSync:c});if(h(o=ot(i=e.matches,a)))return}j.set(t,m);let v=I,b=(await te("action",0,y,[o],i,t))[o.route.id];if(y.signal.aborted)return void(j.get(t)===m&&j.delete(t));if(W.has(t)){if(Ge(b)||Ke(b))return void ae(t,ut(void 0))}else{if(Ge(b))return j.delete(t),U>v?void ae(t,ut(void 0)):(B.add(t),ae(t,st(f)),ee(y,b,!1,{fetcherSubmission:f,preventScrollReset:d}));if(Ke(b))return void oe(t,n,b.error)}let w=T.navigation.location||T.location,S=$e(e.history,w,m.signal),E=r||s,k="idle"!==T.navigation.state?P(E,T.navigation.location,u):T.matches;g(k,"Didn't find any matches after fetcher action");let R=++I;H.set(t,R);let C=st(f,b.data);T.fetchers.set(t,C);let[L,A]=Ce(e.history,T,k,f,w,!1,$,F,W,Y,B,E,u,[o.route.id,b]);A.filter((e=>e.key!==t)).forEach((e=>{let t=e.key,n=T.fetchers.get(t),r=st(void 0,n?n.data:void 0);T.fetchers.set(t,r),ue(t),e.controller&&j.set(t,e.controller)})),K({fetchers:new Map(T.fetchers)});let O=()=>A.forEach((e=>ue(e.key)));m.signal.addEventListener("abort",O);let{loaderResults:D,fetcherResults:N}=await ne(0,k,L,A,S);if(m.signal.aborted)return;m.signal.removeEventListener("abort",O),H.delete(t),j.delete(t),A.forEach((e=>j.delete(e.key)));let M=We(D);if(M)return ee(S,M.result,!1,{preventScrollReset:d});if(M=We(N),M)return B.add(M.key),ee(S,M.result,!1,{preventScrollReset:d});let{loaderData:z,errors:q}=Ue(T,k,D,void 0,A,N);if(T.fetchers.has(t)){let e=ut(b.data);T.fetchers.set(t,e)}be(R),"loading"===T.navigation.state&&R>U?(g(_,"Expected pending action"),x&&x.abort(),G(T.navigation.location,{matches:k,loaderData:z,errors:q,fetchers:new Map(T.fetchers)})):(K({errors:q,loaderData:He(T.loaderData,z,k,q),fetchers:new Map(T.fetchers)}),$=!1)}(t,n,h,y,d,f.active,i,v,p):(Y.set(t,{routeId:n,path:h}),await async function(t,n,r,a,o,i,l,s,u){let c=T.fetchers.get(t);ae(t,st(u,c?c.data:void 0),{flushSync:l});let d=new AbortController,f=$e(e.history,r,d.signal);if(i){let e=await Fe(o,r,f.signal);if("aborted"===e.type)return;if("error"===e.type)return void oe(t,n,e.error,{flushSync:l});if(!e.matches)return void oe(t,n,Ve(404,{pathname:r}),{flushSync:l});a=ot(o=e.matches,r)}j.set(t,d);let h=I,p=(await te("loader",0,f,[a],o,t))[a.route.id];if(j.get(t)===d&&j.delete(t),!f.signal.aborted){if(!W.has(t))return Ge(p)?U>h?void ae(t,ut(void 0)):(B.add(t),void await ee(f,p,!1,{preventScrollReset:s})):void(Ke(p)?oe(t,n,p.error):ae(t,ut(p.data)));ae(t,ut(void 0))}}(t,n,h,y,d,f.active,i,v,p))},revalidate:function(){Q||(Q=function(){let e,t,n=new Promise(((r,a)=>{e=async e=>{r(e);try{await n}catch(e){}},t=async e=>{a(e);try{await n}catch(e){}}}));return{promise:n,resolve:e,reject:t}}()),re(),K({revalidation:"loading"});let e=Q.promise;return"submitting"===T.navigation.state?e:"idle"===T.navigation.state?(X(T.historyAction,T.location,{startUninterruptedRevalidation:!0}),e):(X(_||T.historyAction,T.navigation.location,{overrideNavigation:T.navigation,enableViewTransition:!0===D}),e)},createHref:t=>e.history.createHref(t),encodeLocation:t=>e.history.encodeLocation(t),getFetcher:le,deleteFetcher:function(e){let t=(V.get(e)||0)-1;t<=0?(V.delete(e),W.add(e)):V.set(e,t),K({fetchers:new Map(T.fetchers)})},dispose:function(){h&&h(),M&&M(),p.clear(),x&&x.abort(),T.fetchers.forEach(((e,t)=>se(t))),T.blockers.forEach(((e,t)=>we(t)))},getBlocker:function(e,t){let n=T.blockers.get(e)||me;return J.get(e)!==t&&J.set(e,t),n},deleteBlocker:we,patchRoutes:function(e,t){let n=null==r;Te(e,t,r||s,l,i),n&&(s=[...s],K({}))},_internalFetchControllers:j,_internalSetRoutes:function(e){l={},r=C(e,i,void 0,l)}},o}function Se(e,t){g(e.length>0,"You must provide a non-empty routes array to createStaticHandler");let n={},r=(t?t.basename:null)||"/",a=t?.mapRouteProperties||ve,o=C(e,a,void 0,n);async function i(e,t,n,r,a,o,i){g(e.signal,"query()/queryRoute() requests must contain an AbortController signal");try{if(rt(e.method)){let u=await async function(e,t,n,r,a,o,i){let u;if(n.route.action||n.route.lazy)u=(await s("action",e,[n],t,i,r,a))[n.route.id],e.signal.aborted&&Ee(e,i);else{let t=Ve(405,{method:e.method,pathname:new URL(e.url).pathname,routeId:n.route.id});if(i)throw t;u={type:"error",error:t}}if(Ge(u))throw new Response(null,{status:u.response.status,headers:{Location:u.response.headers.get("Location")}});if(i){if(Ke(u))throw u.error;return{matches:[n],loaderData:{},actionData:{[n.route.id]:u.data},errors:null,statusCode:200,loaderHeaders:{},actionHeaders:{}}}let c=new Request(e.url,{headers:e.headers,redirect:e.redirect,signal:e.signal});if(Ke(u)){let e=o?n:qe(t,n.route.id);return{...await l(c,t,r,a,o,null,[e.route.id,u]),statusCode:ie(u.error)?u.error.status:null!=u.statusCode?u.statusCode:500,actionData:null,actionHeaders:{...u.headers?{[n.route.id]:u.headers}:{}}}}return{...await l(c,t,r,a,o,null),actionData:{[n.route.id]:u.data},...u.statusCode?{statusCode:u.statusCode}:{},actionHeaders:u.headers?{[n.route.id]:u.headers}:{}}}(e,n,i||ot(n,t),r,a,o,null!=i);return u}let u=await l(e,n,r,a,o,i);return Ze(u)?u:{...u,actionData:null,actionHeaders:{}}}catch(e){if(null!=(u=e)&&"object"==typeof u&&"type"in u&&"result"in u&&("data"===u.type||"error"===u.type)&&Ze(e.result)){if("error"===e.type)throw e.result;return e.result}if(tt(e))return e;throw e}var u}async function l(e,t,n,r,a,o,i){let l=null!=o;if(l&&!o?.route.loader&&!o?.route.lazy)throw Ve(400,{method:e.method,pathname:new URL(e.url).pathname,routeId:o?.route.id});let u=(o?[o]:i&&Ke(i[1])?Re(t,i[0]):t).filter((e=>e.route.loader||e.route.lazy));if(0===u.length)return{matches:t,loaderData:t.reduce(((e,t)=>Object.assign(e,{[t.route.id]:null})),{}),errors:i&&Ke(i[1])?{[i[0]]:i[1].error}:null,statusCode:200,loaderHeaders:{}};let c=await s("loader",e,u,t,l,n,r);e.signal.aborted&&Ee(e,l);let d=Ie(t,c,i,!0,a),f=new Set(u.map((e=>e.route.id)));return t.forEach((e=>{f.has(e.route.id)||(d.loaderData[e.route.id]=null)})),{...d,matches:t}}async function s(e,t,o,i,l,s,u){let c=await De(u||Oe,e,0,t,o,i,null,n,a,s),d={};return await Promise.all(i.map((async e=>{if(!(e.route.id in c))return;let n=c[e.route.id];if(Qe(n))throw Me(n.result,t,e.route.id,i,r);if(Ze(n.result)&&l)throw n;d[e.route.id]=await Ne(n)}))),d}return{dataRoutes:o,query:async function(e,{requestContext:t,skipLoaderErrorBubbling:n,dataStrategy:a}={}){let l=new URL(e.url),s=e.method,u=S("",E(l),null,"default"),c=P(o,u,r);if(!nt(s)&&"HEAD"!==s){let e=Ve(405,{method:s}),{matches:t,route:n}=Ye(o);return{basename:r,location:u,matches:t,loaderData:{},actionData:null,errors:{[n.id]:e},statusCode:e.status,loaderHeaders:{},actionHeaders:{}}}if(!c){let e=Ve(404,{pathname:u.pathname}),{matches:t,route:n}=Ye(o);return{basename:r,location:u,matches:t,loaderData:{},actionData:null,errors:{[n.id]:e},statusCode:e.status,loaderHeaders:{},actionHeaders:{}}}let d=await i(e,u,c,t,a||null,!0===n,null);return Ze(d)?d:{location:u,basename:r,...d}},queryRoute:async function(e,{routeId:t,requestContext:n,dataStrategy:a}={}){let l=new URL(e.url),s=e.method,u=S("",E(l),null,"default"),c=P(o,u,r);if(!nt(s)&&"HEAD"!==s&&"OPTIONS"!==s)throw Ve(405,{method:s});if(!c)throw Ve(404,{pathname:u.pathname});let d=t?c.find((e=>e.route.id===t)):ot(c,u);if(t&&!d)throw Ve(403,{pathname:u.pathname,routeId:t});if(!d)throw Ve(404,{pathname:u.pathname});let f=await i(e,u,c,n,a||null,!1,d);if(Ze(f))return f;let h=f.errors?Object.values(f.errors)[0]:void 0;if(void 0!==h)throw h;return f.actionData?Object.values(f.actionData)[0]:f.loaderData?Object.values(f.loaderData)[0]:void 0}}}function Ee(e,t){if(void 0!==e.signal.reason)throw e.signal.reason;throw new Error(`${t?"queryRoute":"query"}() call aborted without an \`AbortSignal.reason\`: ${e.method} ${e.url}`)}function ke(e,t,n,r,a,o){let i,l;if(a){i=[];for(let e of t)if(i.push(e),e.route.id===a){l=e;break}}else i=t,l=t[t.length-1];let s=Q(r||".",J(i),q(e.pathname,n)||e.pathname,"path"===o);if(null==r&&(s.search=e.search,s.hash=e.hash),(null==r||""===r||"."===r)&&l){let e=at(s.search);if(l.route.index&&!e)s.search=s.search?s.search.replace(/^\?/,"?index&"):"?index";else if(!l.route.index&&e){let e=new URLSearchParams(s.search),t=e.getAll("index");e.delete("index"),t.filter((e=>e)).forEach((t=>e.append("index",t)));let n=e.toString();s.search=n?`?${n}`:""}}return"/"!==n&&(s.pathname="/"===s.pathname?n:K([n,s.pathname])),E(s)}function xe(e,t,n){if(!n||!function(e){return null!=e&&("formData"in e&&null!=e.formData||"body"in e&&void 0!==e.body)}(n))return{path:t};if(n.formMethod&&!nt(n.formMethod))return{path:t,error:Ve(405,{method:n.formMethod})};let r,a,o=()=>({path:t,error:Ve(400,{type:"invalid-body"})}),i=(n.formMethod||"get").toUpperCase(),l=Je(t);if(void 0!==n.body){if("text/plain"===n.formEncType){if(!rt(i))return o();let e="string"==typeof n.body?n.body:n.body instanceof FormData||n.body instanceof URLSearchParams?Array.from(n.body.entries()).reduce(((e,[t,n])=>`${e}${t}=${n}\n`),""):String(n.body);return{path:t,submission:{formMethod:i,formAction:l,formEncType:n.formEncType,formData:void 0,json:void 0,text:e}}}if("application/json"===n.formEncType){if(!rt(i))return o();try{let e="string"==typeof n.body?JSON.parse(n.body):n.body;return{path:t,submission:{formMethod:i,formAction:l,formEncType:n.formEncType,formData:void 0,json:e,text:void 0}}}catch(e){return o()}}}if(g("function"==typeof FormData,"FormData is not available in this environment"),n.formData)r=Fe(n.formData),a=n.formData;else if(n.body instanceof FormData)r=Fe(n.body),a=n.body;else if(n.body instanceof URLSearchParams)r=n.body,a=je(r);else if(null==n.body)r=new URLSearchParams,a=new FormData;else try{r=new URLSearchParams(n.body),a=je(r)}catch(e){return o()}let s={formMethod:i,formAction:l,formEncType:n&&n.formEncType||"application/x-www-form-urlencoded",formData:a,json:void 0,text:void 0};if(rt(s.formMethod))return{path:t,submission:s};let u=k(t);return e&&u.search&&at(u.search)&&r.append("index",""),u.search=`?${r}`,{path:E(u),submission:s}}function Re(e,t,n=!1){let r=e.findIndex((e=>e.route.id===t));return r>=0?e.slice(0,n?r+1:r):e}function Ce(e,t,n,r,a,o,i,l,s,u,c,d,f,h){let p=h?Ke(h[1])?h[1].error:h[1].data:void 0,m=e.createURL(t.location),y=e.createURL(a),v=n;o&&t.errors?v=Re(n,Object.keys(t.errors)[0],!0):h&&Ke(h[1])&&(v=Re(n,h[0]));let g=h?h[1].statusCode:void 0,b=g&&g>=400,w=v.filter(((e,n)=>{let{route:a}=e;if(a.lazy)return!0;if(null==a.loader)return!1;if(o)return Pe(a,t.loaderData,t.errors);if(function(e,t,n){let r=!t||n.route.id!==t.route.id,a=!e.hasOwnProperty(n.route.id);return r||a}(t.loaderData,t.matches[n],e))return!0;let l=t.matches[n],s=e;return Ae(e,{currentUrl:m,currentParams:l.params,nextUrl:y,nextParams:s.params,...r,actionResult:p,actionStatus:g,defaultShouldRevalidate:!b&&(i||m.pathname+m.search===y.pathname+y.search||m.search!==y.search||Le(l,s))})})),S=[];return u.forEach(((e,a)=>{if(o||!n.some((t=>t.route.id===e.routeId))||s.has(a))return;let u=P(d,e.path,f);if(!u)return void S.push({key:a,routeId:e.routeId,path:e.path,matches:null,match:null,controller:null});let h=t.fetchers.get(a),v=ot(u,e.path),w=!1;c.has(a)?w=!1:l.has(a)?(l.delete(a),w=!0):w=h&&"idle"!==h.state&&void 0===h.data?i:Ae(v,{currentUrl:m,currentParams:t.matches[t.matches.length-1].params,nextUrl:y,nextParams:n[n.length-1].params,...r,actionResult:p,actionStatus:g,defaultShouldRevalidate:!b&&i}),w&&S.push({key:a,routeId:e.routeId,path:e.path,matches:u,match:v,controller:new AbortController})})),[w,S]}function Pe(e,t,n){if(e.lazy)return!0;if(!e.loader)return!1;let r=null!=t&&void 0!==t[e.id],a=null!=n&&void 0!==n[e.id];return!(!r&&a)&&("function"==typeof e.loader&&!0===e.loader.hydrate||!r&&!a)}function Le(e,t){let n=e.route.path;return e.pathname!==t.pathname||null!=n&&n.endsWith("*")&&e.params["*"]!==t.params["*"]}function Ae(e,t){if(e.route.shouldRevalidate){let n=e.route.shouldRevalidate(t);if("boolean"==typeof n)return n}return t.defaultShouldRevalidate}function Te(e,t,n,r,a){let o;if(e){let t=r[e];g(t,`No route found to patch children into: routeId = ${e}`),t.children||(t.children=[]),o=t.children}else o=n;let i=C(t.filter((e=>!o.some((t=>_e(e,t))))),a,[e||"_","patch",String(o?.length||"0")],r);o.push(...i)}function _e(e,t){return"id"in e&&"id"in t&&e.id===t.id||e.index===t.index&&e.path===t.path&&e.caseSensitive===t.caseSensitive&&(!(e.children&&0!==e.children.length||t.children&&0!==t.children.length)||e.children.every(((e,n)=>t.children?.some((t=>_e(e,t))))))}async function Oe({matches:e}){let t=e.filter((e=>e.shouldLoad));return(await Promise.all(t.map((e=>e.resolve())))).reduce(((e,n,r)=>Object.assign(e,{[t[r].route.id]:n})),{})}async function De(e,t,n,r,a,o,i,l,s,u){let c=o.map((e=>e.route.lazy?async function(e,t,n){if(!e.lazy)return;let r=await e.lazy();if(!e.lazy)return;let a=n[e.id];g(a,"No route found in manifest");let o={};for(let e in r){let t=void 0!==a[e]&&"hasErrorBoundary"!==e;b(!t,`Route "${a.id}" has a static property "${e}" defined but its lazy function is also returning a value for this property. The lazy route property "${e}" will be ignored.`),t||R.has(e)||(o[e]=r[e])}Object.assign(a,o),Object.assign(a,{...t(a),lazy:void 0})}(e.route,s,l):void 0)),d=o.map(((e,n)=>{let o=c[n],i=a.some((t=>t.route.id===e.route.id));return{...e,shouldLoad:i,resolve:async n=>(n&&"GET"===r.method&&(e.route.lazy||e.route.loader)&&(i=!0),i?async function(e,t,n,r,a,o){let i,l,s=r=>{let i,s=new Promise(((e,t)=>i=t));l=()=>i(),t.signal.addEventListener("abort",l);let u=a=>"function"!=typeof r?Promise.reject(new Error(`You cannot call the handler for a route which defines a boolean "${e}" [routeId: ${n.route.id}]`)):r({request:t,params:n.params,context:o},...void 0!==a?[a]:[]),c=(async()=>{try{return{type:"data",result:await(a?a((e=>u(e))):u())}}catch(e){return{type:"error",result:e}}})();return Promise.race([c,s])};try{let a=n.route[e];if(r)if(a){let e,[t]=await Promise.all([s(a).catch((t=>{e=t})),r]);if(void 0!==e)throw e;i=t}else{if(await r,a=n.route[e],!a){if("action"===e){let e=new URL(t.url),r=e.pathname+e.search;throw Ve(405,{method:t.method,pathname:r,routeId:n.route.id})}return{type:"data",result:void 0}}i=await s(a)}else{if(!a){let e=new URL(t.url);throw Ve(404,{pathname:e.pathname+e.search})}i=await s(a)}}catch(e){return{type:"error",result:e}}finally{l&&t.signal.removeEventListener("abort",l)}return i}(t,r,e,o,n,u):Promise.resolve({type:"data",result:void 0}))}})),f=await e({matches:d,request:r,params:o[0].params,fetcherKey:i,context:u});try{await Promise.all(c)}catch(e){}return f}async function Ne(e){let{result:t,type:n}=e;if(Ze(t)){let e;try{let n=t.headers.get("Content-Type");e=n&&/\bapplication\/json\b/.test(n)?null==t.body?null:await t.json():await t.text()}catch(e){return{type:"error",error:e}}return"error"===n?{type:"error",error:new oe(t.status,t.statusText,e),statusCode:t.status,headers:t.headers}:{type:"data",data:e,statusCode:t.status,headers:t.headers}}if("error"===n){if(Xe(t)){if(t.data instanceof Error)return{type:"error",error:t.data,statusCode:t.init?.status};t=new oe(t.init?.status||500,void 0,t.data)}return{type:"error",error:t,statusCode:ie(t)?t.status:void 0}}return Xe(t)?{type:"data",data:t.data,statusCode:t.init?.status,headers:t.init?.headers?new Headers(t.init.headers):void 0}:{type:"data",data:t}}function Me(e,t,n,r,a){let o=e.headers.get("Location");if(g(o,"Redirects returned/thrown from loaders/actions must have a Location header"),!ye.test(o)){let i=r.slice(0,r.findIndex((e=>e.route.id===n))+1);o=ke(new URL(t.url),i,a,o),e.headers.set("Location",o)}return e}function ze(e,t,n){if(ye.test(e)){let r=e,a=r.startsWith("//")?new URL(t.protocol+r):new URL(r),o=null!=q(a.pathname,n);if(a.origin===t.origin&&o)return a.pathname+a.search+a.hash}return e}function $e(e,t,n,r){let a=e.createURL(Je(t)).toString(),o={signal:n};if(r&&rt(r.formMethod)){let{formMethod:e,formEncType:t}=r;o.method=e.toUpperCase(),"application/json"===t?(o.headers=new Headers({"Content-Type":t}),o.body=JSON.stringify(r.json)):"text/plain"===t?o.body=r.text:"application/x-www-form-urlencoded"===t&&r.formData?o.body=Fe(r.formData):o.body=r.formData}return new Request(a,o)}function Fe(e){let t=new URLSearchParams;for(let[n,r]of e.entries())t.append(n,"string"==typeof r?r:r.name);return t}function je(e){let t=new FormData;for(let[n,r]of e.entries())t.append(n,r);return t}function Ie(e,t,n,r=!1,a=!1){let o,i={},l=null,s=!1,u={},c=n&&Ke(n[1])?n[1].error:void 0;return e.forEach((n=>{if(!(n.route.id in t))return;let d=n.route.id,f=t[d];if(g(!Ge(f),"Cannot handle redirect results in processLoaderData"),Ke(f)){let t=f.error;if(void 0!==c&&(t=c,c=void 0),l=l||{},a)l[d]=t;else{let n=qe(e,d);null==l[n.route.id]&&(l[n.route.id]=t)}r||(i[d]=be),s||(s=!0,o=ie(f.error)?f.error.status:500),f.headers&&(u[d]=f.headers)}else i[d]=f.data,f.statusCode&&200!==f.statusCode&&!s&&(o=f.statusCode),f.headers&&(u[d]=f.headers)})),void 0!==c&&n&&(l={[n[0]]:c},i[n[0]]=void 0),{loaderData:i,errors:l,statusCode:o||200,loaderHeaders:u}}function Ue(e,t,n,r,a,o){let{loaderData:i,errors:l}=Ie(t,n,r);return a.forEach((t=>{let{key:n,match:r,controller:a}=t,i=o[n];if(g(i,"Did not find corresponding fetcher result"),!a||!a.signal.aborted)if(Ke(i)){let t=qe(e.matches,r?.route.id);l&&l[t.route.id]||(l={...l,[t.route.id]:i.error}),e.fetchers.delete(n)}else if(Ge(i))g(!1,"Unhandled fetcher revalidation redirect");else{let t=ut(i.data);e.fetchers.set(n,t)}})),{loaderData:i,errors:l}}function He(e,t,n,r){let a=Object.entries(t).filter((([,e])=>e!==be)).reduce(((e,[t,n])=>(e[t]=n,e)),{});for(let o of n){let n=o.route.id;if(!t.hasOwnProperty(n)&&e.hasOwnProperty(n)&&o.route.loader&&(a[n]=e[n]),r&&r.hasOwnProperty(n))break}return a}function Be(e){return e?Ke(e[1])?{actionData:{}}:{actionData:{[e[0]]:e[1].data}}:{}}function qe(e,t){return(t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e]).reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function Ye(e){let t=1===e.length?e[0]:e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function Ve(e,{pathname:t,routeId:n,method:r,type:a,message:o}={}){let i="Unknown Server Error",l="Unknown @remix-run/router error";return 400===e?(i="Bad Request",r&&t&&n?l=`You made a ${r} request to "${t}" but did not provide a \`loader\` for route "${n}", so there is no way to handle the request.`:"invalid-body"===a&&(l="Unable to encode submission body")):403===e?(i="Forbidden",l=`Route "${n}" does not match URL "${t}"`):404===e?(i="Not Found",l=`No route matches URL "${t}"`):405===e&&(i="Method Not Allowed",r&&t&&n?l=`You made a ${r.toUpperCase()} request to "${t}" but did not provide an \`action\` for route "${n}", so there is no way to handle the request.`:r&&(l=`Invalid request method "${r.toUpperCase()}"`)),new oe(e||500,i,new Error(l),!0)}function We(e){let t=Object.entries(e);for(let e=t.length-1;e>=0;e--){let[n,r]=t[e];if(Ge(r))return{key:n,result:r}}}function Je(e){return E({..."string"==typeof e?k(e):e,hash:""})}function Qe(e){return Ze(e.result)&&de.has(e.result.status)}function Ke(e){return"error"===e.type}function Ge(e){return"redirect"===(e&&e.type)}function Xe(e){return"object"==typeof e&&null!=e&&"type"in e&&"data"in e&&"init"in e&&"DataWithResponseInit"===e.type}function Ze(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"object"==typeof e.headers&&void 0!==e.body}function et(e){return de.has(e)}function tt(e){return Ze(e)&&et(e.status)&&e.headers.has("Location")}function nt(e){return ce.has(e.toUpperCase())}function rt(e){return se.has(e.toUpperCase())}function at(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function ot(e,t){let n="string"==typeof t?k(t).search:t.search;if(e[e.length-1].route.index&&at(n||""))return e[e.length-1];let r=W(e);return r[r.length-1]}function it(e){let{formMethod:t,formAction:n,formEncType:r,text:a,formData:o,json:i}=e;if(t&&n&&r)return null!=a?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:void 0,text:a}:null!=o?{formMethod:t,formAction:n,formEncType:r,formData:o,json:void 0,text:void 0}:void 0!==i?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:i,text:void 0}:void 0}function lt(e,t){return t?{state:"loading",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}:{state:"loading",location:e,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function st(e,t){return e?{state:"loading",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t}}function ut(e){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:e}}var ct=d(n(471)),dt=d(n(471)),ft=dt.createContext(null);ft.displayName="DataRouter";var ht=dt.createContext(null);ht.displayName="DataRouterState";var pt=dt.createContext({isTransitioning:!1});pt.displayName="ViewTransition";var mt=dt.createContext(new Map);mt.displayName="Fetchers";var yt=dt.createContext(null);yt.displayName="Await";var vt=dt.createContext(null);vt.displayName="Navigation";var gt=dt.createContext(null);gt.displayName="Location";var bt=dt.createContext({outlet:null,matches:[],isDataRoute:!1});bt.displayName="Route";var wt=dt.createContext(null);wt.displayName="RouteError";var St=d(n(471)),Et=!0;function kt(e,{relative:t}={}){g(xt(),"useHref() may be used only in the context of a <Router> component.");let{basename:n,navigator:r}=St.useContext(vt),{hash:a,pathname:o,search:i}=Mt(e,{relative:t}),l=o;return"/"!==n&&(l="/"===o?n:K([n,o])),r.createHref({pathname:l,search:i,hash:a})}function xt(){return null!=St.useContext(gt)}function Rt(){return g(xt(),"useLocation() may be used only in the context of a <Router> component."),St.useContext(gt).location}function Ct(){return St.useContext(gt).navigationType}function Pt(e){g(xt(),"useMatch() may be used only in the context of a <Router> component.");let{pathname:t}=Rt();return St.useMemo((()=>H(e,B(t))),[t,e])}var Lt="You should call navigate() in a React.useEffect(), not when your component is first rendered.";function At(e){St.useContext(vt).static||St.useLayoutEffect(e)}function Tt(){let{isDataRoute:e}=St.useContext(bt);return e?function(){let{router:e}=qt("useNavigate"),t=Vt("useNavigate"),n=St.useRef(!1);At((()=>{n.current=!0}));let r=St.useCallback((async(r,a={})=>{b(n.current,Lt),n.current&&("number"==typeof r?e.navigate(r):await e.navigate(r,{fromRouteId:t,...a}))}),[e,t]);return r}():function(){g(xt(),"useNavigate() may be used only in the context of a <Router> component.");let e=St.useContext(ft),{basename:t,navigator:n}=St.useContext(vt),{matches:r}=St.useContext(bt),{pathname:a}=Rt(),o=JSON.stringify(J(r)),i=St.useRef(!1);At((()=>{i.current=!0}));let l=St.useCallback(((r,l={})=>{if(b(i.current,Lt),!i.current)return;if("number"==typeof r)return void n.go(r);let s=Q(r,JSON.parse(o),a,"path"===l.relative);null==e&&"/"!==t&&(s.pathname="/"===s.pathname?t:K([t,s.pathname])),(l.replace?n.replace:n.push)(s,l.state,l)}),[t,n,o,a,e]);return l}()}var _t=St.createContext(null);function Ot(){return St.useContext(_t)}function Dt(e){let t=St.useContext(bt).outlet;return t?St.createElement(_t.Provider,{value:e},t):t}function Nt(){let{matches:e}=St.useContext(bt),t=e[e.length-1];return t?t.params:{}}function Mt(e,{relative:t}={}){let{matches:n}=St.useContext(bt),{pathname:r}=Rt(),a=JSON.stringify(J(n));return St.useMemo((()=>Q(e,JSON.parse(a),r,"path"===t)),[e,a,r,t])}function zt(e,t){return $t(e,t)}function $t(e,t,n,r){g(xt(),"useRoutes() may be used only in the context of a <Router> component.");let{navigator:a}=St.useContext(vt),{matches:o}=St.useContext(bt),i=o[o.length-1],l=i?i.params:{},s=i?i.pathname:"/",u=i?i.pathnameBase:"/",c=i&&i.route;if(Et){let e=c&&c.path||"";on(s,!c||e.endsWith("*")||e.endsWith("*?"),`You rendered descendant <Routes> (or called \`useRoutes()\`) at "${s}" (under <Route path="${e}">) but the parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.\n\nPlease change the parent <Route path="${e}"> to <Route path="${"/"===e?"*":`${e}/*`}">.`)}let d,f=Rt();if(t){let e="string"==typeof t?k(t):t;g("/"===u||e.pathname?.startsWith(u),`When overriding the location using \`<Routes location>\` or \`useRoutes(routes, location)\`, the location pathname must begin with the portion of the URL pathname that was matched by all parent routes. The current pathname base is "${u}" but pathname "${e.pathname}" was given in the \`location\` prop.`),d=e}else d=f;let h=d.pathname||"/",p=h;if("/"!==u){let e=u.replace(/^\//,"").split("/");p="/"+h.replace(/^\//,"").split("/").slice(e.length).join("/")}let m=P(e,{pathname:p});Et&&(b(c||null!=m,`No routes matched location "${d.pathname}${d.search}${d.hash}" `),b(null==m||void 0!==m[m.length-1].route.element||void 0!==m[m.length-1].route.Component||void 0!==m[m.length-1].route.lazy,`Matched leaf route at location "${d.pathname}${d.search}${d.hash}" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.`));let y=Ht(m&&m.map((e=>Object.assign({},e,{params:Object.assign({},l,e.params),pathname:K([u,a.encodeLocation?a.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?u:K([u,a.encodeLocation?a.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),o,n,r);return t&&y?St.createElement(gt.Provider,{value:{location:{pathname:"/",search:"",hash:"",state:null,key:"default",...d},navigationType:"POP"}},y):y}function Ft(){let e=Zt(),t=ie(e)?`${e.status} ${e.statusText}`:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,r="rgba(200,200,200, 0.5)",a={padding:"0.5rem",backgroundColor:r},o={padding:"2px 4px",backgroundColor:r},i=null;return Et&&(console.error("Error handled by React Router default ErrorBoundary:",e),i=St.createElement(St.Fragment,null,St.createElement("p",null,"💿 Hey developer 👋"),St.createElement("p",null,"You can provide a way better UX than this when your app throws errors by providing your own ",St.createElement("code",{style:o},"ErrorBoundary")," or"," ",St.createElement("code",{style:o},"errorElement")," prop on your route."))),St.createElement(St.Fragment,null,St.createElement("h2",null,"Unexpected Application Error!"),St.createElement("h3",{style:{fontStyle:"italic"}},t),n?St.createElement("pre",{style:a},n):null,i)}var jt=St.createElement(Ft,null),It=class extends St.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?St.createElement(bt.Provider,{value:this.props.routeContext},St.createElement(wt.Provider,{value:this.state.error,children:this.props.component})):this.props.children}};function Ut({routeContext:e,match:t,children:n}){let r=St.useContext(ft);return r&&r.static&&r.staticContext&&(t.route.errorElement||t.route.ErrorBoundary)&&(r.staticContext._deepestRenderedBoundaryId=t.route.id),St.createElement(bt.Provider,{value:e},n)}function Ht(e,t=[],n=null,r=null){if(null==e){if(!n)return null;if(n.errors)e=n.matches;else{if(0!==t.length||n.initialized||!(n.matches.length>0))return null;e=n.matches}}let a=e,o=n?.errors;if(null!=o){let e=a.findIndex((e=>e.route.id&&void 0!==o?.[e.route.id]));g(e>=0,`Could not find a matching route for errors on route IDs: ${Object.keys(o).join(",")}`),a=a.slice(0,Math.min(a.length,e+1))}let i=!1,l=-1;if(n)for(let e=0;e<a.length;e++){let t=a[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(l=e),t.route.id){let{loaderData:e,errors:r}=n,o=t.route.loader&&!e.hasOwnProperty(t.route.id)&&(!r||void 0===r[t.route.id]);if(t.route.lazy||o){i=!0,a=l>=0?a.slice(0,l+1):[a[0]];break}}}return a.reduceRight(((e,r,s)=>{let u,c=!1,d=null,f=null;n&&(u=o&&r.route.id?o[r.route.id]:void 0,d=r.route.errorElement||jt,i&&(l<0&&0===s?(on("route-fallback",!1,"No `HydrateFallback` element provided to render during initial hydration"),c=!0,f=null):l===s&&(c=!0,f=r.route.hydrateFallbackElement||null)));let h=t.concat(a.slice(0,s+1)),p=()=>{let t;return t=u?d:c?f:r.route.Component?St.createElement(r.route.Component,null):r.route.element?r.route.element:e,St.createElement(Ut,{match:r,routeContext:{outlet:e,matches:h,isDataRoute:null!=n},children:t})};return n&&(r.route.ErrorBoundary||r.route.errorElement||0===s)?St.createElement(It,{location:n.location,revalidation:n.revalidation,component:d,error:u,children:p(),routeContext:{outlet:null,matches:h,isDataRoute:!0}}):p()}),null)}function Bt(e){return`${e} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`}function qt(e){let t=St.useContext(ft);return g(t,Bt(e)),t}function Yt(e){let t=St.useContext(ht);return g(t,Bt(e)),t}function Vt(e){let t=function(e){let t=St.useContext(bt);return g(t,Bt(e)),t}(e),n=t.matches[t.matches.length-1];return g(n.route.id,`${e} can only be used on routes that contain a unique "id"`),n.route.id}function Wt(){return Yt("useNavigation").navigation}function Jt(){let e=qt("useRevalidator"),t=Yt("useRevalidator");return St.useMemo((()=>({async revalidate(){await e.router.revalidate()},state:t.revalidation})),[e.router,t.revalidation])}function Qt(){let{matches:e,loaderData:t}=Yt("useMatches");return St.useMemo((()=>e.map((e=>A(e,t)))),[e,t])}function Kt(){let e=Yt("useLoaderData"),t=Vt("useLoaderData");return e.loaderData[t]}function Gt(e){return Yt("useRouteLoaderData").loaderData[e]}function Xt(){let e=Yt("useActionData"),t=Vt("useLoaderData");return e.actionData?e.actionData[t]:void 0}function Zt(){let e=St.useContext(wt),t=Yt("useRouteError"),n=Vt("useRouteError");return void 0!==e?e:t.errors?.[n]}function en(){let e=St.useContext(yt);return e?._data}function tn(){let e=St.useContext(yt);return e?._error}var nn=0;function rn(e){let{router:t,basename:n}=qt("useBlocker"),r=Yt("useBlocker"),[a,o]=St.useState(""),i=St.useCallback((t=>{if("function"!=typeof e)return!!e;if("/"===n)return e(t);let{currentLocation:r,nextLocation:a,historyAction:o}=t;return e({currentLocation:{...r,pathname:q(r.pathname,n)||r.pathname},nextLocation:{...a,pathname:q(a.pathname,n)||a.pathname},historyAction:o})}),[n,e]);return St.useEffect((()=>{let e=String(++nn);return o(e),()=>t.deleteBlocker(e)}),[t]),St.useEffect((()=>{""!==a&&t.getBlocker(a,i)}),[t,a,i]),a&&r.blockers.has(a)?r.blockers.get(a):me}var an={};function on(e,t,n){t||an[e]||(an[e]=!0,b(!1,n))}var ln={};function sn(e,t){e||ln[t]||(ln[t]=!0,console.warn(t))}var un=!0;function cn(e){let t={hasErrorBoundary:e.hasErrorBoundary||null!=e.ErrorBoundary||null!=e.errorElement};return e.Component&&(un&&e.element&&b(!1,"You should not include both `Component` and `element` on your route - `Component` will be used."),Object.assign(t,{element:ct.createElement(e.Component),Component:void 0})),e.HydrateFallback&&(un&&e.hydrateFallbackElement&&b(!1,"You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - `HydrateFallback` will be used."),Object.assign(t,{hydrateFallbackElement:ct.createElement(e.HydrateFallback),HydrateFallback:void 0})),e.ErrorBoundary&&(un&&e.errorElement&&b(!1,"You should not include both `ErrorBoundary` and `errorElement` on your route - `ErrorBoundary` will be used."),Object.assign(t,{errorElement:ct.createElement(e.ErrorBoundary),ErrorBoundary:void 0})),t}function dn(e,t){return we({basename:t?.basename,future:t?.future,history:m({initialEntries:t?.initialEntries,initialIndex:t?.initialIndex}),hydrationData:t?.hydrationData,routes:e,mapRouteProperties:cn,dataStrategy:t?.dataStrategy,patchRoutesOnNavigation:t?.patchRoutesOnNavigation}).initialize()}var fn=class{constructor(){this.status="pending",this.promise=new Promise(((e,t)=>{this.resolve=t=>{"pending"===this.status&&(this.status="resolved",e(t))},this.reject=e=>{"pending"===this.status&&(this.status="rejected",t(e))}}))}};function hn({router:e,flushSync:t}){let[n,r]=ct.useState(e.state),[a,o]=ct.useState(),[i,l]=ct.useState({isTransitioning:!1}),[s,u]=ct.useState(),[c,d]=ct.useState(),[f,h]=ct.useState(),p=ct.useRef(new Map),m=ct.useCallback(((n,{deletedFetchers:a,flushSync:i,viewTransitionOpts:f})=>{a.forEach((e=>p.current.delete(e))),n.fetchers.forEach(((e,t)=>{void 0!==e.data&&p.current.set(t,e.data)})),sn(!1===i||null!=t,'You provided the `flushSync` option to a router update, but you are not using the `<RouterProvider>` from `react-router/dom` so `ReactDOM.flushSync()` is unavailable.  Please update your app to `import { RouterProvider } from "react-router/dom"` and ensure you have `react-dom` installed as a dependency to use the `flushSync` option.');let m=null!=e.window&&null!=e.window.document&&"function"==typeof e.window.document.startViewTransition;if(sn(null==f||m,"You provided the `viewTransition` option to a router update, but you do not appear to be running in a DOM environment as `window.startViewTransition` is not available."),f&&m){if(t&&i){t((()=>{c&&(s&&s.resolve(),c.skipTransition()),l({isTransitioning:!0,flushSync:!0,currentLocation:f.currentLocation,nextLocation:f.nextLocation})}));let a=e.window.document.startViewTransition((()=>{t((()=>r(n)))}));return a.finished.finally((()=>{t((()=>{u(void 0),d(void 0),o(void 0),l({isTransitioning:!1})}))})),void t((()=>d(a)))}c?(s&&s.resolve(),c.skipTransition(),h({state:n,currentLocation:f.currentLocation,nextLocation:f.nextLocation})):(o(n),l({isTransitioning:!0,flushSync:!1,currentLocation:f.currentLocation,nextLocation:f.nextLocation}))}else t&&i?t((()=>r(n))):ct.startTransition((()=>r(n)))}),[e.window,t,c,s]);ct.useLayoutEffect((()=>e.subscribe(m)),[e,m]),ct.useEffect((()=>{i.isTransitioning&&!i.flushSync&&u(new fn)}),[i]),ct.useEffect((()=>{if(s&&a&&e.window){let t=a,n=s.promise,i=e.window.document.startViewTransition((async()=>{ct.startTransition((()=>r(t))),await n}));i.finished.finally((()=>{u(void 0),d(void 0),o(void 0),l({isTransitioning:!1})})),d(i)}}),[a,s,e.window]),ct.useEffect((()=>{s&&a&&n.location.key===a.location.key&&s.resolve()}),[s,c,n.location,a]),ct.useEffect((()=>{!i.isTransitioning&&f&&(o(f.state),l({isTransitioning:!0,flushSync:!1,currentLocation:f.currentLocation,nextLocation:f.nextLocation}),h(void 0))}),[i.isTransitioning,f]);let y=ct.useMemo((()=>({createHref:e.createHref,encodeLocation:e.encodeLocation,go:t=>e.navigate(t),push:(t,n,r)=>e.navigate(t,{state:n,preventScrollReset:r?.preventScrollReset}),replace:(t,n,r)=>e.navigate(t,{replace:!0,state:n,preventScrollReset:r?.preventScrollReset})})),[e]),v=e.basename||"/",g=ct.useMemo((()=>({router:e,navigator:y,static:!1,basename:v})),[e,y,v]);return ct.createElement(ct.Fragment,null,ct.createElement(ft.Provider,{value:g},ct.createElement(ht.Provider,{value:n},ct.createElement(mt.Provider,{value:p.current},ct.createElement(pt.Provider,{value:i},ct.createElement(bn,{basename:v,location:n.location,navigationType:n.historyAction,navigator:y},ct.createElement(pn,{routes:e.routes,future:e.future,state:n})))))),null)}var pn=ct.memo((function({routes:e,future:t,state:n}){return $t(e,void 0,n,t)}));function mn({basename:e,children:t,initialEntries:n,initialIndex:r}){let a=ct.useRef();null==a.current&&(a.current=m({initialEntries:n,initialIndex:r,v5Compat:!0}));let o=a.current,[i,l]=ct.useState({action:o.action,location:o.location}),s=ct.useCallback((e=>{ct.startTransition((()=>l(e)))}),[l]);return ct.useLayoutEffect((()=>o.listen(s)),[o,s]),ct.createElement(bn,{basename:e,children:t,location:i.location,navigationType:i.action,navigator:o})}function yn({to:e,replace:t,state:n,relative:r}){g(xt(),"<Navigate> may be used only in the context of a <Router> component.");let{static:a}=ct.useContext(vt);b(!a,"<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.");let{matches:o}=ct.useContext(bt),{pathname:i}=Rt(),l=Tt(),s=Q(e,J(o),i,"path"===r),u=JSON.stringify(s);return ct.useEffect((()=>{l(JSON.parse(u),{replace:t,state:n,relative:r})}),[l,u,r,t,n]),null}function vn(e){return Dt(e.context)}function gn(e){g(!1,"A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.")}function bn({basename:e="/",children:t=null,location:n,navigationType:r="POP",navigator:a,static:o=!1}){g(!xt(),"You cannot render a <Router> inside another <Router>. You should never have more than one in your app.");let i=e.replace(/^\/*/,"/"),l=ct.useMemo((()=>({basename:i,navigator:a,static:o,future:{}})),[i,a,o]);"string"==typeof n&&(n=k(n));let{pathname:s="/",search:u="",hash:c="",state:d=null,key:f="default"}=n,h=ct.useMemo((()=>{let e=q(s,i);return null==e?null:{location:{pathname:e,search:u,hash:c,state:d,key:f},navigationType:r}}),[i,s,u,c,d,f,r]);return b(null!=h,`<Router basename="${i}"> is not able to match the URL "${s}${u}${c}" because it does not start with the basename, so the <Router> won't render anything.`),null==h?null:ct.createElement(vt.Provider,{value:l},ct.createElement(gt.Provider,{children:t,value:h}))}function wn({children:e,location:t}){return zt(xn(e),t)}function Sn({children:e,errorElement:t,resolve:n}){return ct.createElement(En,{resolve:n,errorElement:t},ct.createElement(kn,null,e))}var En=class extends ct.Component{constructor(e){super(e),this.state={error:null}}static getDerivedStateFromError(e){return{error:e}}componentDidCatch(e,t){console.error("<Await> caught the following error during render",e,t)}render(){let{children:e,errorElement:t,resolve:n}=this.props,r=null,a=0;if(n instanceof Promise)if(this.state.error){a=2;let e=this.state.error;r=Promise.reject().catch((()=>{})),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_error",{get:()=>e})}else n._tracked?(r=n,a="_error"in r?2:"_data"in r?1:0):(a=0,Object.defineProperty(n,"_tracked",{get:()=>!0}),r=n.then((e=>Object.defineProperty(n,"_data",{get:()=>e})),(e=>Object.defineProperty(n,"_error",{get:()=>e}))));else a=1,r=Promise.resolve(),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_data",{get:()=>n});if(2===a&&!t)throw r._error;if(2===a)return ct.createElement(yt.Provider,{value:r,children:t});if(1===a)return ct.createElement(yt.Provider,{value:r,children:e});throw r}};function kn({children:e}){let t=en(),n="function"==typeof e?e(t):e;return ct.createElement(ct.Fragment,null,n)}function xn(e,t=[]){let n=[];return ct.Children.forEach(e,((e,r)=>{if(!ct.isValidElement(e))return;let a=[...t,r];if(e.type===ct.Fragment)return void n.push.apply(n,xn(e.props.children,a));g(e.type===gn,`[${"string"==typeof e.type?e.type:e.type.name}] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`),g(!e.props.index||!e.props.children,"An index route cannot have child routes.");let o={id:e.props.id||a.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,hydrateFallbackElement:e.props.hydrateFallbackElement,HydrateFallback:e.props.HydrateFallback,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:!0===e.props.hasErrorBoundary||null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(o.children=xn(e.props.children,a)),n.push(o)})),n}var Rn=xn;function Cn(e){return Ht(e)}var Pn=d(n(471)),Ln="get",An="application/x-www-form-urlencoded";function Tn(e){return null!=e&&"string"==typeof e.tagName}function _n(e=""){return new URLSearchParams("string"==typeof e||Array.isArray(e)||e instanceof URLSearchParams?e:Object.keys(e).reduce(((t,n)=>{let r=e[n];return t.concat(Array.isArray(r)?r.map((e=>[n,e])):[[n,r]])}),[]))}var On=null,Dn=new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);function Nn(e){return null==e||Dn.has(e)?e:(b(!1,`"${e}" is not a valid \`encType\` for \`<Form>\`/\`<fetcher.Form>\` and will default to "${An}"`),null)}var Mn,zn=d(n(471));function $n(e,t){if(!1===e||null==e)throw new Error(t)}async function Fn(e,t){if(e.id in t)return t[e.id];try{let n=await import(e.module);return t[e.id]=n,n}catch(t){return console.error(`Error loading route module \`${e.module}\`, reloading page...`),console.error(t),window.__reactRouterContext&&window.__reactRouterContext.isSpaMode,window.location.reload(),new Promise((()=>{}))}}async function jn(e,t){if(!e.css&&!t.links||!function(){if(void 0!==Mn)return Mn;let e=document.createElement("link");return Mn=e.relList.supports("preload"),e=null,Mn}())return;let n=[];if(e.css&&n.push(...e.css.map((e=>({rel:"stylesheet",href:e})))),t.links&&n.push(...t.links()),0===n.length)return;let r=[];for(let e of n)Un(e)||"stylesheet"!==e.rel||r.push({...e,rel:"preload",as:"style"});let a=r.filter((e=>(!e.media||window.matchMedia(e.media).matches)&&!document.querySelector(`link[rel="stylesheet"][href="${e.href}"]`)));await Promise.all(a.map(In))}async function In(e){return new Promise((t=>{let n=document.createElement("link");function r(){document.head.contains(n)&&document.head.removeChild(n)}Object.assign(n,e),n.onload=()=>{r(),t()},n.onerror=()=>{r(),t()},document.head.appendChild(n)}))}function Un(e){return null!=e&&"string"==typeof e.page}function Hn(e){return null!=e&&(null==e.href?"preload"===e.rel&&"string"==typeof e.imageSrcSet&&"string"==typeof e.imageSizes:"string"==typeof e.rel&&"string"==typeof e.href)}function Bn(e,t,n,r,a,o){let i=(e,t)=>!n[t]||e.route.id!==n[t].route.id,l=(e,t)=>n[t].pathname!==e.pathname||n[t].route.path?.endsWith("*")&&n[t].params["*"]!==e.params["*"];return"assets"===o?t.filter(((e,t)=>i(e,t)||l(e,t))):"data"===o?t.filter(((t,o)=>{let s=r.routes[t.route.id];if(!s||!s.hasLoader)return!1;if(i(t,o)||l(t,o))return!0;if(t.route.shouldRevalidate){let r=t.route.shouldRevalidate({currentUrl:new URL(a.pathname+a.search+a.hash,window.origin),currentParams:n[0]?.params||{},nextUrl:new URL(e,window.origin),nextParams:t.params,defaultShouldRevalidate:!0});if("boolean"==typeof r)return r}return!0})):[]}function qn(e){return[...new Set(e)]}function Yn(e,t){let n=new Set,r=new Set(t);return e.reduce(((e,a)=>{if(t&&!Un(a)&&"script"===a.as&&a.href&&r.has(a.href))return e;let o=JSON.stringify(function(e){let t={},n=Object.keys(e).sort();for(let r of n)t[r]=e[r];return t}(a));return n.has(o)||(n.add(o),e.push({key:o,link:a})),e}),[])}var Vn={"&":"\\u0026",">":"\\u003e","<":"\\u003c","\u2028":"\\u2028","\u2029":"\\u2029"},Wn=/[&><\u2028\u2029]/g;function Jn(e){return{__html:e}}var Qn=d(n(471)),Kn=n(413);async function Gn(e){let t={signal:e.signal};if("GET"!==e.method){t.method=e.method;let n=e.headers.get("Content-Type");n&&/\bapplication\/json\b/.test(n)?(t.headers={"Content-Type":n},t.body=JSON.stringify(await e.json())):n&&/\btext\/plain\b/.test(n)?(t.headers={"Content-Type":n},t.body=await e.text()):n&&/\bapplication\/x-www-form-urlencoded\b/.test(n)?t.body=new URLSearchParams(await e.text()):t.body=await e.formData()}return t}var Xn=Symbol("SingleFetchRedirect");function Zn({context:e,identifier:t,reader:n,textDecoder:r,nonce:a}){if(!e.renderMeta||!e.renderMeta.didRenderScripts)return null;e.renderMeta.streamCache||(e.renderMeta.streamCache={});let{streamCache:o}=e.renderMeta,i=o[t];if(i||(i=o[t]=n.read().then((e=>{o[t].result={done:e.done,value:r.decode(e.value,{stream:!0})}})).catch((e=>{o[t].error=e}))),i.error)throw i.error;if(void 0===i.result)throw i;let{done:l,value:s}=i.result,u=s?Qn.createElement("script",{nonce:a,dangerouslySetInnerHTML:{__html:`window.__reactRouterContext.streamController.enqueue(${c=JSON.stringify(s),c.replace(Wn,(e=>Vn[e]))});`}}):null;var c;return l?Qn.createElement(Qn.Fragment,null,u,Qn.createElement("script",{nonce:a,dangerouslySetInnerHTML:{__html:"window.__reactRouterContext.streamController.close();"}})):Qn.createElement(Qn.Fragment,null,u,Qn.createElement(Qn.Suspense,null,Qn.createElement(Zn,{context:e,identifier:t+1,reader:n,textDecoder:r,nonce:a})))}function er(e,t,n){return async({request:r,matches:a,fetcherKey:o})=>"GET"!==r.method?async function(e,t){let n=t.find((e=>e.shouldLoad));$n(n,"No action match found");let r,a=await n.resolve((async t=>await t((async()=>{let t=rr(e.url),a=await Gn(e),{data:o,status:i}=await ar(t,a);return r=i,lr(o,n.route.id)}))));return Ze(a.result)||ie(a.result)?{[n.route.id]:a}:{[n.route.id]:{type:a.type,result:te(a.result,r)}}}(r,a):o?async function(e,t){let n=t.find((e=>e.shouldLoad));$n(n,"No fetcher match found");let r=await n.resolve((async t=>tr(t,nr(rr(e.url)),await Gn(e),n.route.id)));return{[n.route.id]:r}}(r,a):async function(e,t,n,r,a){let o=new Set,i=!1,l=a.map((()=>sr())),s=Promise.all(l.map((e=>e.promise))),u=sr(),c=nr(rr(r.url)),d=await Gn(r),f={},h=Promise.all(a.map((async(r,a)=>r.resolve((async s=>{l[a].resolve();let h=e.routes[r.route.id];if(!r.shouldLoad){if(!n.state.initialized)return;if(r.route.id in n.state.loaderData&&h&&h.hasLoader&&t[r.route.id]?.shouldRevalidate)return void(i=!0)}if(h&&h.hasClientLoader){h.hasLoader&&(i=!0);try{let e=await tr(s,c,d,r.route.id);f[r.route.id]={type:"data",result:e}}catch(e){f[r.route.id]={type:"error",result:e}}}else{h&&h.hasLoader&&o.add(r.route.id);try{let e=await s((async()=>ir(await u.promise,r.route.id)));f[r.route.id]={type:"data",result:e}}catch(e){f[r.route.id]={type:"error",result:e}}}})))));if(await s,n.state.initialized&&0!==o.size||window.__reactRouterHdrActive)try{i&&o.size>0&&c.searchParams.set("_routes",a.filter((e=>o.has(e.route.id))).map((e=>e.route.id)).join(","));let e=await ar(c,d);u.resolve(e.data)}catch(e){u.reject(e)}else u.resolve({});return await h,f}(e,t,n(),r,a)}function tr(e,t,n,r){return e((async()=>{let e=new URL(t);e.searchParams.set("_routes",r);let{data:a}=await ar(e,n);return ir(a,r)}))}function nr(e){let t=e.searchParams.getAll("index");e.searchParams.delete("index");let n=[];for(let e of t)e&&n.push(e);for(let t of n)e.searchParams.append("index",t);return e}function rr(e){let t="string"==typeof e?new URL(e,"undefined"==typeof window?"server://singlefetch/":window.location.origin):e;return"/"===t.pathname?t.pathname="_root.data":t.pathname=`${t.pathname.replace(/\/$/,"")}.data`,t}async function ar(e,t){let n=await fetch(e,t);if(404===n.status&&!n.headers.has("X-Remix-Response"))throw new oe(404,"Not Found",!0);$n(n.body,"No response body to decode");try{let e=await or(n.body,window);return{status:n.status,data:e.value}}catch(e){throw new Error("Unable to decode turbo-stream response")}}function or(e,t){return(0,Kn.decode)(e,{plugins:[(e,...n)=>{if("SanitizedError"===e){let[e,r,a]=n,o=Error;e&&e in t&&"function"==typeof t[e]&&(o=t[e]);let i=new o(r);return i.stack=a,{value:i}}if("ErrorResponse"===e){let[e,t,r]=n;return{value:new oe(t,r,e)}}return"SingleFetchRedirect"===e?{value:{[Xn]:n[0]}}:"SingleFetchClassInstance"===e?{value:n[0]}:"SingleFetchFallback"===e?{value:void 0}:void 0}]})}function ir(e,t){let n=e[Xn];return n?lr(n,t):void 0!==e[t]?lr(e[t],t):null}function lr(e,t){if("error"in e)throw e.error;if("redirect"in e){let t={};throw e.revalidate&&(t["X-Remix-Revalidate"]="yes"),e.reload&&(t["X-Remix-Reload-Document"]="yes"),e.replace&&(t["X-Remix-Replace"]="yes"),ne(e.redirect,{status:e.status,headers:t})}if("data"in e)return e.data;throw new Error(`No response found for routeId "${t}"`)}function sr(){let e,t,n=new Promise(((r,a)=>{e=async e=>{r(e);try{await n}catch(e){}},t=async e=>{a(e);try{await n}catch(e){}}}));return{promise:n,resolve:e,reject:t}}var ur=d(n(471)),cr=d(n(471)),dr=d(n(471)),fr=class extends dr.Component{constructor(e){super(e),this.state={error:e.error||null,location:e.location}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location?{error:e.error||null,location:e.location}:{error:e.error||t.error,location:t.location}}render(){return this.state.error?dr.createElement(hr,{error:this.state.error,isOutsideRemixApp:!0}):this.props.children}};function hr({error:e,isOutsideRemixApp:t}){console.error(e);let n,r=dr.createElement("script",{dangerouslySetInnerHTML:{__html:'\n        console.log(\n          "💿 Hey developer 👋. You can provide a way better UX than this when your app throws errors. Check out https://remix.run/guides/errors for more information."\n        );\n      '}});if(ie(e))return dr.createElement(pr,{title:"Unhandled Thrown Response!"},dr.createElement("h1",{style:{fontSize:"24px"}},e.status," ",e.statusText),r);if(e instanceof Error)n=e;else{let t=null==e?"Unknown Error":"object"==typeof e&&"toString"in e?e.toString():JSON.stringify(e);n=new Error(t)}return dr.createElement(pr,{title:"Application Error!",isOutsideRemixApp:t},dr.createElement("h1",{style:{fontSize:"24px"}},"Application Error"),dr.createElement("pre",{style:{padding:"2rem",background:"hsla(10, 50%, 50%, 0.1)",color:"red",overflow:"auto"}},n.stack),r)}function pr({title:e,renderScripts:t,isOutsideRemixApp:n,children:r}){let{routeModules:a}=Fr();return a.root?.Layout&&!n?r:dr.createElement("html",{lang:"en"},dr.createElement("head",null,dr.createElement("meta",{charSet:"utf-8"}),dr.createElement("meta",{name:"viewport",content:"width=device-width,initial-scale=1,viewport-fit=cover"}),dr.createElement("title",null,e)),dr.createElement("body",null,dr.createElement("main",{style:{fontFamily:"system-ui, sans-serif",padding:"2rem"}},r,t?dr.createElement(Vr,null):null)))}var mr=d(n(471));function yr(){return mr.createElement(pr,{title:"Loading...",renderScripts:!0},mr.createElement("script",{dangerouslySetInnerHTML:{__html:'\n              console.log(\n                "💿 Hey developer 👋. You can provide a way better UX than this " +\n                "when your app is loading JS modules and/or running `clientLoader` " +\n                "functions. Check out https://remix.run/route/hydrate-fallback " +\n                "for more information."\n              );\n            '}}))}function vr(e){let t={};return Object.values(e).forEach((e=>{if(e){let n=e.parentId||"";t[n]||(t[n]=[]),t[n].push(e)}})),t}function gr(e,t,n){let r=Rr(t),a=!t.HydrateFallback||n&&"root"!==e.id?"root"===e.id?yr:void 0:t.HydrateFallback,o=t.ErrorBoundary?t.ErrorBoundary:"root"===e.id?()=>cr.createElement(hr,{error:Zt()}):void 0;return"root"===e.id&&t.Layout?{...r?{element:cr.createElement(t.Layout,null,cr.createElement(r,null))}:{Component:r},...o?{errorElement:cr.createElement(t.Layout,null,cr.createElement(o,null))}:{ErrorBoundary:o},...a?{hydrateFallbackElement:cr.createElement(t.Layout,null,cr.createElement(a,null))}:{HydrateFallback:a}}:{Component:r,ErrorBoundary:o,HydrateFallback:a}}function br(e,t,n,r,a="",o=vr(e),i=Promise.resolve({Component:()=>null})){return(o[a]||[]).map((a=>{let l=t[a.id];$n(l,"No `routeModule` available to create server routes");let s={...gr(a,l,r),caseSensitive:a.caseSensitive,id:a.id,index:a.index,path:a.path,handle:l.handle,lazy:r?()=>i:void 0,loader:a.hasLoader||a.hasClientLoader?()=>null:void 0},u=br(e,t,n,r,a.id,o,i);return u.length>0&&(s.children=u),s}))}function wr(e,t,n,r,a,o){return kr(t,n,r,o,"",vr(t),e)}function Sr(e,t,n){if(n){let n=`You cannot call ${"action"===e?"serverAction()":"serverLoader()"} in SPA Mode (routeId: "${t.id}")`;throw console.error(n),new oe(400,"Bad Request",new Error(n),!0)}let r=`You are trying to call ${"action"===e?"serverAction()":"serverLoader()"} on a route that does not have a server ${e} (routeId: "${t.id}")`;if("loader"===e&&!t.hasLoader||"action"===e&&!t.hasAction)throw console.error(r),new oe(400,"Bad Request",new Error(r),!0)}function Er(e,t){let n="clientAction"===e?"a":"an",r=`Route "${t}" does not have ${n} ${e}, but you are trying to submit to it. To fix this, please add ${n} \`${e}\` function to the route`;throw console.error(r),new oe(405,"Method Not Allowed",new Error(r),!0)}function kr(e,t,n,r,a="",o=vr(e),i){return(o[a]||[]).map((a=>{let l=t[a.id];function s(e){return $n("function"==typeof e,"No single fetch function available for route handler"),e()}function u(e){return a.hasLoader?s(e):Promise.resolve(null)}function c(e){if(!a.hasAction)throw Er("action",a.id);return s(e)}async function d(e){let n=t[a.id],r=n?jn(a,n):Promise.resolve();try{return e()}finally{await r}}let f={id:a.id,index:a.index,path:a.path};if(l){Object.assign(f,{...f,...gr(a,l,r),handle:l.handle,shouldRevalidate:xr(l,a.id,i)});let e=n&&n.loaderData&&a.id in n.loaderData,t=e?n?.loaderData?.[a.id]:void 0,o=n&&n.errors&&a.id in n.errors,s=o?n?.errors?.[a.id]:void 0,h=null==i&&(!0===l.clientLoader?.hydrate||!a.hasLoader);f.loader=async({request:n,params:i},c)=>{try{return await d((async()=>($n(l,"No `routeModule` available for critical-route loader"),l.clientLoader?l.clientLoader({request:n,params:i,async serverLoader(){if(Sr("loader",a,r),h){if(e)return t;if(o)throw s}return u(c)}}):r?null:u(c))))}finally{h=!1}},f.loader.hydrate=Cr(a,l,r),f.action=({request:e,params:t},n)=>d((async()=>{if($n(l,"No `routeModule` available for critical-route action"),!l.clientAction){if(r)throw Er("clientAction",a.id);return c(n)}return l.clientAction({request:e,params:t,serverAction:async()=>(Sr("action",a,r),c(n))})}))}else a.hasClientLoader||(f.loader=({request:e},t)=>d((()=>r?Promise.resolve(null):u(t)))),a.hasClientAction||(f.action=({request:e},t)=>d((()=>{if(r)throw Er("clientAction",a.id);return c(t)}))),f.lazy=async()=>{let e=await async function(e,t){let n=await Fn(e,t);return await jn(e,n),{Component:Rr(n),ErrorBoundary:n.ErrorBoundary,clientAction:n.clientAction,clientLoader:n.clientLoader,handle:n.handle,links:n.links,meta:n.meta,shouldRevalidate:n.shouldRevalidate}}(a,t),n={...e};if(e.clientLoader){let t=e.clientLoader;n.loader=(e,n)=>t({...e,serverLoader:async()=>(Sr("loader",a,r),u(n))})}if(e.clientAction){let t=e.clientAction;n.action=(e,n)=>t({...e,serverAction:async()=>(Sr("action",a,r),c(n))})}return{...n.loader?{loader:n.loader}:{},...n.action?{action:n.action}:{},hasErrorBoundary:n.hasErrorBoundary,shouldRevalidate:xr(n,a.id,i),handle:n.handle,Component:n.Component,ErrorBoundary:n.ErrorBoundary}};let h=kr(e,t,n,r,a.id,o,i);return h.length>0&&(f.children=h),f}))}function xr(e,t,n){if(n)return function(e,t,n){let r=!1;return a=>r?t?t(a):a.defaultShouldRevalidate:(r=!0,n.has(e))}(t,e.shouldRevalidate,n);if(e.shouldRevalidate){let t=e.shouldRevalidate;return e=>t({...e,defaultShouldRevalidate:!0})}return e.shouldRevalidate}function Rr(e){if(null!=e.default)return"object"==typeof e.default&&0===Object.keys(e.default).length?void 0:e.default}function Cr(e,t,n){return n&&"root"!==e.id||null!=t.clientLoader&&(!0===t.clientLoader.hydrate||!0!==e.hasLoader)}var Pr=new Set,Lr=1e3,Ar=new Set,Tr=7680;function _r(e){return!e}function Or(e,t,n,r){if(_r(n))return async({path:a,patch:o})=>{Ar.has(a)||await Nr([a],e,t,n,r,o)}}function Dr(e,t,n,r){ur.useEffect((()=>{if(!_r(r)||!0===navigator.connection?.saveData)return;function a(e){let t="FORM"===e.tagName?e.getAttribute("action"):e.getAttribute("href");if(!t)return;let n=new URL(t,window.location.origin);Ar.has(n.pathname)||Pr.add(n.pathname)}async function o(){let a=Array.from(Pr.keys()).filter((e=>!Ar.has(e)||(Pr.delete(e),!1)));if(0!==a.length)try{await Nr(a,t,n,r,e.basename,e.patchRoutes)}catch(e){console.error("Failed to fetch manifest patches",e)}}document.body.querySelectorAll("a[data-discover], form[data-discover]").forEach((e=>a(e))),o();let i=function(e){let t;return(...n)=>{window.clearTimeout(t),t=window.setTimeout((()=>e(...n)),100)}}(o),l=new MutationObserver((e=>{let t=new Set;e.forEach((e=>{[e.target,...e.addedNodes].forEach((e=>{(function(e){return e.nodeType===Node.ELEMENT_NODE})(e)&&(("A"===e.tagName&&e.getAttribute("data-discover")||"FORM"===e.tagName&&e.getAttribute("data-discover"))&&t.add(e),"A"!==e.tagName&&e.querySelectorAll("a[data-discover], form[data-discover]").forEach((e=>t.add(e))))}))})),t.forEach((e=>a(e))),i()}));return l.observe(document.documentElement,{subtree:!0,childList:!0,attributes:!0,attributeFilter:["data-discover","href","action"]}),()=>l.disconnect()}),[r,t,n,e])}async function Nr(e,t,n,r,a,o){let i=`${null!=a?a:"/"}/__manifest`.replace(/\/+/g,"/"),l=new URL(i,window.location.origin);if(e.sort().forEach((e=>l.searchParams.append("p",e))),l.searchParams.set("version",t.version),l.toString().length>Tr)return void Pr.clear();let s=await fetch(l);if(!s.ok)throw new Error(`${s.status} ${s.statusText}`);if(s.status>=400)throw new Error(await s.text());let u=await s.json(),c=new Set(Object.keys(t.routes)),d=Object.values(u).reduce(((e,t)=>(t&&!c.has(t.id)&&(e[t.id]=t),e)),{});Object.assign(t.routes,d),e.forEach((e=>function(e,t){if(t.size>=Lr){let e=t.values().next().value;t.delete(e)}t.add(e)}(e,Ar)));let f=new Set;Object.values(d).forEach((e=>{!e||e.parentId&&d[e.parentId]||f.add(e.parentId)})),f.forEach((e=>o(e||null,kr(d,n,null,r,e))))}function Mr(){let e=zn.useContext(ft);return $n(e,"You must render this element inside a <DataRouterContext.Provider> element"),e}function zr(){let e=zn.useContext(ht);return $n(e,"You must render this element inside a <DataRouterStateContext.Provider> element"),e}var $r=zn.createContext(void 0);function Fr(){let e=zn.useContext($r);return $n(e,"You must render this element inside a <HydratedRouter> element"),e}function jr(e,t){return n=>{e&&e(n),n.defaultPrevented||t(n)}}function Ir(e,t,n){if(n&&!Yr)return[e[0]];if(t){let n=e.findIndex((e=>void 0!==t[e.route.id]));return e.slice(0,n+1)}return e}function Ur(){let{isSpaMode:e,manifest:t,routeModules:n,criticalCss:r}=Fr(),{errors:a,matches:o}=zr(),i=Ir(o,a,e),l=zn.useMemo((()=>function(e,t,n){let r=e.map((e=>{let r=t[e.route.id],a=n.routes[e.route.id];return[a&&a.css?a.css.map((e=>({rel:"stylesheet",href:e}))):[],r?.links?.()||[]]})).flat(2),a=function(e,t){return qn(e.map((e=>{let n=t.routes[e.route.id];if(!n)return[];let r=[n.module];return n.imports&&(r=r.concat(n.imports)),r})).flat(1))}(e,n);return Yn(r,a)}(i,n,t)),[i,n,t]);return zn.createElement(zn.Fragment,null,r?zn.createElement("style",{dangerouslySetInnerHTML:{__html:r}}):null,l.map((({key:e,link:t})=>Un(t)?zn.createElement(Hr,{key:e,...t}):zn.createElement("link",{key:e,...t}))))}function Hr({page:e,...t}){let{router:n}=Mr(),r=zn.useMemo((()=>P(n.routes,e,n.basename)),[n.routes,e,n.basename]);return r?zn.createElement(Br,{page:e,matches:r,...t}):null}function Br({page:e,matches:t,...n}){let r=Rt(),{manifest:a,routeModules:o}=Fr(),{loaderData:i,matches:l}=zr(),s=zn.useMemo((()=>Bn(e,t,l,a,r,"data")),[e,t,l,a,r]),u=zn.useMemo((()=>Bn(e,t,l,a,r,"assets")),[e,t,l,a,r]),c=zn.useMemo((()=>{if(e===r.pathname+r.search+r.hash)return[];let n=new Set,l=!1;if(t.forEach((e=>{let t=a.routes[e.route.id];t&&t.hasLoader&&(!s.some((t=>t.route.id===e.route.id))&&e.route.id in i&&o[e.route.id]?.shouldRevalidate||t.hasClientLoader?l=!0:n.add(e.route.id))})),0===n.size)return[];let u=rr(e);return l&&n.size>0&&u.searchParams.set("_routes",t.filter((e=>n.has(e.route.id))).map((e=>e.route.id)).join(",")),[u.pathname+u.search]}),[i,r,a,s,t,e,o]),d=zn.useMemo((()=>function(e,t){return qn(e.map((e=>{let n=t.routes[e.route.id];if(!n)return[];let r=[n.module];return n.imports&&(r=r.concat(n.imports)),r})).flat(1))}(u,a)),[u,a]),f=function(e){let{manifest:t,routeModules:n}=Fr(),[r,a]=zn.useState([]);return zn.useEffect((()=>{let r=!1;return async function(e,t,n){let r=await Promise.all(e.map((async e=>{let r=t.routes[e.route.id];if(r){let e=await Fn(r,n);return e.links?e.links():[]}return[]})));return Yn(r.flat(1).filter(Hn).filter((e=>"stylesheet"===e.rel||"preload"===e.rel)).map((e=>"stylesheet"===e.rel?{...e,rel:"prefetch",as:"style"}:{...e,rel:"prefetch"})))}(e,t,n).then((e=>{r||a(e)})),()=>{r=!0}}),[e,t,n]),r}(u);return zn.createElement(zn.Fragment,null,c.map((e=>zn.createElement("link",{key:e,rel:"prefetch",as:"fetch",href:e,...n}))),d.map((e=>zn.createElement("link",{key:e,rel:"modulepreload",href:e,...n}))),f.map((({key:e,link:t})=>zn.createElement("link",{key:e,...t}))))}function qr(){let{isSpaMode:e,routeModules:t}=Fr(),{errors:n,matches:r,loaderData:a}=zr(),o=Rt(),i=Ir(r,n,e),l=null;n&&(l=n[i[i.length-1].route.id]);let s=[],u=null,c=[];for(let e=0;e<i.length;e++){let n=i[e],r=n.route.id,d=a[r],f=n.params,h=t[r],p=[],m={id:r,data:d,meta:[],params:n.params,pathname:n.pathname,handle:n.route.handle,error:l};if(c[e]=m,h?.meta?p="function"==typeof h.meta?h.meta({data:d,params:f,location:o,matches:c,error:l}):Array.isArray(h.meta)?[...h.meta]:h.meta:u&&(p=[...u]),p=p||[],!Array.isArray(p))throw new Error("The route at "+n.route.path+" returns an invalid value. All route meta functions must return an array of meta objects.\n\nTo reference the meta function API, see https://remix.run/route/meta");m.meta=p,c[e]=m,s=[...p],u=s}return zn.createElement(zn.Fragment,null,s.flat().map((e=>{if(!e)return null;if("tagName"in e){let{tagName:t,...n}=e;if(!function(e){return"string"==typeof e&&/^(meta|link)$/.test(e)}(t))return console.warn(`A meta object uses an invalid tagName: ${t}. Expected either 'link' or 'meta'`),null;let r=t;return zn.createElement(r,{key:JSON.stringify(n),...n})}if("title"in e)return zn.createElement("title",{key:"title"},String(e.title));if("charset"in e&&(e.charSet??(e.charSet=e.charset),delete e.charset),"charSet"in e&&null!=e.charSet)return"string"==typeof e.charSet?zn.createElement("meta",{key:"charSet",charSet:e.charSet}):null;if("script:ld+json"in e)try{let t=JSON.stringify(e["script:ld+json"]);return zn.createElement("script",{key:`script:ld+json:${t}`,type:"application/ld+json",dangerouslySetInnerHTML:{__html:t}})}catch(e){return null}return zn.createElement("meta",{key:JSON.stringify(e),...e})})))}$r.displayName="FrameworkContext";var Yr=!1;function Vr(e){let{manifest:t,serverHandoffString:n,isSpaMode:r,renderMeta:a}=Fr(),{router:o,static:i,staticContext:l}=Mr(),{matches:s}=zr(),u=_r(r);a&&(a.didRenderScripts=!0);let c=Ir(s,null,r);zn.useEffect((()=>{Yr=!0}),[]);let d=zn.useMemo((()=>{let r=l?`window.__reactRouterContext = ${n};window.__reactRouterContext.stream = new ReadableStream({start(controller){window.__reactRouterContext.streamController = controller;}}).pipeThrough(new TextEncoderStream());`:" ",a=i?`${t.hmr?.runtime?`import ${JSON.stringify(t.hmr.runtime)};`:""}${u?"":`import ${JSON.stringify(t.url)}`};\n${c.map(((e,n)=>`import * as route${n} from ${JSON.stringify(t.routes[e.route.id].module)};`)).join("\n")}\n  ${u?`window.__reactRouterManifest = ${JSON.stringify(function(e,t){let n=new Set(t.state.matches.map((e=>e.route.id))),r=t.state.location.pathname.split("/").filter(Boolean),a=["/"];for(r.pop();r.length>0;)a.push(`/${r.join("/")}`),r.pop();a.forEach((e=>{let r=P(t.routes,e,t.basename);r&&r.forEach((e=>n.add(e.route.id)))}));let o=[...n].reduce(((t,n)=>Object.assign(t,{[n]:e.routes[n]})),{});return{...e,routes:o}}(t,o),null,2)};`:""}\n  window.__reactRouterRouteModules = {${c.map(((e,t)=>`${JSON.stringify(e.route.id)}:route${t}`)).join(",")}};\n\nimport(${JSON.stringify(t.entry.module)});`:" ";return zn.createElement(zn.Fragment,null,zn.createElement("script",{...e,suppressHydrationWarning:!0,dangerouslySetInnerHTML:Jn(r),type:void 0}),zn.createElement("script",{...e,suppressHydrationWarning:!0,dangerouslySetInnerHTML:Jn(a),type:"module",async:!0}))}),[]),f=c.map((e=>{let n=t.routes[e.route.id];return n?(n.imports||[]).concat([n.module]):[]})).flat(1),h=Yr?[]:t.entry.imports.concat(f);return Yr?null:zn.createElement(zn.Fragment,null,u?null:zn.createElement("link",{rel:"modulepreload",href:t.url,crossOrigin:e.crossOrigin}),zn.createElement("link",{rel:"modulepreload",href:t.entry.module,crossOrigin:e.crossOrigin}),(p=h,[...new Set(p)]).map((t=>zn.createElement("link",{key:t,rel:"modulepreload",href:t,crossOrigin:e.crossOrigin}))),d);var p}function Wr(...e){return t=>{e.forEach((e=>{"function"==typeof e?e(t):null!=e&&(e.current=t)}))}}var Jr="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement;try{Jr&&(window.__reactRouterVersion="7.1.1")}catch(e){}function Qr(e,t){return we({basename:t?.basename,future:t?.future,history:y({window:t?.window}),hydrationData:t?.hydrationData||Gr(),routes:e,mapRouteProperties:cn,dataStrategy:t?.dataStrategy,patchRoutesOnNavigation:t?.patchRoutesOnNavigation,window:t?.window}).initialize()}function Kr(e,t){return we({basename:t?.basename,future:t?.future,history:v({window:t?.window}),hydrationData:t?.hydrationData||Gr(),routes:e,mapRouteProperties:cn,dataStrategy:t?.dataStrategy,patchRoutesOnNavigation:t?.patchRoutesOnNavigation,window:t?.window}).initialize()}function Gr(){let e=window?.__staticRouterHydrationData;return e&&e.errors&&(e={...e,errors:Xr(e.errors)}),e}function Xr(e){if(!e)return null;let t=Object.entries(e),n={};for(let[e,r]of t)if(r&&"RouteErrorResponse"===r.__type)n[e]=new oe(r.status,r.statusText,r.data,!0===r.internal);else if(r&&"Error"===r.__type){if(r.__subType){let t=window[r.__subType];if("function"==typeof t)try{let a=new t(r.message);a.stack="",n[e]=a}catch(e){}}if(null==n[e]){let t=new Error(r.message);t.stack="",n[e]=t}}else n[e]=r;return n}function Zr({basename:e,children:t,window:n}){let r=Pn.useRef();null==r.current&&(r.current=y({window:n,v5Compat:!0}));let a=r.current,[o,i]=Pn.useState({action:a.action,location:a.location}),l=Pn.useCallback((e=>{Pn.startTransition((()=>i(e)))}),[i]);return Pn.useLayoutEffect((()=>a.listen(l)),[a,l]),Pn.createElement(bn,{basename:e,children:t,location:o.location,navigationType:o.action,navigator:a})}function ea({basename:e,children:t,window:n}){let r=Pn.useRef();null==r.current&&(r.current=v({window:n,v5Compat:!0}));let a=r.current,[o,i]=Pn.useState({action:a.action,location:a.location}),l=Pn.useCallback((e=>{Pn.startTransition((()=>i(e)))}),[i]);return Pn.useLayoutEffect((()=>a.listen(l)),[a,l]),Pn.createElement(bn,{basename:e,children:t,location:o.location,navigationType:o.action,navigator:a})}function ta({basename:e,children:t,history:n}){let[r,a]=Pn.useState({action:n.action,location:n.location}),o=Pn.useCallback((e=>{Pn.startTransition((()=>a(e)))}),[a]);return Pn.useLayoutEffect((()=>n.listen(o)),[n,o]),Pn.createElement(bn,{basename:e,children:t,location:r.location,navigationType:r.action,navigator:n})}ta.displayName="unstable_HistoryRouter";var na=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,ra=Pn.forwardRef((function({onClick:e,discover:t="render",prefetch:n="none",relative:r,reloadDocument:a,replace:o,state:i,target:l,to:s,preventScrollReset:u,viewTransition:c,...d},f){let h,{basename:p}=Pn.useContext(vt),m="string"==typeof s&&na.test(s),y=!1;if("string"==typeof s&&m&&(h=s,Jr))try{let e=new URL(window.location.href),t=s.startsWith("//")?new URL(e.protocol+s):new URL(s),n=q(t.pathname,p);t.origin===e.origin&&null!=n?s=n+t.search+t.hash:y=!0}catch(e){b(!1,`<Link to="${s}"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.`)}let v=kt(s,{relative:r}),[g,w,S]=function(e,t){let n=zn.useContext($r),[r,a]=zn.useState(!1),[o,i]=zn.useState(!1),{onFocus:l,onBlur:s,onMouseEnter:u,onMouseLeave:c,onTouchStart:d}=t,f=zn.useRef(null);zn.useEffect((()=>{if("render"===e&&i(!0),"viewport"===e){let e=new IntersectionObserver((e=>{e.forEach((e=>{i(e.isIntersecting)}))}),{threshold:.5});return f.current&&e.observe(f.current),()=>{e.disconnect()}}}),[e]),zn.useEffect((()=>{if(r){let e=setTimeout((()=>{i(!0)}),100);return()=>{clearTimeout(e)}}}),[r]);let h=()=>{a(!0)},p=()=>{a(!1),i(!1)};return n?"intent"!==e?[o,f,{}]:[o,f,{onFocus:jr(l,h),onBlur:jr(s,p),onMouseEnter:jr(u,h),onMouseLeave:jr(c,p),onTouchStart:jr(d,h)}]:[!1,f,{}]}(n,d),E=ca(s,{replace:o,state:i,target:l,preventScrollReset:u,relative:r,viewTransition:c}),k=Pn.createElement("a",{...d,...S,href:h||v,onClick:y||a?e:function(t){e&&e(t),t.defaultPrevented||E(t)},ref:Wr(f,w),target:l,"data-discover":m||"render"!==t?void 0:"true"});return g&&!m?Pn.createElement(Pn.Fragment,null,k,Pn.createElement(Hr,{page:v})):k}));ra.displayName="Link";var aa=Pn.forwardRef((function({"aria-current":e="page",caseSensitive:t=!1,className:n="",end:r=!1,style:a,to:o,viewTransition:i,children:l,...s},u){let c=Mt(o,{relative:s.relative}),d=Rt(),f=Pn.useContext(ht),{navigator:h,basename:p}=Pn.useContext(vt),m=null!=f&&xa(c)&&!0===i,y=h.encodeLocation?h.encodeLocation(c).pathname:c.pathname,v=d.pathname,g=f&&f.navigation&&f.navigation.location?f.navigation.location.pathname:null;t||(v=v.toLowerCase(),g=g?g.toLowerCase():null,y=y.toLowerCase()),g&&p&&(g=q(g,p)||g);const b="/"!==y&&y.endsWith("/")?y.length-1:y.length;let w,S=v===y||!r&&v.startsWith(y)&&"/"===v.charAt(b),E=null!=g&&(g===y||!r&&g.startsWith(y)&&"/"===g.charAt(y.length)),k={isActive:S,isPending:E,isTransitioning:m},x=S?e:void 0;w="function"==typeof n?n(k):[n,S?"active":null,E?"pending":null,m?"transitioning":null].filter(Boolean).join(" ");let R="function"==typeof a?a(k):a;return Pn.createElement(ra,{...s,"aria-current":x,className:w,ref:u,style:R,to:o,viewTransition:i},"function"==typeof l?l(k):l)}));aa.displayName="NavLink";var oa=Pn.forwardRef((({discover:e="render",fetcherKey:t,navigate:n,reloadDocument:r,replace:a,state:o,method:i=Ln,action:l,onSubmit:s,relative:u,preventScrollReset:c,viewTransition:d,...f},h)=>{let p=pa(),m=ma(l,{relative:u}),y="get"===i.toLowerCase()?"get":"post",v="string"==typeof l&&na.test(l);return Pn.createElement("form",{ref:h,method:y,action:m,onSubmit:r?s:e=>{if(s&&s(e),e.defaultPrevented)return;e.preventDefault();let r=e.nativeEvent.submitter,l=r?.getAttribute("formmethod")||i;p(r||e.currentTarget,{fetcherKey:t,method:l,navigate:n,replace:a,state:o,relative:u,preventScrollReset:c,viewTransition:d})},...f,"data-discover":v||"render"!==e?void 0:"true"})}));function ia({getKey:e,storageKey:t,...n}){let r=Pn.useContext($r),{basename:a}=Pn.useContext(vt),o=Rt(),i=Qt();Sa({getKey:e,storageKey:t});let l=Pn.useMemo((()=>{if(!r||!e)return null;let t=wa(o,i,a,e);return t!==o.key?t:null}),[]);if(!r||r.isSpaMode)return null;let s=((e,t)=>{if(!window.history.state||!window.history.state.key){let e=Math.random().toString(32).slice(2);window.history.replaceState({key:e},"")}try{let n=JSON.parse(sessionStorage.getItem(e)||"{}")[t||window.history.state.key];"number"==typeof n&&window.scrollTo(0,n)}catch(t){console.error(t),sessionStorage.removeItem(e)}}).toString();return Pn.createElement("script",{...n,suppressHydrationWarning:!0,dangerouslySetInnerHTML:{__html:`(${s})(${JSON.stringify(t||ga)}, ${JSON.stringify(l)})`}})}function la(e){return`${e} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`}function sa(e){let t=Pn.useContext(ft);return g(t,la(e)),t}function ua(e){let t=Pn.useContext(ht);return g(t,la(e)),t}function ca(e,{target:t,replace:n,state:r,preventScrollReset:a,relative:o,viewTransition:i}={}){let l=Tt(),s=Rt(),u=Mt(e,{relative:o});return Pn.useCallback((c=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(c,t)){c.preventDefault();let t=void 0!==n?n:E(s)===E(u);l(e,{replace:t,state:r,preventScrollReset:a,relative:o,viewTransition:i})}}),[s,l,u,n,r,t,e,a,o,i])}function da(e){b("undefined"!=typeof URLSearchParams,"You cannot use the `useSearchParams` hook in a browser that does not support the URLSearchParams API. If you need to support Internet Explorer 11, we recommend you load a polyfill such as https://github.com/ungap/url-search-params.");let t=Pn.useRef(_n(e)),n=Pn.useRef(!1),r=Rt(),a=Pn.useMemo((()=>function(e,t){let n=_n(e);return t&&t.forEach(((e,r)=>{n.has(r)||t.getAll(r).forEach((e=>{n.append(r,e)}))})),n}(r.search,n.current?null:t.current)),[r.search]),o=Tt(),i=Pn.useCallback(((e,t)=>{const r=_n("function"==typeof e?e(a):e);n.current=!0,o("?"+r,t)}),[o,a]);return[a,i]}oa.displayName="Form",ia.displayName="ScrollRestoration";var fa=0,ha=()=>`__${String(++fa)}__`;function pa(){let{router:e}=sa("useSubmit"),{basename:t}=Pn.useContext(vt),n=Vt("useRouteId");return Pn.useCallback((async(r,a={})=>{let{action:o,method:i,encType:l,formData:s,body:u}=function(e,t){let n,r,a,o,i;if(Tn(l=e)&&"form"===l.tagName.toLowerCase()){let i=e.getAttribute("action");r=i?q(i,t):null,n=e.getAttribute("method")||Ln,a=Nn(e.getAttribute("enctype"))||An,o=new FormData(e)}else if(function(e){return Tn(e)&&"button"===e.tagName.toLowerCase()}(e)||function(e){return Tn(e)&&"input"===e.tagName.toLowerCase()}(e)&&("submit"===e.type||"image"===e.type)){let i=e.form;if(null==i)throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');let l=e.getAttribute("formaction")||i.getAttribute("action");if(r=l?q(l,t):null,n=e.getAttribute("formmethod")||i.getAttribute("method")||Ln,a=Nn(e.getAttribute("formenctype"))||Nn(i.getAttribute("enctype"))||An,o=new FormData(i,e),!function(){if(null===On)try{new FormData(document.createElement("form"),0),On=!1}catch(e){On=!0}return On}()){let{name:t,type:n,value:r}=e;if("image"===n){let e=t?`${t}.`:"";o.append(`${e}x`,"0"),o.append(`${e}y`,"0")}else t&&o.append(t,r)}}else{if(Tn(e))throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');n=Ln,r=null,a=An,i=e}var l;return o&&"text/plain"===a&&(i=o,o=void 0),{action:r,method:n.toLowerCase(),encType:a,formData:o,body:i}}(r,t);if(!1===a.navigate){let t=a.fetcherKey||ha();await e.fetch(t,n,a.action||o,{preventScrollReset:a.preventScrollReset,formData:s,body:u,formMethod:a.method||i,formEncType:a.encType||l,flushSync:a.flushSync})}else await e.navigate(a.action||o,{preventScrollReset:a.preventScrollReset,formData:s,body:u,formMethod:a.method||i,formEncType:a.encType||l,replace:a.replace,state:a.state,fromRouteId:n,flushSync:a.flushSync,viewTransition:a.viewTransition})}),[e,t,n])}function ma(e,{relative:t}={}){let{basename:n}=Pn.useContext(vt),r=Pn.useContext(bt);g(r,"useFormAction must be used inside a RouteContext");let[a]=r.matches.slice(-1),o={...Mt(e||".",{relative:t})},i=Rt();if(null==e){o.search=i.search;let e=new URLSearchParams(o.search),t=e.getAll("index");if(t.some((e=>""===e))){e.delete("index"),t.filter((e=>e)).forEach((t=>e.append("index",t)));let n=e.toString();o.search=n?`?${n}`:""}}return e&&"."!==e||!a.route.index||(o.search=o.search?o.search.replace(/^\?/,"?index&"):"?index"),"/"!==n&&(o.pathname="/"===o.pathname?n:K([n,o.pathname])),E(o)}function ya({key:e}={}){let{router:t}=sa("useFetcher"),n=ua("useFetcher"),r=Pn.useContext(mt),a=Pn.useContext(bt),o=a.matches[a.matches.length-1]?.route.id;g(r,"useFetcher must be used inside a FetchersContext"),g(a,"useFetcher must be used inside a RouteContext"),g(null!=o,'useFetcher can only be used on routes that contain a unique "id"');let i=Pn.useId(),[l,s]=Pn.useState(e||i);e&&e!==l&&s(e),Pn.useEffect((()=>(t.getFetcher(l),()=>t.deleteFetcher(l))),[t,l]);let u=Pn.useCallback((async(e,n)=>{g(o,"No routeId available for fetcher.load()"),await t.fetch(l,o,e,n)}),[l,o,t]),c=pa(),d=Pn.useCallback((async(e,t)=>{await c(e,{...t,navigate:!1,fetcherKey:l})}),[l,c]),f=Pn.useMemo((()=>{let e=Pn.forwardRef(((e,t)=>Pn.createElement(oa,{...e,navigate:!1,fetcherKey:l,ref:t})));return e.displayName="fetcher.Form",e}),[l]),h=n.fetchers.get(l)||pe,p=r.get(l);return Pn.useMemo((()=>({Form:f,submit:d,load:u,...h,data:p})),[f,d,u,h,p])}function va(){let e=ua("useFetchers");return Array.from(e.fetchers.entries()).map((([e,t])=>({...t,key:e})))}var ga="react-router-scroll-positions",ba={};function wa(e,t,n,r){let a=null;return r&&(a=r("/"!==n?{...e,pathname:q(e.pathname,n)||e.pathname}:e,t)),null==a&&(a=e.key),a}function Sa({getKey:e,storageKey:t}={}){let{router:n}=sa("useScrollRestoration"),{restoreScrollPosition:r,preventScrollReset:a}=ua("useScrollRestoration"),{basename:o}=Pn.useContext(vt),i=Rt(),l=Qt(),s=Wt();Pn.useEffect((()=>(window.history.scrollRestoration="manual",()=>{window.history.scrollRestoration="auto"})),[]),function(e){let{capture:t}={};Pn.useEffect((()=>{let n=null!=t?{capture:t}:void 0;return window.addEventListener("pagehide",e,n),()=>{window.removeEventListener("pagehide",e,n)}}),[e,t])}(Pn.useCallback((()=>{if("idle"===s.state){let t=wa(i,l,o,e);ba[t]=window.scrollY}try{sessionStorage.setItem(t||ga,JSON.stringify(ba))}catch(e){b(!1,`Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (${e}).`)}window.history.scrollRestoration="auto"}),[s.state,e,o,i,l,t])),"undefined"!=typeof document&&(Pn.useLayoutEffect((()=>{try{let e=sessionStorage.getItem(t||ga);e&&(ba=JSON.parse(e))}catch(e){}}),[t]),Pn.useLayoutEffect((()=>{let t=n?.enableScrollRestoration(ba,(()=>window.scrollY),e?(t,n)=>wa(t,n,o,e):void 0);return()=>t&&t()}),[n,o,e]),Pn.useLayoutEffect((()=>{if(!1!==r)if("number"!=typeof r){if(i.hash){let e=document.getElementById(decodeURIComponent(i.hash.slice(1)));if(e)return void e.scrollIntoView()}!0!==a&&window.scrollTo(0,0)}else window.scrollTo(0,r)}),[i,r,a]))}function Ea(e,t){let{capture:n}=t||{};Pn.useEffect((()=>{let t=null!=n?{capture:n}:void 0;return window.addEventListener("beforeunload",e,t),()=>{window.removeEventListener("beforeunload",e,t)}}),[e,n])}function ka({when:e,message:t}){let n=rn(e);Pn.useEffect((()=>{"blocked"===n.state&&(window.confirm(t)?setTimeout(n.proceed,0):n.reset())}),[n,t]),Pn.useEffect((()=>{"blocked"!==n.state||e||n.reset()}),[n,e])}function xa(e,t={}){let n=Pn.useContext(pt);g(null!=n,"`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?");let{basename:r}=sa("useViewTransitionState"),a=Mt(e,{relative:t.relative});if(!n.isTransitioning)return!1;let o=q(n.currentLocation.pathname,r)||n.currentLocation.pathname,i=q(n.nextLocation.pathname,r)||n.nextLocation.pathname;return null!=H(a.pathname,i)||null!=H(a.pathname,o)}var Ra=d(n(471));function Ca({basename:e,children:t,location:n="/"}){"string"==typeof n&&(n=k(n));let r={pathname:n.pathname||"/",search:n.search||"",hash:n.hash||"",state:null!=n.state?n.state:null,key:n.key||"default"},a=Ta();return Ra.createElement(bn,{basename:e,children:t,location:r,navigationType:"POP",navigator:a,static:!0})}function Pa({context:e,router:t,hydrate:n=!0,nonce:r}){g(t&&e,"You must provide `router` and `context` to <StaticRouterProvider>");let a={router:t,navigator:Ta(),static:!0,staticContext:e,basename:e.basename||"/"},o=new Map,i="";if(!1!==n){let t={loaderData:e.loaderData,actionData:e.actionData,errors:Aa(e.errors)};i=`window.__staticRouterHydrationData = JSON.parse(${JSON.stringify(JSON.stringify(t)).replace($a,(e=>za[e]))});`}let{state:l}=a.router;return Ra.createElement(Ra.Fragment,null,Ra.createElement(ft.Provider,{value:a},Ra.createElement(ht.Provider,{value:l},Ra.createElement(mt.Provider,{value:o},Ra.createElement(pt.Provider,{value:{isTransitioning:!1}},Ra.createElement(bn,{basename:a.basename,location:l.location,navigationType:l.historyAction,navigator:a.navigator,static:a.static},Ra.createElement(La,{routes:t.routes,future:t.future,state:l})))))),i?Ra.createElement("script",{suppressHydrationWarning:!0,nonce:r,dangerouslySetInnerHTML:{__html:i}}):null)}function La({routes:e,future:t,state:n}){return $t(e,void 0,n,t)}function Aa(e){if(!e)return null;let t=Object.entries(e),n={};for(let[e,r]of t)ie(r)?n[e]={...r,__type:"RouteErrorResponse"}:r instanceof Error?n[e]={message:r.message,__type:"Error",..."Error"!==r.name?{__subType:r.name}:{}}:n[e]=r;return n}function Ta(){return{createHref:Da,encodeLocation:Na,push(e){throw new Error(`You cannot use navigator.push() on the server because it is a stateless environment. This error was probably triggered when you did a \`navigate(${JSON.stringify(e)})\` somewhere in your app.`)},replace(e){throw new Error(`You cannot use navigator.replace() on the server because it is a stateless environment. This error was probably triggered when you did a \`navigate(${JSON.stringify(e)}, { replace: true })\` somewhere in your app.`)},go(e){throw new Error(`You cannot use navigator.go() on the server because it is a stateless environment. This error was probably triggered when you did a \`navigate(${e})\` somewhere in your app.`)},back(){throw new Error("You cannot use navigator.back() on the server because it is a stateless environment.")},forward(){throw new Error("You cannot use navigator.forward() on the server because it is a stateless environment.")}}}function _a(e,t){return Se(e,{...t,mapRouteProperties:cn})}function Oa(e,t,n={}){let r={},a=C(e,cn,void 0,r),o=t.matches.map((e=>{let t=r[e.route.id]||e.route;return{...e,route:t}})),i=e=>`You cannot use router.${e}() on the server because it is a stateless environment`;return{get basename(){return t.basename},get future(){return{...n?.future}},get state(){return{historyAction:"POP",location:t.location,matches:o,loaderData:t.loaderData,actionData:t.actionData,errors:t.errors,initialized:!0,navigation:he,restoreScrollPosition:null,preventScrollReset:!1,revalidation:"idle",fetchers:new Map,blockers:new Map}},get routes(){return a},get window(){},initialize(){throw i("initialize")},subscribe(){throw i("subscribe")},enableScrollRestoration(){throw i("enableScrollRestoration")},navigate(){throw i("navigate")},fetch(){throw i("fetch")},revalidate(){throw i("revalidate")},createHref:Da,encodeLocation:Na,getFetcher:()=>pe,deleteFetcher(){throw i("deleteFetcher")},dispose(){throw i("dispose")},getBlocker:()=>me,deleteBlocker(){throw i("deleteBlocker")},patchRoutes(){throw i("patchRoutes")},_internalFetchControllers:new Map,_internalSetRoutes(){throw i("_internalSetRoutes")}}}function Da(e){return"string"==typeof e?e:E(e)}function Na(e){let t="string"==typeof e?e:E(e);t=t.replace(/ $/,"%20");let n=Ma.test(t)?new URL(t):new URL(t,"http://localhost");return{pathname:n.pathname,search:n.search,hash:n.hash}}var Ma=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,za={"&":"\\u0026",">":"\\u003e","<":"\\u003c","\u2028":"\\u2028","\u2029":"\\u2029"},$a=/[&><\u2028\u2029]/g,Fa=d(n(471));function ja({context:e,url:t,nonce:n}){"string"==typeof t&&(t=new URL(t));let{manifest:r,routeModules:a,criticalCss:o,serverHandoffString:i}=e,l=br(r.routes,a,e.future,e.isSpaMode);e.staticHandlerContext.loaderData={...e.staticHandlerContext.loaderData};for(let t of e.staticHandlerContext.matches){let n=t.route.id,r=a[n],o=e.manifest.routes[n];r&&o&&Cr(o,r,e.isSpaMode)&&(r.HydrateFallback||!o.hasLoader)&&delete e.staticHandlerContext.loaderData[n]}let s=Oa(l,e.staticHandlerContext);return Fa.createElement(Fa.Fragment,null,Fa.createElement($r.Provider,{value:{manifest:r,routeModules:a,criticalCss:o,serverHandoffString:i,future:e.future,isSpaMode:e.isSpaMode,serializeError:e.serializeError,renderMeta:e.renderMeta}},Fa.createElement(fr,{location:s.state.location},Fa.createElement(Pa,{router:s,context:e.staticHandlerContext,hydrate:!1}))),e.serverHandoffStream?Fa.createElement(Fa.Suspense,null,Fa.createElement(Zn,{context:e,identifier:0,reader:e.serverHandoffStream.getReader(),textDecoder:new TextDecoder,nonce:n})):null)}var Ia=d(n(471));function Ua(e,t={}){return function({initialEntries:n,initialIndex:r,hydrationData:a,future:o}){let i=Ia.useRef(),l=Ia.useRef();if(null==i.current){l.current={future:{},manifest:{routes:{},entry:{imports:[],module:""},url:"",version:""},routeModules:{},isSpaMode:!1};let o=Ha(C(e,(e=>e)),t,l.current.manifest,l.current.routeModules);i.current=dn(o,{initialEntries:n,initialIndex:r,hydrationData:a})}return Ia.createElement($r.Provider,{value:l.current},Ia.createElement(hn,{router:i.current}))}}function Ha(e,t,n,r,a){return e.map((e=>{if(!e.id)throw new Error("Expected a route.id in @remix-run/testing processRoutes() function");let{loader:o,action:i}=e,l={id:e.id,path:e.path,index:e.index,Component:e.Component,HydrateFallback:e.HydrateFallback,ErrorBoundary:e.ErrorBoundary,action:i?e=>i({...e,context:t}):void 0,loader:o?e=>o({...e,context:t}):void 0,handle:e.handle,shouldRevalidate:e.shouldRevalidate},s={id:e.id,path:e.path,index:e.index,parentId:a,hasAction:null!=e.action,hasLoader:null!=e.loader,hasClientAction:!1,hasClientLoader:!1,hasErrorBoundary:null!=e.ErrorBoundary,module:"build/stub-path-to-module.js"};return n.routes[l.id]=s,r[e.id]={default:e.Component||vn,ErrorBoundary:e.ErrorBoundary||void 0,handle:e.handle,links:e.links,meta:e.meta,shouldRevalidate:e.shouldRevalidate},e.children&&(l.children=Ha(e.children,t,n,r,l.id)),l}))}var Ba=n(243),qa=new TextEncoder,Ya=async(e,t)=>{let n=e.lastIndexOf("."),r=e.slice(0,n),a=e.slice(n+1),o=qa.encode(r),i=await Va(t,["verify"]),l=function(e){let t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}(atob(a));return!!await crypto.subtle.verify("HMAC",i,l,o)&&r},Va=async(e,t)=>crypto.subtle.importKey("raw",qa.encode(e),{name:"HMAC",hash:"SHA-256"},!1,t),Wa=(e,t={})=>{let{secrets:n=[],...r}={path:"/",sameSite:"lax",...t};return function(e,t){sn(!t,`The "${e}" cookie has an "expires" property set. This will cause the expires value to not be updated when the session is committed. Instead, you should set the expires value when serializing the cookie. You can use \`commitSession(session, { expires })\` if using a session storage object, or \`cookie.serialize("value", { expires })\` if you're using the cookie directly.`)}(e,r.expires),{get name(){return e},get isSigned(){return n.length>0},get expires(){return void 0!==r.maxAge?new Date(Date.now()+1e3*r.maxAge):r.expires},async parse(t,a){if(!t)return null;let o=(0,Ba.parse)(t,{...r,...a});if(e in o){let t=o[e];if("string"==typeof t&&""!==t){let e=await async function(e,t){if(t.length>0){for(let n of t){let t=await Ya(e,n);if(!1!==t)return Qa(t)}return null}return Qa(e)}(t,n);return e}return""}return null},serialize:async(t,a)=>(0,Ba.serialize)(e,""===t?"":await async function(e,t){let n=function(e){return btoa(function(e){let t,n,r=e.toString(),a="",o=0;for(;o<r.length;){if(t=r.charAt(o++),"%"===t)if("u"===r.charAt(o)){if(n=r.slice(o+1,o+5),/^[\da-f]{4}$/i.exec(n)){a+=String.fromCharCode(parseInt(n,16)),o+=5;continue}}else if(n=r.slice(o,o+2),/^[\da-f]{2}$/i.exec(n)){a+=String.fromCharCode(parseInt(n,16)),o+=2;continue}a+=t}return a}(encodeURIComponent(JSON.stringify(e))))}(e);return t.length>0&&(n=await(async(e,t)=>{let n=qa.encode(e),r=await Va(t,["sign"]),a=await crypto.subtle.sign("HMAC",r,n);return e+"."+btoa(String.fromCharCode(...new Uint8Array(a))).replace(/=+$/,"")})(n,t[0])),n}(t,n),{...r,...a})}},Ja=e=>null!=e&&"string"==typeof e.name&&"boolean"==typeof e.isSigned&&"function"==typeof e.parse&&"function"==typeof e.serialize;function Qa(e){try{return JSON.parse(decodeURIComponent(function(e){let t,n,r=e.toString(),a="",o=0;for(;o<r.length;)t=r.charAt(o++),/[\w*+\-./@]/.exec(t)?a+=t:(n=t.charCodeAt(0),a+=n<256?"%"+Ka(n,2):"%u"+Ka(n,4).toUpperCase());return a}(atob(e))))}catch(e){return{}}}function Ka(e,t){let n=e.toString(16);for(;n.length<t;)n="0"+n;return n}var Ga=(e=>(e.Development="development",e.Production="production",e.Test="test",e))(Ga||{});function Xa(e,t){if(e instanceof Error&&"development"!==t){let e=new Error("Unexpected Server Error");return e.stack=void 0,e}return e}function Za(e,t){return Object.entries(e).reduce(((e,[n,r])=>Object.assign(e,{[n]:Xa(r,t)})),{})}function eo(e,t){let n=Xa(e,t);return{message:n.message,stack:n.stack}}function to(e,t){if(!e)return null;let n=Object.entries(e),r={};for(let[e,a]of n)if(ie(a))r[e]={...a,__type:"RouteErrorResponse"};else if(a instanceof Error){let n=Xa(a,t);r[e]={message:n.message,stack:n.stack,__type:"Error",..."Error"!==n.name?{__subType:n.name}:{}}}else r[e]=a;return r}function no(e,t,n){let r=P(e,t,n);return r?r.map((e=>({params:e.params,pathname:e.pathname,route:e.route}))):null}async function ro(e,t){let n=await e({request:oo(ao(t.request)),params:t.params,context:t.context});if(Xe(n)&&n.init&&n.init.status&&et(n.init.status))throw new Response(null,n.init);return n}function ao(e){let t=new URL(e.url),n=t.searchParams.getAll("index");t.searchParams.delete("index");let r=[];for(let e of n)e&&r.push(e);for(let e of r)t.searchParams.append("index",e);let a={method:e.method,body:e.body,headers:e.headers,signal:e.signal};return a.body&&(a.duplex="half"),new Request(t.href,a)}function oo(e){let t=new URL(e.url);t.searchParams.delete("_routes");let n={method:e.method,body:e.body,headers:e.headers,signal:e.signal};return n.body&&(n.duplex="half"),new Request(t.href,n)}function io(e,t){if(!1===e||null==e)throw console.error("The following error is a bug in React Router; please open an issue! https://github.com/remix-run/react-router/issues/new/choose"),new Error(t)}function lo(e){let t={};return Object.values(e).forEach((e=>{if(e){let n=e.parentId||"";t[n]||(t[n]=[]),t[n].push(e)}})),t}function so(e,t="",n=lo(e)){return(n[t]||[]).map((t=>({...t,children:so(e,t.id,n)})))}function uo(e,t,n="",r=lo(e)){return(r[n]||[]).map((n=>{let a={hasErrorBoundary:"root"===n.id||null!=n.module.ErrorBoundary,id:n.id,path:n.path,loader:n.module.loader?async e=>{if(e.request.headers.has("X-React-Router-Prerender-Data")){const t=e.request.headers.get("X-React-Router-Prerender-Data");let r=t?decodeURI(t):t;io(r,"Missing prerendered data for route");let a=(new TextEncoder).encode(r),o=new ReadableStream({start(e){e.enqueue(a),e.close()}}),i=(await or(o,global)).value;io(i&&n.id in i,"Unable to decode prerendered data");let l=i[n.id];return io("data"in l,"Unable to process prerendered data"),l.data}return await ro(n.module.loader,e)}:void 0,action:n.module.action?e=>ro(n.module.action,e):void 0,handle:n.module.handle};return n.index?{index:!0,...a}:{caseSensitive:n.caseSensitive,children:uo(e,t,n.id,r),...a}}))}var co={"&":"\\u0026",">":"\\u003e","<":"\\u003c","\u2028":"\\u2028","\u2029":"\\u2029"},fo=/[&><\u2028\u2029]/g;function ho(e){return JSON.stringify(e).replace(fo,(e=>co[e]))}var po="__reactRouterDevServerHooks";function mo(e){globalThis[po]=e}function yo(){return globalThis[po]}var vo=n(413),go=n(490);function bo(e,t){let n,r=t.errors?t.matches.findIndex((e=>t.errors[e.route.id])):-1,a=r>=0?t.matches.slice(0,r+1):t.matches;if(r>=0){let{actionHeaders:e,actionData:a,loaderHeaders:o,loaderData:i}=t;t.matches.slice(r).some((t=>{let r=t.route.id;return!e[r]||a&&a.hasOwnProperty(r)?o[r]&&!i.hasOwnProperty(r)&&(n=o[r]):n=e[r],null!=n}))}return a.reduce(((r,o,i)=>{let{id:l}=o.route,s=e.routes[l];io(s,`Route with id "${l}" not found in build`);let u=s.module,c=t.loaderHeaders[l]||new Headers,d=t.actionHeaders[l]||new Headers,f=null!=n&&i===a.length-1,h=f&&n!==c&&n!==d;if(null==u.headers){let e=new Headers(r);return h&&wo(n,e),wo(d,e),wo(c,e),e}let p=new Headers(u.headers?"function"==typeof u.headers?u.headers({loaderHeaders:c,parentHeaders:r,actionHeaders:d,errorHeaders:f?n:void 0}):u.headers:void 0);return h&&wo(n,p),wo(d,p),wo(c,p),wo(r,p),p}),new Headers)}function wo(e,t){let n=e.get("Set-Cookie");n&&(0,go.splitCookiesString)(n).forEach((e=>{t.append("Set-Cookie",e)}))}var So=202;function Eo({isActionDataRequest:e,loadRouteIds:t}={}){return async({request:n,matches:r})=>{if(e&&"GET"===n.method)return{};let a=t?r.filter((e=>t.includes(e.route.id))):r;return(await Promise.all(a.map((e=>e.resolve())))).reduce(((e,t,n)=>Object.assign(e,{[a[n].route.id]:t})),{})}}function ko(e,t,n){let r=t.get("Location");return n&&(r=q(r,n)||r),{redirect:r,status:e,revalidate:t.has("X-Remix-Revalidate")||t.has("Set-Cookie"),reload:t.has("X-Remix-Reload-Document"),replace:t.has("X-Remix-Replace")}}function xo(e,t,n,r){let a=new AbortController,o=setTimeout((()=>a.abort(new Error("Server Timeout"))),"number"==typeof n?n:4950);return t.addEventListener("abort",(()=>clearTimeout(o))),(0,vo.encode)(e,{signal:a.signal,plugins:[e=>{if(e instanceof Error){let{name:t,message:n,stack:a}="production"===r?Xa(e,r):e;return["SanitizedError",t,n,a]}if(e instanceof oe){let{data:t,status:n,statusText:r}=e;return["ErrorResponse",t,n,r]}if(e&&"object"==typeof e&&Xn in e)return["SingleFetchRedirect",e[Xn]]}],postPlugins:[e=>{if(e&&"object"==typeof e)return["SingleFetchClassInstance",Object.fromEntries(Object.entries(e))]},()=>["SingleFetchFallback"]]})}function Ro(e,t){let n=so(e.routes),r=uo(e.routes,e.future),a="development"===(o=t)||"production"===o||"test"===o?t:"production";var o;let i=Se(r,{basename:e.basename}),l=e.entry.module.handleError||((e,{request:t})=>{"test"===a||t.signal.aborted||console.error(ie(e)&&e.error?e.error:e)});return{routes:n,dataRoutes:r,serverMode:a,staticHandler:i,errorHandler:l}}var Co=(e,t)=>{let n,r,a,o,i;return async function(l,s={}){if(n="function"==typeof e?await e():e,"function"==typeof e){let e=Ro(n,t);r=e.routes,a=e.serverMode,o=e.staticHandler,i=e.errorHandler}else if(!(r&&a&&o&&i)){let e=Ro(n,t);r=e.routes,a=e.serverMode,o=e.staticHandler,i=e.errorHandler}let u=new URL(l.url),c={},d=e=>{"development"===t&&yo()?.processRequestError?.(e),i(e,{context:s,params:c,request:l})},f=`${n.basename??"/"}/__manifest`.replace(/\/+/g,"/");if(u.pathname===f)try{let e=await async function(e,t,n){let r={};if(n.searchParams.has("p")){for(let a of n.searchParams.getAll("p")){let n=no(t,a,e.basename);if(n)for(let t of n){let n=t.route.id,a=e.assets.routes[n];a&&(r[n]=a)}}return Response.json(r,{headers:{"Cache-Control":"public, max-age=31536000, immutable"}})}return new Response("Invalid Request",{status:400})}(n,r,u);return e}catch(e){return d(e),new Response("Unknown Server Error",{status:500})}let h,p=no(r,u.pathname,n.basename);if(p&&p.length>0&&Object.assign(c,p[0].params),u.pathname.endsWith(".data")){let e=new URL(l.url);e.pathname=e.pathname.replace(/\.data$/,"").replace(/^\/_root$/,"/");let t=no(r,e.pathname,n.basename);if(h=await async function(e,t,n,r,a,o,i){let{result:l,headers:s,status:u}="GET"!==r.method?await async function(e,t,n,r,a,o,i){try{let l=new Request(a,{method:r.method,body:r.body,headers:r.headers,signal:r.signal,...r.body?{duplex:"half"}:void 0}),s=await n.query(l,{requestContext:o,skipLoaderErrorBubbling:!0,dataStrategy:Eo({isActionDataRequest:!0})});if(Ze(s))return{result:ko(s.status,s.headers,e.basename),headers:s.headers,status:So};let u,c=s,d=bo(e,c);return et(c.statusCode)&&d.has("Location")?{result:ko(c.statusCode,d,e.basename),headers:d,status:So}:(c.errors&&(Object.values(c.errors).forEach((e=>{ie(e)&&!e.error||i(e)})),c.errors=Za(c.errors,t)),u=c.errors?{error:Object.values(c.errors)[0]}:{data:Object.values(c.actionData||{})[0]},{result:u,headers:d,status:c.statusCode})}catch(e){return i(e),{result:{error:e},headers:new Headers,status:500}}}(t,e,n,r,a,o,i):await async function(e,t,n,r,a,o,i){try{let l=new Request(a,{headers:r.headers,signal:r.signal}),s=new URL(r.url).searchParams.get("_routes")?.split(",")||void 0,u=await n.query(l,{requestContext:o,skipLoaderErrorBubbling:!0,dataStrategy:Eo({loadRouteIds:s})});if(Ze(u))return{result:{[Xn]:ko(u.status,u.headers,e.basename)},headers:u.headers,status:So};let c=u,d=bo(e,c);if(et(c.statusCode)&&d.has("Location"))return{result:{[Xn]:ko(c.statusCode,d,e.basename)},headers:d,status:So};c.errors&&(Object.values(c.errors).forEach((e=>{ie(e)&&!e.error||i(e)})),c.errors=Za(c.errors,t));let f={};return(s?c.matches.filter((e=>e.route.loader&&s.includes(e.route.id))):c.matches).forEach((e=>{let{id:t}=e.route;c.errors&&c.errors.hasOwnProperty(t)?f[t]={error:c.errors[t]}:c.loaderData.hasOwnProperty(t)&&(f[t]={data:c.loaderData[t]})})),{result:f,headers:d,status:c.statusCode}}catch(e){return i(e),{result:{root:{error:e}},headers:new Headers,status:500}}}(t,e,n,r,a,o,i),c=new Headers(s);return c.set("X-Remix-Response","yes"),304===u?new Response(null,{status:304,headers:c}):(c.set("Content-Type","text/x-script"),new Response(xo(l,r.signal,t.entry.module.streamTimeout,e),{status:u||200,headers:c}))}(a,n,o,l,e,s,d),n.entry.module.handleDataRequest&&(h=await n.entry.module.handleDataRequest(h,{context:s,params:t?t[0].params:{},request:l}),tt(h))){let e=ko(h.status,h.headers,n.basename);"GET"===l.method&&(e={[Xn]:e});let t=new Headers(h.headers);return t.set("Content-Type","text/x-script"),new Response(xo(e,l.signal,n.entry.module.streamTimeout,a),{status:So,headers:t})}}else if(p&&null==p[p.length-1].route.module.default&&null==p[p.length-1].route.module.ErrorBoundary)h=await async function(e,t,n,r,a,o){try{let e=await t.queryRoute(r,{routeId:n,requestContext:a});return io(Ze(e),"Expected a Response to be returned from resource route handler"),e}catch(t){return Ze(t)?(t.headers.set("X-Remix-Catch","yes"),t):ie(t)?(t&&o(t),function(e,t){return Response.json(eo(e.error||new Error("Unexpected Server Error"),t),{status:e.status,statusText:e.statusText,headers:{"X-Remix-Error":"yes"}})}(t,e)):(o(t),Po(t,e))}}(a,o,p.slice(-1)[0].route.id,l,s,d);else{let e="development"===t?await(yo()?.getCriticalCss?.(n,u.pathname)):void 0;h=await async function(e,t,n,r,a,o,i){let l;try{l=await n.query(r,{requestContext:a})}catch(e){return o(e),new Response(null,{status:500})}if(Ze(l))return l;let s=bo(t,l);if(304===l.statusCode)return new Response(null,{status:304,headers:s});l.errors&&(Object.values(l.errors).forEach((e=>{ie(e)&&!e.error||o(e)})),l.errors=Za(l.errors,e));let u={loaderData:l.loaderData,actionData:l.actionData,errors:to(l.errors,e)},c={manifest:t.assets,routeModules:(f=t.routes,Object.keys(f).reduce(((e,t)=>{let n=f[t];return n&&(e[t]=n.module),e}),{})),staticHandlerContext:l,criticalCss:i,serverHandoffString:ho({basename:t.basename,criticalCss:i,future:t.future,isSpaMode:t.isSpaMode}),serverHandoffStream:xo(u,r.signal,t.entry.module.streamTimeout,e),renderMeta:{},future:t.future,isSpaMode:t.isSpaMode,serializeError:t=>eo(t,e)},d=t.entry.module.default;var f;try{return await d(r,l.statusCode,s,c,a)}catch(i){o(i);let u=i;if(Ze(i))try{let e=await function(e){let t=e.headers.get("Content-Type");return t&&/\bapplication\/json\b/.test(t)?null==e.body?null:e.json():e.text()}(i);u=new oe(i.status,i.statusText,e)}catch(e){}l=function(e,t,n){return{...t,statusCode:ie(n)?n.status:500,errors:{[t._deepestRenderedBoundaryId||e[0].id]:n}}}(n.dataRoutes,l,u),l.errors&&(l.errors=Za(l.errors,e));let f={loaderData:l.loaderData,actionData:l.actionData,errors:to(l.errors,e)};c={...c,staticHandlerContext:l,serverHandoffString:ho({basename:t.basename,future:t.future,isSpaMode:t.isSpaMode}),serverHandoffStream:xo(f,r.signal,t.entry.module.streamTimeout,e),renderMeta:{}};try{return await d(r,l.statusCode,s,c,a)}catch(t){return o(t),Po(t,e)}}}(a,n,o,l,s,d,e)}return"HEAD"===l.method?new Response(null,{headers:h.headers,status:h.status,statusText:h.statusText}):h}};function Po(e,t){let n="Unexpected Server Error";return"production"!==t&&(n+=`\n\n${String(e)}`),new Response(n,{status:500,headers:{"Content-Type":"text/plain"}})}function Lo(e){return`__flash_${e}__`}var Ao=(e={},t="")=>{let n=new Map(Object.entries(e));return{get id(){return t},get data(){return Object.fromEntries(n)},has:e=>n.has(e)||n.has(Lo(e)),get(e){if(n.has(e))return n.get(e);let t=Lo(e);if(n.has(t)){let e=n.get(t);return n.delete(t),e}},set(e,t){n.set(e,t)},flash(e,t){n.set(Lo(e),t)},unset(e){n.delete(e)}}},To=e=>null!=e&&"string"==typeof e.id&&void 0!==e.data&&"function"==typeof e.has&&"function"==typeof e.get&&"function"==typeof e.set&&"function"==typeof e.flash&&"function"==typeof e.unset;function _o({cookie:e,createData:t,readData:n,updateData:r,deleteData:a}){let o=Ja(e)?e:Wa(e?.name||"__session",e);return Oo(o),{async getSession(e,t){let r=e&&await o.parse(e,t),a=r&&await n(r);return Ao(a||{},r||"")},async commitSession(e,n){let{id:a,data:i}=e,l=null!=n?.maxAge?new Date(Date.now()+1e3*n.maxAge):null!=n?.expires?n.expires:o.expires;return a?await r(a,i,l):a=await t(i,l),o.serialize(a,n)},destroySession:async(e,t)=>(await a(e.id),o.serialize("",{...t,maxAge:void 0,expires:new Date(0)}))}}function Oo(e){sn(e.isSigned,`The "${e.name}" cookie is not signed, but session cookies should be signed to prevent tampering on the client before they are sent back to the server. See https://remix.run/utils/cookies#signing-cookies for more information.`)}function Do({cookie:e}={}){let t=Ja(e)?e:Wa(e?.name||"__session",e);return Oo(t),{getSession:async(e,n)=>Ao(e&&await t.parse(e,n)||{}),async commitSession(e,n){let r=await t.serialize(e.data,n);if(r.length>4096)throw new Error("Cookie length will exceed browser maximum. Length: "+r.length);return r},destroySession:async(e,n)=>t.serialize("",{...n,maxAge:void 0,expires:new Date(0)})}}function No({cookie:e}={}){let t=new Map;return _o({cookie:e,async createData(e,n){let r=Math.random().toString(36).substring(2,10);return t.set(r,{data:e,expires:n}),r},async readData(e){if(t.has(e)){let{data:n,expires:r}=t.get(e);if(!r||r>new Date)return n;r&&t.delete(e)}return null},async updateData(e,n,r){t.set(e,{data:n,expires:r})},async deleteData(e){t.delete(e)}})}function Mo(e){if(!e)return null;let t=Object.entries(e),n={};for(let[e,r]of t)if(r&&"RouteErrorResponse"===r.__type)n[e]=new oe(r.status,r.statusText,r.data,!0===r.internal);else if(r&&"Error"===r.__type){if(r.__subType){let t=window[r.__subType];if("function"==typeof t)try{let a=new t(r.message);a.stack=r.stack,n[e]=a}catch(e){}}if(null==n[e]){let t=new Error(r.message);t.stack=r.stack,n[e]=t}}else n[e]=r;return n}},740:(e,t)=>{var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.consumer"),s=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),h=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,y={};function v(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||p}function g(){}function b(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||p}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var w=b.prototype=new g;w.constructor=b,m(w,v.prototype),w.isPureReactComponent=!0;var S=Array.isArray,E={H:null,A:null,T:null,S:null},k=Object.prototype.hasOwnProperty;function x(e,t,r,a,o,i){return r=i.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:i}}function R(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var C=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function L(){}function A(e,t,a,o,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s,u,c=!1;if(null===e)c=!0;else switch(l){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0;break;case f:return A((c=e._init)(e._payload),t,a,o,i)}}if(c)return i=i(e),c=""===o?"."+P(e,0):o,S(i)?(a="",null!=c&&(a=c.replace(C,"$&/")+"/"),A(i,t,a,"",(function(e){return e}))):null!=i&&(R(i)&&(s=i,u=a+(null==i.key||e&&e.key===i.key?"":(""+i.key).replace(C,"$&/")+"/")+c,i=x(s.type,u,void 0,0,0,s.props)),t.push(i)),1;c=0;var d,p=""===o?".":o+":";if(S(e))for(var m=0;m<e.length;m++)c+=A(o=e[m],t,a,l=p+P(o,m),i);else if("function"==typeof(m=null===(d=e)||"object"!=typeof d?null:"function"==typeof(d=h&&d[h]||d["@@iterator"])?d:null))for(e=m.call(e),m=0;!(o=e.next()).done;)c+=A(o=o.value,t,a,l=p+P(o,m++),i);else if("object"===l){if("function"==typeof e.then)return A(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(L,L):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,a,o,i);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function T(e,t,n){if(null==e)return e;var r=[],a=0;return A(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function _(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var O="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function D(){}t.Children={map:T,forEach:function(e,t,n){T(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return T(e,(function(){t++})),t},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!R(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=a,t.Profiler=i,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=E,t.act=function(){throw Error("act(...) is not supported in production builds of React.")},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=m({},e.props),a=e.key;if(null!=t)for(o in t.ref,void 0!==t.key&&(a=""+t.key),t)!k.call(t,o)||"key"===o||"__self"===o||"__source"===o||"ref"===o&&void 0===t.ref||(r[o]=t[o]);var o=arguments.length-2;if(1===o)r.children=n;else if(1<o){for(var i=Array(o),l=0;l<o;l++)i[l]=arguments[l+2];r.children=i}return x(e.type,a,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:l,_context:e},e},t.createElement=function(e,t,n){var r,a={},o=null;if(null!=t)for(r in void 0!==t.key&&(o=""+t.key),t)k.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(a[r]=t[r]);var i=arguments.length-2;if(1===i)a.children=n;else if(1<i){for(var l=Array(i),s=0;s<i;s++)l[s]=arguments[s+2];a.children=l}if(e&&e.defaultProps)for(r in i=e.defaultProps)void 0===a[r]&&(a[r]=i[r]);return x(e,o,void 0,0,0,a)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=R,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:_}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=E.T,n={};E.T=n;try{var r=e(),a=E.S;null!==a&&a(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(D,O)}catch(e){O(e)}finally{E.T=t}},t.unstable_useCacheRefresh=function(){return E.H.useCacheRefresh()},t.use=function(e){return E.H.use(e)},t.useActionState=function(e,t,n){return E.H.useActionState(e,t,n)},t.useCallback=function(e,t){return E.H.useCallback(e,t)},t.useContext=function(e){return E.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return E.H.useDeferredValue(e,t)},t.useEffect=function(e,t){return E.H.useEffect(e,t)},t.useId=function(){return E.H.useId()},t.useImperativeHandle=function(e,t,n){return E.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return E.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return E.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return E.H.useMemo(e,t)},t.useOptimistic=function(e,t){return E.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return E.H.useReducer(e,t,n)},t.useRef=function(e){return E.H.useRef(e)},t.useState=function(e){return E.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return E.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return E.H.useTransition()},t.version="19.0.0"},471:(e,t,n)=>{e.exports=n(740)},724:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var l=2*(r+1)-1,s=e[l],u=l+1,c=e[u];if(0>o(s,n))u<a&&0>o(c,s)?(e[r]=c,e[u]=n,r=u):(e[r]=s,e[l]=n,r=l);else{if(!(u<a&&0>o(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}var u=[],c=[],d=1,f=null,h=3,p=!1,m=!1,y=!1,v="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function S(e){if(y=!1,w(e),!m)if(null!==r(u))m=!0,_();else{var t=r(c);null!==t&&O(S,t.startTime-e)}}var E,k=!1,x=-1,R=5,C=-1;function P(){return!(t.unstable_now()-C<R)}function L(){if(k){var e=t.unstable_now();C=e;var n=!0;try{e:{m=!1,y&&(y=!1,g(x),x=-1),p=!0;var o=h;try{t:{for(w(e),f=r(u);null!==f&&!(f.expirationTime>e&&P());){var i=f.callback;if("function"==typeof i){f.callback=null,h=f.priorityLevel;var l=i(f.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof l){f.callback=l,w(e),n=!0;break t}f===r(u)&&a(u),w(e)}else a(u);f=r(u)}if(null!==f)n=!0;else{var s=r(c);null!==s&&O(S,s.startTime-e),n=!1}}break e}finally{f=null,h=o,p=!1}n=void 0}}finally{n?E():k=!1}}}if("function"==typeof b)E=function(){b(L)};else if("undefined"!=typeof MessageChannel){var A=new MessageChannel,T=A.port2;A.port1.onmessage=L,E=function(){T.postMessage(null)}}else E=function(){v(L,0)};function _(){k||(k=!0,E())}function O(e,n){x=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||p||(m=!0,_())},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):R=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return h},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(h){case 1:case 2:case 3:var t=3;break;default:t=h}var n=h;h=t;try{return e()}finally{h=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=h;h=e;try{return t()}finally{h=n}},t.unstable_scheduleCallback=function(e,a,o){var i=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>i?(e.sortIndex=o,n(c,e),null===r(u)&&e===r(c)&&(y?(g(x),x=-1):y=!0,O(S,o-i))):(e.sortIndex=l,n(u,e),m||p||(m=!0,_())),e},t.unstable_shouldYield=P,t.unstable_wrapCallback=function(e){var t=h;return function(){var n=h;h=t;try{return e.apply(this,arguments)}finally{h=n}}}},817:(e,t,n)=>{e.exports=n(724)},490:e=>{var t={decodeValues:!0,map:!1,silent:!1};function n(e){return"string"==typeof e&&!!e.trim()}function r(e,r){var a=e.split(";").filter(n),o=function(e){var t="",n="",r=e.split("=");return r.length>1?(t=r.shift(),n=r.join("=")):n=e,{name:t,value:n}}(a.shift()),i=o.name,l=o.value;r=r?Object.assign({},t,r):t;try{l=r.decodeValues?decodeURIComponent(l):l}catch(e){console.error("set-cookie-parser encountered an error while decoding a cookie with value '"+l+"'. Set options.decodeValues to false to disable this feature.",e)}var s={name:i,value:l};return a.forEach((function(e){var t=e.split("="),n=t.shift().trimLeft().toLowerCase(),r=t.join("=");"expires"===n?s.expires=new Date(r):"max-age"===n?s.maxAge=parseInt(r,10):"secure"===n?s.secure=!0:"httponly"===n?s.httpOnly=!0:"samesite"===n?s.sameSite=r:"partitioned"===n?s.partitioned=!0:s[n]=r})),s}function a(e,a){if(a=a?Object.assign({},t,a):t,!e)return a.map?{}:[];if(e.headers)if("function"==typeof e.headers.getSetCookie)e=e.headers.getSetCookie();else if(e.headers["set-cookie"])e=e.headers["set-cookie"];else{var o=e.headers[Object.keys(e.headers).find((function(e){return"set-cookie"===e.toLowerCase()}))];o||!e.headers.cookie||a.silent||console.warn("Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning."),e=o}return Array.isArray(e)||(e=[e]),a.map?e.filter(n).reduce((function(e,t){var n=r(t,a);return e[n.name]=n,e}),{}):e.filter(n).map((function(e){return r(e,a)}))}e.exports=a,e.exports.parse=a,e.exports.parseString=r,e.exports.splitCookiesString=function(e){if(Array.isArray(e))return e;if("string"!=typeof e)return[];var t,n,r,a,o,i=[],l=0;function s(){for(;l<e.length&&/\s/.test(e.charAt(l));)l+=1;return l<e.length}for(;l<e.length;){for(t=l,o=!1;s();)if(","===(n=e.charAt(l))){for(r=l,l+=1,s(),a=l;l<e.length&&"="!==(n=e.charAt(l))&&";"!==n&&","!==n;)l+=1;l<e.length&&"="===e.charAt(l)?(o=!0,l=a,i.push(e.substring(t,r)),t=l):l=r+1}else l+=1;(!o||l>=e.length)&&i.push(e.substring(t,e.length))}return i}},458:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.flatten=void 0;const r=n(441);function a(e){const{indices:t}=this,n=t.get(e);if(n)return[n];if(void 0===e)return r.UNDEFINED;if(null===e)return r.NULL;if(Number.isNaN(e))return r.NAN;if(e===Number.POSITIVE_INFINITY)return r.POSITIVE_INFINITY;if(e===Number.NEGATIVE_INFINITY)return r.NEGATIVE_INFINITY;if(0===e&&1/e<0)return r.NEGATIVE_ZERO;const a=this.index++;return t.set(e,a),o.call(this,e,a),a}function o(e,t){const{deferred:n,plugins:o,postPlugins:i}=this,s=this.stringified,u=[[e,t]];for(;u.length>0;){const[e,t]=u.pop(),c=e=>Object.keys(e).map((t=>`"_${a.call(this,t)}":${a.call(this,e[t])}`)).join(",");let d=null;switch(typeof e){case"boolean":case"number":case"string":s[t]=JSON.stringify(e);break;case"bigint":s[t]=`["${r.TYPE_BIGINT}","${e}"]`;break;case"symbol":{const n=Symbol.keyFor(e);n?s[t]=`["${r.TYPE_SYMBOL}",${JSON.stringify(n)}]`:d=new Error("Cannot encode symbol unless created with Symbol.for()");break}case"object":{if(!e){s[t]=`${r.NULL}`;break}const i=Array.isArray(e);let u=!1;if(!i&&o)for(const n of o){const r=n(e);if(Array.isArray(r)){u=!0;const[e,...n]=r;s[t]=`[${JSON.stringify(e)}`,n.length>0&&(s[t]+=`,${n.map((e=>a.call(this,e))).join(",")}`),s[t]+="]";break}}if(!u){let o=i?"[":"{";if(i){for(let t=0;t<e.length;t++)o+=(t?",":"")+(t in e?a.call(this,e[t]):r.HOLE);s[t]=`${o}]`}else e instanceof Date?s[t]=`["${r.TYPE_DATE}",${e.getTime()}]`:e instanceof URL?s[t]=`["${r.TYPE_URL}",${JSON.stringify(e.href)}]`:e instanceof RegExp?s[t]=`["${r.TYPE_REGEXP}",${JSON.stringify(e.source)},${JSON.stringify(e.flags)}]`:e instanceof Set?e.size>0?s[t]=`["${r.TYPE_SET}",${[...e].map((e=>a.call(this,e))).join(",")}]`:s[t]=`["${r.TYPE_SET}"]`:e instanceof Map?e.size>0?s[t]=`["${r.TYPE_MAP}",${[...e].flatMap((([e,t])=>[a.call(this,e),a.call(this,t)])).join(",")}]`:s[t]=`["${r.TYPE_MAP}"]`:e instanceof Promise?(s[t]=`["${r.TYPE_PROMISE}",${t}]`,n[t]=e):e instanceof Error?(s[t]=`["${r.TYPE_ERROR}",${JSON.stringify(e.message)}`,"Error"!==e.name&&(s[t]+=`,${JSON.stringify(e.name)}`),s[t]+="]"):null===Object.getPrototypeOf(e)?s[t]=`["${r.TYPE_NULL_OBJECT}",{${c(e)}}]`:l(e)?s[t]=`{${c(e)}}`:d=new Error("Cannot encode object with prototype")}break}default:{let n=!1;if(!Array.isArray(e)&&o)for(const r of o){const o=r(e);if(Array.isArray(o)){n=!0;const[e,...r]=o;s[t]=`[${JSON.stringify(e)}`,r.length>0&&(s[t]+=`,${r.map((e=>a.call(this,e))).join(",")}`),s[t]+="]";break}}n||(d=new Error("Cannot encode function or unexpected type"))}}if(d){let n=!1;if(i)for(const r of i){const o=r(e);if(Array.isArray(o)){n=!0;const[e,...r]=o;s[t]=`[${JSON.stringify(e)}`,r.length>0&&(s[t]+=`,${r.map((e=>a.call(this,e))).join(",")}`),s[t]+="]";break}}if(!n)throw d}}}t.flatten=a;const i=Object.getOwnPropertyNames(Object.prototype).sort().join("\0");function l(e){const t=Object.getPrototypeOf(e);return t===Object.prototype||null===t||Object.getOwnPropertyNames(t).sort().join("\0")===i}},413:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.encode=t.decode=void 0;const r=n(458),a=n(3),o=n(441);async function i(e){const t=await e.read();if(!t.value)throw new SyntaxError;let n;try{n=JSON.parse(t.value)}catch(e){throw new SyntaxError}return{done:t.done,value:a.unflatten.call(this,n)}}async function l(e){let t=await e.read();for(;!t.done;){if(!t.value)continue;const n=t.value;switch(n[0]){case o.TYPE_PROMISE:{const e=n.indexOf(":"),t=Number(n.slice(1,e)),r=this.deferred[t];if(!r)throw new Error(`Deferred ID ${t} not found in stream`);const o=n.slice(e+1);let i;try{i=JSON.parse(o)}catch(e){throw new SyntaxError}const l=a.unflatten.call(this,i);r.resolve(l);break}case o.TYPE_ERROR:{const e=n.indexOf(":"),t=Number(n.slice(1,e)),r=this.deferred[t];if(!r)throw new Error(`Deferred ID ${t} not found in stream`);const o=n.slice(e+1);let i;try{i=JSON.parse(o)}catch(e){throw new SyntaxError}const l=a.unflatten.call(this,i);r.reject(l);break}default:throw new SyntaxError}t=await e.read()}}function s(e,t){if(!t)return e;if(t.aborted)return Promise.reject(t.reason||new Error("Signal was aborted."));const n=new Promise(((n,r)=>{t.addEventListener("abort",(e=>{r(t.reason||new Error("Signal was aborted."))})),e.then(n).catch(r)}));return n.catch((()=>{})),Promise.race([n,e])}t.decode=async function(e,t){const{plugins:n}=t??{},r=new o.Deferred,a=e.pipeThrough((0,o.createLineSplittingTransform)()).getReader(),s={values:[],hydrated:[],deferred:{},plugins:n},u=await i.call(s,a);let c=r.promise;return u.done?r.resolve():c=l.call(s,a).then(r.resolve).catch((e=>{for(const t of Object.values(s.deferred))t.reject(e);r.reject(e)})),{done:c.then((()=>a.closed)),value:u.value}},t.encode=function(e,t){const{plugins:n,postPlugins:a,signal:i}=t??{},l={deferred:{},index:0,indices:new Map,stringified:[],plugins:n,postPlugins:a,signal:i},u=new TextEncoder;let c=0;return new ReadableStream({async start(t){const n=r.flatten.call(l,e);if(Array.isArray(n))throw new Error("This should never happen");n<0?t.enqueue(u.encode(`${n}\n`)):(t.enqueue(u.encode(`[${l.stringified.join(",")}]\n`)),c=l.stringified.length-1);const a=new WeakSet;for(;Object.keys(l.deferred).length>0;){for(const[e,n]of Object.entries(l.deferred))a.has(n)||a.add(l.deferred[Number(e)]=s(n,l.signal).then((n=>{const a=r.flatten.call(l,n);if(Array.isArray(a))t.enqueue(u.encode(`${o.TYPE_PROMISE}${e}:[["${o.TYPE_PREVIOUS_RESOLVED}",${a[0]}]]\n`)),l.index++,c++;else if(a<0)t.enqueue(u.encode(`${o.TYPE_PROMISE}${e}:${a}\n`));else{const n=l.stringified.slice(c+1).join(",");t.enqueue(u.encode(`${o.TYPE_PROMISE}${e}:[${n}]\n`)),c=l.stringified.length-1}}),(n=>{n&&"object"==typeof n&&n instanceof Error||(n=new Error("An unknown error occurred"));const a=r.flatten.call(l,n);if(Array.isArray(a))t.enqueue(u.encode(`${o.TYPE_ERROR}${e}:[["${o.TYPE_PREVIOUS_RESOLVED}",${a[0]}]]\n`)),l.index++,c++;else if(a<0)t.enqueue(u.encode(`${o.TYPE_ERROR}${e}:${a}\n`));else{const n=l.stringified.slice(c+1).join(",");t.enqueue(u.encode(`${o.TYPE_ERROR}${e}:[${n}]\n`)),c=l.stringified.length-1}})).finally((()=>{delete l.deferred[Number(e)]})));await Promise.race(Object.values(l.deferred))}await Promise.all(Object.values(l.deferred)),t.close()}})}},3:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.unflatten=void 0;const r=n(441),a="undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:void 0;function o(e){const{hydrated:t,values:n,deferred:o,plugins:i}=this;let l;const s=[[e,e=>{l=e}]];let u=[];for(;s.length>0;){const[e,l]=s.pop();switch(e){case r.UNDEFINED:l(void 0);continue;case r.NULL:l(null);continue;case r.NAN:l(NaN);continue;case r.POSITIVE_INFINITY:l(1/0);continue;case r.NEGATIVE_INFINITY:l(-1/0);continue;case r.NEGATIVE_ZERO:l(-0);continue}if(t[e]){l(t[e]);continue}const c=n[e];if(c&&"object"==typeof c)if(Array.isArray(c))if("string"==typeof c[0]){const[n,d,f]=c;switch(n){case r.TYPE_DATE:l(t[e]=new Date(d));continue;case r.TYPE_URL:l(t[e]=new URL(d));continue;case r.TYPE_BIGINT:l(t[e]=BigInt(d));continue;case r.TYPE_REGEXP:l(t[e]=new RegExp(d,f));continue;case r.TYPE_SYMBOL:l(t[e]=Symbol.for(d));continue;case r.TYPE_SET:const n=new Set;t[e]=n;for(let e=1;e<c.length;e++)s.push([c[e],e=>{n.add(e)}]);l(n);continue;case r.TYPE_MAP:const h=new Map;t[e]=h;for(let e=1;e<c.length;e+=2){const t=[];s.push([c[e+1],e=>{t[1]=e}]),s.push([c[e],e=>{t[0]=e}]),u.push((()=>{h.set(t[0],t[1])}))}l(h);continue;case r.TYPE_NULL_OBJECT:const p=Object.create(null);t[e]=p;for(const e of Object.keys(d).reverse()){const t=[];s.push([d[e],e=>{t[1]=e}]),s.push([Number(e.slice(1)),e=>{t[0]=e}]),u.push((()=>{p[t[0]]=t[1]}))}l(p);continue;case r.TYPE_PROMISE:if(t[d])l(t[e]=t[d]);else{const n=new r.Deferred;o[d]=n,l(t[e]=n.promise)}continue;case r.TYPE_ERROR:const[,m,y]=c;let v=y&&a&&a[y]?new a[y](m):new Error(m);t[e]=v,l(v);continue;case r.TYPE_PREVIOUS_RESOLVED:l(t[e]=t[d]);continue;default:if(Array.isArray(i)){const n=[],r=c.slice(1);for(let e=0;e<r.length;e++){const t=r[e];s.push([t,t=>{n[e]=t}])}u.push((()=>{for(const r of i){const a=r(c[0],...n);if(a)return void l(t[e]=a.value)}throw new SyntaxError}));continue}throw new SyntaxError}}else{const n=[];t[e]=n;for(let e=0;e<c.length;e++){const t=c[e];t!==r.HOLE&&s.push([t,t=>{n[e]=t}])}l(n)}else{const n={};t[e]=n;for(const e of Object.keys(c).reverse()){const t=[];s.push([c[e],e=>{t[1]=e}]),s.push([Number(e.slice(1)),e=>{t[0]=e}]),u.push((()=>{n[t[0]]=t[1]}))}l(n)}else t[e]=c,l(c)}for(;u.length>0;)u.pop()();return l}t.unflatten=function(e){const{hydrated:t,values:n}=this;if("number"==typeof e)return o.call(this,e);if(!Array.isArray(e)||!e.length)throw new SyntaxError;const r=n.length;for(const t of e)n.push(t);return t.length=n.length,o.call(this,r)}},441:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createLineSplittingTransform=t.Deferred=t.TYPE_PREVIOUS_RESOLVED=t.TYPE_URL=t.TYPE_SYMBOL=t.TYPE_SET=t.TYPE_REGEXP=t.TYPE_PROMISE=t.TYPE_NULL_OBJECT=t.TYPE_MAP=t.TYPE_ERROR=t.TYPE_DATE=t.TYPE_BIGINT=t.UNDEFINED=t.POSITIVE_INFINITY=t.NULL=t.NEGATIVE_ZERO=t.NEGATIVE_INFINITY=t.NAN=t.HOLE=void 0,t.HOLE=-1,t.NAN=-2,t.NEGATIVE_INFINITY=-3,t.NEGATIVE_ZERO=-4,t.NULL=-5,t.POSITIVE_INFINITY=-6,t.UNDEFINED=-7,t.TYPE_BIGINT="B",t.TYPE_DATE="D",t.TYPE_ERROR="E",t.TYPE_MAP="M",t.TYPE_NULL_OBJECT="N",t.TYPE_PROMISE="P",t.TYPE_REGEXP="R",t.TYPE_SET="S",t.TYPE_SYMBOL="Y",t.TYPE_URL="U",t.TYPE_PREVIOUS_RESOLVED="Z",t.Deferred=class{promise;resolve;reject;constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}},t.createLineSplittingTransform=function(){const e=new TextDecoder;let t="";return new TransformStream({transform(n,r){const a=e.decode(n,{stream:!0}),o=(t+a).split("\n");t=o.pop()||"";for(const e of o)r.enqueue(e)},flush(e){t&&e.enqueue(t)}})}},292:(e,t,n)=>{n.d(t,{A:()=>l});var r=n(963),a=n.n(r),o=n(89),i=n.n(o)()(a());i.push([e.id,"@import url(https://fonts.googleapis.com/css?family=Montserrat:wght@500&display=swap);"]),i.push([e.id,'*{box-sizing:border-box}html{width:100%;--maxWidth: 1284px;font-size:1.6rem;font-weight:400;font-family:"Montserrat";background-color:#1b1b1b;color:#fff;height:-webkit-fill-available}body{min-height:100vh;min-height:-webkit-fill-available}.container{margin:auto;max-width:100vw;text-align:center}main{flex:1;display:flex;flex-direction:column;min-height:100%}a{color:#fff;text-decoration:none}@media only screen and (min-device-width: 320px){html{font-size:.9rem}}@media only screen and (min-device-width: 480px){html{font-size:1.1rem}}@media only screen and (min-device-width: 640px){html{font-size:1.4rem}}@media only screen and (min-device-width: 960px){html{font-size:1.5rem}}@media only screen and (min-device-width: 1024px){html{font-size:1.5rem}}@media only screen and (min-device-width: 1200px){.container{max-width:50vw}}',"",{version:3,sources:["webpack://./src/styles/App.scss","webpack://./src/styles/variables.scss"],names:[],mappings:"AAEA,EACE,qBAAA,CAGF,KACE,UAAA,CACA,kBAAA,CACA,gBAAA,CACA,eAAA,CACA,wBCPY,CDQZ,wBCVuB,CDWvB,UCVa,CDWb,6BAAA,CAGF,KACE,gBAAA,CAEA,iCAAA,CAGF,WACE,WAAA,CACA,eAAA,CACA,iBAAA,CAGF,KACE,MAAA,CACA,YAAA,CACA,qBAAA,CACA,eAAA,CAGF,EACE,UAAA,CACA,oBAAA,CAIF,iDAEE,KACE,eAAA,CAAA,CAIJ,iDAEE,KACE,gBAAA,CAAA,CAIJ,iDAEE,KACE,gBAAA,CAAA,CAIJ,iDAEE,KACE,gBAAA,CAAA,CAIJ,kDAEE,KACE,gBAAA,CAAA,CAIJ,kDAEE,WACE,cAAA,CAAA",sourcesContent:['@use "variables.scss";\n\n* {\n  box-sizing: border-box;\n}\n\nhtml {\n  width: 100%;\n  --maxWidth: 1284px;\n  font-size: 1.6rem;\n  font-weight: 400;\n  font-family: variables.$primaryFont;\n  background-color: variables.$primaryBackgroundColor;\n  color: variables.$primaryColor;\n  height: -webkit-fill-available;\n}\n\nbody {\n  min-height: 100vh;\n  /* mobile viewport bug fix */\n  min-height: -webkit-fill-available;\n}\n\n.container {\n  margin: auto;\n  max-width: 100vw;\n  text-align: center;\n}\n\nmain {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  min-height: 100%;\n}\n\na {\n  color: white;\n  text-decoration: none;\n}\n\n\n@media only screen and (min-device-width: 320px) {\n  /* smartphones, iPhone, portrait 480x320 phones */\n  html {\n    font-size: 0.9rem;\n  }\n}\n\n@media only screen and (min-device-width: 480px) {\n  /* portrait e-readers (Nook/Kindle), smaller tablets @ 600 or @ 640 wide. */\n  html {\n    font-size: 1.1rem;\n  }\n}\n\n@media only screen and (min-device-width: 640px) {\n  /* portrait tablets, portrait iPad, landscape e-readers, landscape 800x480 or 854x480 phones */\n  html {\n    font-size: 1.4rem;\n  }\n}\n\n@media only screen and (min-device-width: 960px) {\n  /* tablet, landscape iPad, lo-res laptops ands desktops */\n  html {\n    font-size: 1.5rem;\n  }\n}\n\n@media only screen and (min-device-width: 1024px) {\n  /* big landscape tablets, laptops */\n  html {\n    font-size: 1.5rem;\n  }\n}\n\n@media only screen and (min-device-width: 1200px) {\n  /* desktops */\n  .container {\n    max-width: 50vw;\n  }\n}\n\n@media only screen and (min-device-width: 3840px) {\n  /* hi-res laptops and desktops up to 4k TV\'s*/\n}\n','@import url("https://fonts.googleapis.com/css?family=Montserrat:wght@500&display=swap");\n\n$primaryBackgroundColor: #1B1B1B;\n$primaryColor: white;\n$primaryFont: "Montserrat";\n$secondaryColor: #808080;\n$highlightColor: linear-gradient(to bottom right, #c21500, #ffc500);\n'],sourceRoot:""}]);const l=i},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],l=0;l<e.length;l++){var s=e[l],u=r.base?s[0]+r.base:s[0],c=o[u]||0,d="".concat(u," ").concat(c);o[u]=c+1;var f=n(d),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)t[f].references++,t[f].updater(h);else{var p=a(h,r);r.byIndex=l,t.splice(l,0,{identifier:d,updater:p,references:1})}i.push(d)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var l=n(o[i]);t[l].references--}for(var s=r(e,a),u=0;u<o.length;u++){var c=n(o[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=s}}},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.m=e,n.amdO={},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.f={},n.e=e=>Promise.all(Object.keys(n.f).reduce(((t,r)=>(n.f[r](e,t),t)),[])),n.u=e=>e+".bundle.js",n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.p="",n.nc=void 0,(()=>{n.b=require("url").pathToFileURL(__filename);var e={792:1};n.f.require=(t,r)=>{e[t]||(t=>{var r=t.modules,a=t.ids,o=t.runtime;for(var i in r)n.o(r,i)&&(n.m[i]=r[i]);o&&o(n);for(var l=0;l<a.length;l++)e[a[l]]=1})(require("./"+n.u(t)))}})();var r=n(471),a=n(723),o=n(72),i=n.n(o),l=n(825),s=n.n(l),u=n(659),c=n.n(u),d=n(56),f=n.n(d),h=n(540),p=n.n(h),m=n(113),y=n.n(m),v=n(292),g={};g.styleTagTransform=y(),g.setAttributes=f(),g.insert=c().bind(null,"head"),g.domAPI=s(),g.insertStyleElement=p(),i()(v.A,g),v.A&&v.A.locals&&v.A.locals;var b=n(471);const w=b.lazy((()=>n.e(602).then(n.bind(n,602)))),S=b.lazy((()=>n.e(224).then(n.bind(n,224))));class E extends r.Component{render(){return b.createElement("div",null,b.createElement(w,null),b.createElement("main",{id:"containers",className:"containers"},this.props.children),b.createElement(S,null))}}const k=E;var x=n(183);const R=r.lazy((()=>n.e(298).then(n.bind(n,298)))),C=r.lazy((()=>n.e(450).then(n.bind(n,450))));function P(){return r.createElement(r.Suspense,{fallback:r.createElement("p",null,"Loading")},r.createElement(x.BrowserRouter,null,r.createElement(k,null,r.createElement(x.Routes,null,r.createElement(x.Route,{path:"/",element:r.createElement(R,null)}),r.createElement(x.Route,{path:"/about",element:r.createElement(C,null)})))))}const L=document.getElementById("root");(0,a.createRoot)(L).render(r.createElement(P,null))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,