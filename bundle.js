(()=>{"use strict";var e={89:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},963:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},292:(e,n,t)=>{t.d(n,{A:()=>s});var r=t(963),o=t.n(r),a=t(89),i=t.n(a)()(o());i.push([e.id,"@import url(https://fonts.googleapis.com/css?family=Montserrat:wght@500&display=swap);"]),i.push([e.id,'*{box-sizing:border-box}html{width:100%;--maxWidth: 1284px;font-size:1.6rem;font-weight:400;font-family:"Montserrat";background-color:#1b1b1b;color:#fff;height:-webkit-fill-available}body{min-height:100vh;min-height:-webkit-fill-available}.container{margin:auto;max-width:100vw;text-align:center}main{flex:1;display:flex;flex-direction:column;min-height:100%}a{color:#fff;text-decoration:none}@media only screen and (min-device-width: 320px){html{font-size:.9rem}}@media only screen and (min-device-width: 480px){html{font-size:1.1rem}}@media only screen and (min-device-width: 640px){html{font-size:1.4rem}}@media only screen and (min-device-width: 960px){html{font-size:1.5rem}}@media only screen and (min-device-width: 1024px){html{font-size:1.5rem}}@media only screen and (min-device-width: 1200px){.container{max-width:50vw}}',"",{version:3,sources:["webpack://./src/styles/App.scss","webpack://./src/styles/variables.scss"],names:[],mappings:"AAEA,EACE,qBAAA,CAGF,KACE,UAAA,CACA,kBAAA,CACA,gBAAA,CACA,eAAA,CACA,wBCPY,CDQZ,wBCVuB,CDWvB,UCVa,CDWb,6BAAA,CAGF,KACE,gBAAA,CAEA,iCAAA,CAGF,WACE,WAAA,CACA,eAAA,CACA,iBAAA,CAGF,KACE,MAAA,CACA,YAAA,CACA,qBAAA,CACA,eAAA,CAGF,EACE,UAAA,CACA,oBAAA,CAIF,iDAEE,KACE,eAAA,CAAA,CAIJ,iDAEE,KACE,gBAAA,CAAA,CAIJ,iDAEE,KACE,gBAAA,CAAA,CAIJ,iDAEE,KACE,gBAAA,CAAA,CAIJ,kDAEE,KACE,gBAAA,CAAA,CAIJ,kDAEE,WACE,cAAA,CAAA",sourcesContent:['@use "variables.scss";\n\n* {\n  box-sizing: border-box;\n}\n\nhtml {\n  width: 100%;\n  --maxWidth: 1284px;\n  font-size: 1.6rem;\n  font-weight: 400;\n  font-family: variables.$primaryFont;\n  background-color: variables.$primaryBackgroundColor;\n  color: variables.$primaryColor;\n  height: -webkit-fill-available;\n}\n\nbody {\n  min-height: 100vh;\n  /* mobile viewport bug fix */\n  min-height: -webkit-fill-available;\n}\n\n.container {\n  margin: auto;\n  max-width: 100vw;\n  text-align: center;\n}\n\nmain {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  min-height: 100%;\n}\n\na {\n  color: white;\n  text-decoration: none;\n}\n\n\n@media only screen and (min-device-width: 320px) {\n  /* smartphones, iPhone, portrait 480x320 phones */\n  html {\n    font-size: 0.9rem;\n  }\n}\n\n@media only screen and (min-device-width: 480px) {\n  /* portrait e-readers (Nook/Kindle), smaller tablets @ 600 or @ 640 wide. */\n  html {\n    font-size: 1.1rem;\n  }\n}\n\n@media only screen and (min-device-width: 640px) {\n  /* portrait tablets, portrait iPad, landscape e-readers, landscape 800x480 or 854x480 phones */\n  html {\n    font-size: 1.4rem;\n  }\n}\n\n@media only screen and (min-device-width: 960px) {\n  /* tablet, landscape iPad, lo-res laptops ands desktops */\n  html {\n    font-size: 1.5rem;\n  }\n}\n\n@media only screen and (min-device-width: 1024px) {\n  /* big landscape tablets, laptops */\n  html {\n    font-size: 1.5rem;\n  }\n}\n\n@media only screen and (min-device-width: 1200px) {\n  /* desktops */\n  .container {\n    max-width: 50vw;\n  }\n}\n\n@media only screen and (min-device-width: 3840px) {\n  /* hi-res laptops and desktops up to 4k TV\'s*/\n}\n','@import url("https://fonts.googleapis.com/css?family=Montserrat:wght@500&display=swap");\n\n$primaryBackgroundColor: #1B1B1B;\n$primaryColor: white;\n$primaryFont: "Montserrat";\n$secondaryColor: #808080;\n$highlightColor: linear-gradient(to bottom right, #c21500, #ffc500);\n'],sourceRoot:""}]);const s=i},72:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],s=0;s<e.length;s++){var l=e[s],c=r.base?l[0]+r.base:l[0],d=a[c]||0,m="".concat(c," ").concat(d);a[c]=d+1;var p=t(m),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var A=o(u,r);r.byIndex=s,n.splice(s,0,{identifier:m,updater:A,references:1})}i.push(m)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=t(a[i]);n[s].references--}for(var l=r(e,o),c=0;c<a.length;c++){var d=t(a[c]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=l}}},659:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},710:e=>{e.exports=require("@react-spring/web")},15:e=>{e.exports=require("react")},432:e=>{e.exports=require("react-device-detect")},822:e=>{e.exports=require("react-router-dom")}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.f={},t.e=e=>Promise.all(Object.keys(t.f).reduce(((n,r)=>(t.f[r](e,n),n)),[])),t.u=e=>e+".bundle.js",t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.p="",t.nc=void 0,(()=>{t.b=require("url").pathToFileURL(__filename);var e={792:1};t.f.require=(n,r)=>{e[n]||(n=>{var r=n.modules,o=n.ids,a=n.runtime;for(var i in r)t.o(r,i)&&(t.m[i]=r[i]);a&&a(t);for(var s=0;s<o.length;s++)e[o[s]]=1})(require("./"+t.u(n)))}})();var r=t(15),o=t.n(r);const a=require("react-dom/client");var i=t(72),s=t.n(i),l=t(825),c=t.n(l),d=t(659),m=t.n(d),p=t(56),u=t.n(p),A=t(540),f=t.n(A),h=t(113),v=t.n(h),y=t(292),C={};C.styleTagTransform=v(),C.setAttributes=u(),C.insert=m().bind(null,"head"),C.domAPI=c(),C.insertStyleElement=f(),s()(y.A,C),y.A&&y.A.locals&&y.A.locals;var b=t(15);const g=b.lazy((()=>t.e(306).then(t.bind(t,306)))),x=b.lazy((()=>t.e(764).then(t.bind(t,764))));class w extends r.Component{render(){return b.createElement("div",null,b.createElement(g,null),b.createElement("main",{id:"containers",className:"containers"},this.props.children),b.createElement(x,null))}}const E=w;var B=t(822);const k=o().lazy((()=>t.e(973).then(t.bind(t,973)))),z=o().lazy((()=>t.e(297).then(t.bind(t,297))));function M(){return o().createElement(o().Suspense,{fallback:o().createElement("p",null,"Loading")},o().createElement(B.BrowserRouter,null,o().createElement(E,null,o().createElement(B.Routes,null,o().createElement(B.Route,{path:"/",element:o().createElement(k,null)}),o().createElement(B.Route,{path:"/about",element:o().createElement(z,null)})))))}const I=document.getElementById("root");(0,a.createRoot)(I).render(o().createElement(M,null))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,